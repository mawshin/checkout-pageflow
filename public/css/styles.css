@charset "UTF-8";
/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/**
 * Add the correct display in IE 9-.
 */
article, aside, footer, header, nav, section {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption, figure, main {
  /* 1 */
  display: block; }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b, strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b, strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code, kbd, samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio, video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button, input, optgroup, select, textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button, input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button, select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button, html [type="button"], [type="reset"], [type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner, [type="button"]::-moz-focus-inner, [type="reset"]::-moz-focus-inner, [type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring, [type="button"]:-moz-focusring, [type="reset"]:-moz-focusring, [type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"], [type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button, [type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details, menu {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block; }

/**
 * Add the correct display in IE.
 */
template, [hidden] {
  display: none; }

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }
  html html {
    font-size: 100%;
    line-height: 1.4; }

* {
  -webkit-box-sizing: inherit;
          box-sizing: inherit; }
  *:before {
    -webkit-box-sizing: inherit;
            box-sizing: inherit; }
  *:after {
    -webkit-box-sizing: inherit;
            box-sizing: inherit; }

body {
  font-weight: 400;
  font-size: 16px;
  position: relative;
  color: #737278;
  font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; }

h1 {
  font-size: 2rem;
  line-height: 1.2;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h1 {
      font-size: 2.125rem;
      line-height: 1.2; } }

h2 {
  font-size: 1.725rem;
  line-height: 1.2;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h2 {
      font-size: 2rem;
      line-height: 1.2; } }

h3 {
  font-size: 1.25rem;
  line-height: 1.2;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h3 {
      font-size: 1.5rem;
      line-height: 1.2; } }

h4 {
  font-size: 1.125rem;
  line-height: 1.2;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h4 {
      font-size: 1.25rem;
      line-height: 1.2; } }

h5 {
  font-size: 1rem;
  line-height: 1.2;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h5 {
      font-size: 1.125rem;
      line-height: 1.2; } }

h6 {
  font-size: 1rem;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h6 {
      font-size: 1.125rem; } }

small {
  font-size: 0.75rem; }

p {
  margin-bottom: 0.5rem;
  margin-top: 0; }

a {
  outline: 0;
  color: #88d4dd;
  text-decoration: none; }
  a:focus {
    outline: 0; }

strong {
  font-weight: bold; }

ul, ol {
  padding-left: 20px; }

hr {
  border: 0;
  height: 1px;
  background: #dddee0; }

input[type=submit],
input[type=button],
button {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  cursor: pointer;
  min-height: 2.4375rem;
  padding: 0.75rem 1.5rem;
  margin-bottom: 0.625rem;
  font-family: inherit;
  font-size: 0.875rem;
  border: none;
  -webkit-border-radius: 0.1875rem;
          border-radius: 0.1875rem;
  outline: none;
  text-decoration: none;
  background-color: #74d3de;
  background-color: #ff3a00;
  color: white; }
  input[type=submit]::-moz-focus-inner,
  input[type=button]::-moz-focus-inner,
  button::-moz-focus-inner {
    border: 0;
    /* Removes dotted line in Firefox */ }
  input[type=submit]:hover, input[type=submit]:focus,
  input[type=button]:hover,
  input[type=button]:focus,
  button:hover,
  button:focus {
    -webkit-box-shadow: 0 0.125rem 0 #cfd2d4;
            box-shadow: 0 0.125rem 0 #cfd2d4; }
  input[type=submit]:active,
  input[type=button]:active,
  button:active {
    -webkit-box-shadow: inset 0 0.125rem 0 #4bc6d4;
            box-shadow: inset 0 0.125rem 0 #4bc6d4; }
  input[type=submit]:disabled,
  input[type=button]:disabled,
  button:disabled {
    color: #a2a2a2;
    background-color: #eee;
    cursor: not-allowed; }
    input[type=submit]:disabled:hover, input[type=submit]:disabled:focus,
    input[type=button]:disabled:hover,
    input[type=button]:disabled:focus,
    button:disabled:hover,
    button:disabled:focus {
      -webkit-box-shadow: none;
              box-shadow: none; }

input[type=text],
input[type=url],
input[type=email],
input[type=password],
input[type=number] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  min-height: 2.4375rem;
  width: 100%;
  padding: 0.625rem;
  margin-bottom: 0.625rem;
  font-family: inherit;
  font-size: 0.875rem;
  vertical-align: middle;
  border: 0.0625rem solid #eaebec;
  -webkit-border-radius: 0.1875rem;
          border-radius: 0.1875rem;
  outline: none;
  background-color: white; }
  input[type=text]:focus,
  input[type=url]:focus,
  input[type=email]:focus,
  input[type=password]:focus,
  input[type=number]:focus {
    border-color: #74d3de; }
  input[type=text]:disabled,
  input[type=url]:disabled,
  input[type=email]:disabled,
  input[type=password]:disabled,
  input[type=number]:disabled {
    background-color: #eee;
    cursor: not-allowed; }

textarea {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  min-height: 2.4375rem;
  width: 100%;
  padding: 0.625rem;
  margin-bottom: 0.625rem;
  font-family: inherit;
  font-size: 0.875rem;
  vertical-align: middle;
  border: 0.0625rem solid #eaebec;
  -webkit-border-radius: 0.1875rem;
          border-radius: 0.1875rem;
  outline: none;
  background-color: white;
  display: block;
  overflow: auto; }
  textarea:focus {
    border-color: #74d3de; }
  textarea:disabled {
    background-color: #eee;
    cursor: not-allowed; }

.o-select-wrap {
  position: relative;
  color: inherit;
  /* Target IE9 and IE10 */ }
  .o-select-wrap::after {
    content: '\25BE';
    position: absolute;
    top: 0.625rem;
    right: 0.9375rem;
    color: #cfd2d4;
    pointer-events: none; }
  .o-select-wrap select::-ms-expand {
    display: none; }
  .o-select-wrap select {
    -webkit-appearance: none;
    -moz-appearance: none;
    height: 2.4375rem;
    width: 100%;
    padding-left: 0.625rem;
    margin-bottom: 0.625rem;
    font-family: inherit;
    font-size: 0.875rem;
    border: 0.0625rem solid #eaebec;
    -webkit-border-radius: 0.1875rem;
            border-radius: 0.1875rem;
    outline: none;
    background-color: white; }
    .o-select-wrap select:focus {
      border-color: #74d3de; }
    .o-select-wrap select:disabled {
      background-color: #eee;
      cursor: not-allowed; }
  .o-select-wrap select {
    font-size: 0.75rem;
    padding-top: 1.125rem;
    padding-bottom: 0.38rem; }

.o-select--label {
  font-size: 0.625rem;
  position: absolute;
  top: 0;
  width: 100%;
  margin-top: 0.3em;
  padding: 0 0.75rem;
  z-index: 1;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  -webkit-transform: translateY(3px);
      -ms-transform: translateY(3px);
          transform: translateY(3px);
  pointer-events: none;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis; }

input[type=checkbox] {
  position: absolute;
  left: -1000rem;
  /* Not depending on the user's font here improves consistency. */ }
  input[type=checkbox] + label {
    position: relative;
    cursor: pointer;
    margin-right: 0.9375rem;
    padding-left: 1.5625rem;
    font-size: 0.875rem; }
    input[type=checkbox] + label::before {
      content: '';
      position: absolute;
      left: 0;
      bottom: 0;
      height: 1rem;
      width: 1rem;
      -webkit-border-radius: 0.1875rem;
              border-radius: 0.1875rem;
      background-color: #cfd2d4;
      font-family: sans-serif; }
    input[type=checkbox] + label::after {
      content: '';
      opacity: 0;
      -webkit-transition: opacity 0.3s;
      transition: opacity 0.3s; }
  input[type=checkbox]:checked + label::after {
    content: '';
    position: absolute;
    display: block;
    opacity: 1;
    left: 0.3125rem;
    top: 0;
    width: 0.1875rem;
    height: 0.6875rem;
    border: solid #74d3de;
    border-width: 0 0.1875rem 0.1875rem 0;
    -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg);
    line-height: 1rem; }
  input[type=checkbox]:focus + label::before {
    -webkit-box-shadow: 0 0.0625rem 0 #7f858b;
            box-shadow: 0 0.0625rem 0 #7f858b; }
  input[type=checkbox]:disabled + label {
    cursor: not-allowed; }
    input[type=checkbox]:disabled + label::before {
      background-color: #eee; }
  input[type=checkbox]:disabled:checked + label::after {
    border-color: #a2a2a2; }
  input[type=checkbox] + label::before {
    background-color: white;
    border: 1px solid #eaebec; }
  input[type=checkbox]:focus + label::before {
    -webkit-box-shadow: none;
            box-shadow: none; }
  input[type=checkbox]:checked + label::after {
    content: '✓';
    border: 0;
    -webkit-transform: none;
        -ms-transform: none;
            transform: none;
    color: white; }
  input[type=checkbox]:checked + label::before {
    background-color: #88d4dd;
    border: 1px solid #74d3de; }

input[type=radio] {
  position: absolute;
  left: -1000rem; }
  input[type=radio] + label {
    position: relative;
    cursor: pointer;
    margin-right: 0.9375rem;
    padding-left: 1.5625rem;
    font-size: 0.875rem; }
    input[type=radio] + label::before {
      content: '';
      position: absolute;
      left: 0;
      bottom: 0;
      height: 1.125rem;
      width: 1.125rem;
      -webkit-border-radius: 0.5625rem;
              border-radius: 0.5625rem;
      background-color: #cfd2d4;
      font-family: sans-serif; }
    input[type=radio] + label::after {
      content: '';
      -webkit-transition: background-color 0.3s;
      transition: background-color 0.3s; }
  input[type=radio]:checked + label::after {
    content: '';
    position: absolute;
    left: 0.3125rem;
    top: 0.1875rem;
    height: 0.5rem;
    width: 0.5rem;
    -webkit-border-radius: 0.9375rem;
            border-radius: 0.9375rem;
    background-color: #74d3de;
    text-align: center; }
  input[type=radio]:focus + label::before {
    -webkit-box-shadow: 0 0.0625rem 0 #7f858b;
            box-shadow: 0 0.0625rem 0 #7f858b; }
  input[type=radio]:disabled + label {
    cursor: not-allowed; }
    input[type=radio]:disabled + label::before {
      background-color: #eee; }
  input[type=radio]:disabled:checked + label::after {
    background-color: #a2a2a2; }

main {
  position: relative;
  overflow: hidden;
  padding-top: 1rem; }
  @media all and (min-width: 48em) {
    main {
      padding-top: 2rem; } }

.img-responsive {
  display: inline-block;
  max-width: 100%;
  height: auto; }

.o-container {
  padding-left: 0.9375rem;
  padding-right: 0.9375rem;
  margin-right: auto;
  margin-left: auto; }
  .o-container:before {
    content: "";
    display: table; }
  .o-container:after {
    content: "";
    display: table;
    clear: both; }
  @media all and (min-width: 48em) {
    .o-container {
      width: 750px; } }
  @media all and (min-width: 62em) {
    .o-container {
      width: 970px; } }
  @media all and (min-width: 75em) {
    .o-container {
      width: 1170px; } }

.o-container--fluid {
  padding-right: 0.9375rem;
  padding-left: 0.9375rem; }
  .o-container--fluid:before {
    content: "";
    display: table; }
  .o-container--fluid:after {
    content: "";
    display: table;
    clear: both; }

.o-row:before {
  content: "";
  display: table; }

.o-row:after {
  content: "";
  display: table;
  clear: both; }

@media all and (min-width: 48em) {
  .o-row {
    margin-left: -0.9375rem;
    margin-right: -0.9375rem; } }

.o-col--1 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--1 {
      width: 7.32601%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--1:last-child {
      width: 7.32601%;
      float: right;
      margin-right: 0; } }

.o-col--2 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--2 {
      width: 15.75092%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--2:last-child {
      width: 15.75092%;
      float: right;
      margin-right: 0; } }

.o-col--3 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--3 {
      width: 24.17582%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--3:last-child {
      width: 24.17582%;
      float: right;
      margin-right: 0; } }
  @media all and (min-width: 48em) {
    .o-col--3:nth-child(4n) {
      width: 24.17582%;
      float: right;
      margin-right: 0; } }

.o-col--4 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--4 {
      width: 32.60073%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--4:last-child {
      width: 32.60073%;
      float: right;
      margin-right: 0; } }

.o-col--5 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--5 {
      width: 41.02564%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--5:last-child {
      width: 41.02564%;
      float: right;
      margin-right: 0; } }

.o-col--6 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--6 {
      width: 49.45055%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--6:last-child {
      width: 49.45055%;
      float: right;
      margin-right: 0; } }

.o-col--7 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--7 {
      width: 57.87546%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--7:last-child {
      width: 57.87546%;
      float: right;
      margin-right: 0; } }

.o-col--8 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--8 {
      width: 66.30037%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--8:last-child {
      width: 66.30037%;
      float: right;
      margin-right: 0; } }

.o-col--9 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--9 {
      width: 74.72527%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--9:last-child {
      width: 74.72527%;
      float: right;
      margin-right: 0; } }

.o-col--10 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--10 {
      width: 83.15018%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--10:last-child {
      width: 83.15018%;
      float: right;
      margin-right: 0; } }

.o-col--11 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--11 {
      width: 91.57509%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--11:last-child {
      width: 91.57509%;
      float: right;
      margin-right: 0; } }

.o-col--1__sm {
  width: 7.32601%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--1__sm:last-child {
    width: 7.32601%;
    float: right;
    margin-right: 0; }

.o-col--2__sm {
  width: 15.75092%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--2__sm:last-child {
    width: 15.75092%;
    float: right;
    margin-right: 0; }

.o-col--3__sm {
  width: 24.17582%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--3__sm:last-child {
    width: 24.17582%;
    float: right;
    margin-right: 0; }

.o-col--4__sm {
  width: 32.60073%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--4__sm:last-child {
    width: 32.60073%;
    float: right;
    margin-right: 0; }

.o-col--5__sm {
  width: 41.02564%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--5__sm:last-child {
    width: 41.02564%;
    float: right;
    margin-right: 0; }

.o-col--6__sm {
  width: 49.45055%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--6__sm:last-child {
    width: 49.45055%;
    float: right;
    margin-right: 0; }

.o-col--7__sm {
  width: 57.87546%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--7__sm:last-child {
    width: 57.87546%;
    float: right;
    margin-right: 0; }

.o-col--8__sm {
  width: 66.30037%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--8__sm:last-child {
    width: 66.30037%;
    float: right;
    margin-right: 0; }

.o-col--9__sm {
  width: 74.72527%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--9__sm:last-child {
    width: 74.72527%;
    float: right;
    margin-right: 0; }

.o-col--10__sm {
  width: 83.15018%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--10__sm:last-child {
    width: 83.15018%;
    float: right;
    margin-right: 0; }

.o-col--11__sm {
  width: 91.57509%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--11__sm:last-child {
    width: 91.57509%;
    float: right;
    margin-right: 0; }

.o-col--12 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }

.o-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-flow: row wrap;
      -ms-flex-flow: row wrap;
          flex-flow: row wrap; }
  .o-flex > [class^="o-col--"] {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -webkit-flex-flow: column;
        -ms-flex-flow: column;
            flex-flow: column; }

.o-form--group {
  margin-bottom: 1.5rem; }
  @media all and (min-width: 48em) {
    .o-form--group {
      margin-bottom: 3rem; } }

.o-field--group:before {
  content: "";
  display: table; }

.o-field--group:after {
  content: "";
  display: table;
  clear: both; }

.o-header {
  margin-top: 0.65rem;
  font-weight: normal;
  color: #333333; }

.o-divider {
  text-align: center;
  position: relative;
  font-size: 0.75rem;
  color: #afa7a5; }
  .o-divider:before {
    position: absolute;
    top: 50%;
    -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
            transform: translateY(-50%);
    content: "";
    width: 100%;
    height: 2px;
    left: 0;
    background-color: #eaebec;
    z-index: -1; }

.o-divider--txt {
  background-color: white;
  padding: 0.3125rem 0.625rem;
  display: inline-block; }

.o-form-checkbox {
  margin-bottom: 2rem;
  margin-top: 1rem; }

.u-clearfix:before {
  content: "";
  display: table; }

.u-clearfix:after {
  content: "";
  display: table;
  clear: both; }

.u-relative {
  position: relative; }

.u-mbn {
  margin-bottom: 0; }

.u-text--left {
  text-align: left; }

.u-text--right {
  text-align: right; }

.u-float--left {
  float: left; }

.u-float--right {
  float: right; }

.u-text--white {
  color: white; }

.u-lowercase {
  text-transform: lowercase; }

.u-uppercase {
  text-transform: uppercase; }

.u-flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center; }

header:before {
  content: "";
  display: table; }

header:after {
  content: "";
  display: table;
  clear: both; }

.c-logo {
  max-width: 165px; }

.c-logo--img {
  background: url("//via.placeholder.com/165x40?text=LOGO+BOOSTED") 0 0 no-repeat;
  text-indent: -9999px;
  background-size: 100%;
  height: 0;
  padding-bottom: 24.24242%;
  display: block; }

.c-breadcrumb--list {
  list-style: none;
  padding-left: 0; }
  .c-breadcrumb--list:before {
    content: "";
    display: table; }
  .c-breadcrumb--list:after {
    content: "";
    display: table;
    clear: both; }
  .c-breadcrumb--list li {
    font-size: 0.625rem;
    float: left; }
    @media all and (min-width: 768px) {
      .c-breadcrumb--list li {
        font-size: 0.6875rem; } }
    .c-breadcrumb--list li:not(:first-child):before {
      content: ">";
      margin: 0 0.625rem; }

.c-payment--list {
  list-style: none;
  padding-left: 0; }
  .c-payment--list:before {
    content: "";
    display: table; }
  .c-payment--list:after {
    content: "";
    display: table;
    clear: both; }
  .c-payment--list li {
    float: left; }
    .c-payment--list li:not(:first-child) {
      margin-left: 0.3125rem; }

.c-cart--details {
  position: relative;
  padding-left: 2rem;
  padding-right: 1rem; }
  .c-cart--details:before {
    content: "";
    background-color: #F2F2F2;
    position: absolute;
    top: -2rem;
    left: 0;
    height: 100%;
    width: 500%;
    border-left: 1px solid #c2c5c8;
    z-index: -1; }

.c-cart--list {
  list-style: none;
  padding-left: 0;
  padding-bottom: 1rem;
  border-bottom: 1px solid #cfd2d4; }
  .c-cart--list li {
    position: relative;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex; }
    .c-cart--list li:before {
      content: "";
      display: table; }
    .c-cart--list li:after {
      content: "";
      display: table;
      clear: both; }
    .c-cart--list li:not(:first-child) {
      margin-top: 1rem; }

.c-cart--product {
  width: 60px;
  height: 60px;
  -webkit-border-radius: 6px;
          border-radius: 6px;
  border: 1px solid #eaebec;
  position: relative;
  float: left;
  margin-right: 1rem; }
  @media all and (min-width: 48em) {
    .c-cart--product {
      margin-right: 2rem; } }

.c-cart--product__img {
  -webkit-border-radius: 6px;
          border-radius: 6px;
  position: relative;
  overflow: hidden; }

.c-cart--product__quantity {
  background-color: #cfd2d4;
  color: white;
  position: absolute;
  right: -10px;
  top: -10px;
  font-size: 0.75rem;
  padding: 0.3125rem 0.5625rem;
  -webkit-border-radius: 50%;
          border-radius: 50%; }

.c-cart--product__details {
  font-weight: bold;
  font-size: 0.875rem;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-flex: 1;
  -webkit-flex: 1;
      -ms-flex: 1;
          flex: 1; }
  .c-cart--product__details:before {
    content: "";
    display: table; }
  .c-cart--product__details:after {
    content: "";
    display: table;
    clear: both; }
  .c-cart--product__details > div {
    -webkit-box-flex: 2;
    -webkit-flex: 2;
        -ms-flex: 2;
            flex: 2; }
    .c-cart--product__details > div.c-cart--product__price {
      -webkit-box-flex: 1;
      -webkit-flex: 1;
          -ms-flex: 1;
              flex: 1; }

.c-cart--product__desc {
  color: #b4b8bc;
  font-size: 0.75rem;
  font-weight: normal; }

.c-cart--product__price {
  text-align: center; }
  .c-cart--product__price strike {
    display: block;
    color: #b4b8bc;
    font-size: 0.75rem; }

.c-cart--notice {
  -webkit-border-radius: 6px;
          border-radius: 6px;
  background-color: white;
  padding: 1rem;
  font-size: 0.75rem; }
  @media all and (min-width: 48em) {
    .c-cart--notice {
      padding: 0.625rem;
      font-size: 0.875rem; } }
  .c-cart--notice ul {
    margin-left: 1.25rem; }
    .c-cart--notice ul > li {
      margin-bottom: 0.625rem; }

footer {
  font-size: 0.6875rem; }
  @media all and (min-width: 768px) {
    footer {
      font-size: 0.75rem; } }
  footer ul {
    list-style: none;
    padding-left: 0; }
    footer ul li {
      display: inline-block; }
      footer ul li:not(:first-child) {
        margin-left: 1rem; }
        @media all and (min-width: 48em) {
          footer ul li:not(:first-child) {
            margin-left: 2rem; } }

.c-form--return {
  display: block;
  font-size: 0.875rem;
  float: left; }

.c-form--next {
  float: none; }
  @media all and (min-width: 48em) {
    .c-form--next {
      float: right; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbm9ybWFsaXplLnNjc3MiLCJfc2V0dGluZ3Muc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3MvX3N1c3kuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9fc3VzeS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L19zdS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L3N1L191dGlsaXRpZXMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9zdS9fc2V0dGluZ3Muc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9zdS9fdmFsaWRhdGlvbi5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L3N1L19ncmlkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L19mbG9hdC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9fc2hhcmVkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L19zdXBwb3J0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3N1cHBvcnQvX3N1cHBvcnQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fcHJlZml4LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3N1cHBvcnQvX2JhY2tncm91bmQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fYm94LXNpemluZy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9zdXBwb3J0L19yZW0uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fY2xlYXJmaXguc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc2hhcmVkL19pbnNwZWN0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fb3V0cHV0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fZGlyZWN0aW9uLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fYmFja2dyb3VuZC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9zaGFyZWQvX2NvbnRhaW5lci5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9zaGFyZWQvX21hcmdpbnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc2hhcmVkL19wYWRkaW5nLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L2Zsb2F0L19jb250YWluZXIuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvZmxvYXQvX3NwYW4uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvZmxvYXQvX2VuZC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9mbG9hdC9faXNvbGF0ZS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX3NldHRpbmdzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fdmFsaWRhdGlvbi5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2dyaWRzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fYm94LXNpemluZy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2NvbnRleHQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19iYWNrZ3JvdW5kLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fY29udGFpbmVyLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fc3Bhbi5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2d1dHRlcnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19pc29sYXRlLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fZ2FsbGVyeS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX3Jvd3Muc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19tYXJnaW5zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fcGFkZGluZy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2JsZWVkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fYnJlYWtwb2ludC1wbHVnaW4uc2NzcyIsImxpYi9fbWFwcHktYnJlYWtwb2ludHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvX3R5cGkuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvX3ByaXZhdGUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9iYXNlbGluZS9fYmFzZWxpbmUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9icmVha3BvaW50cy9fYnJlYWtwb2ludHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9icmVha3BvaW50cy9fdXRpbHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9jYWxjL19jYWxjLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHlwaS9zY3NzL3ByaXZhdGUvY2FsYy9fY2FsYy1mb250LXNpemUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9jYWxjL19jYWxjLW1zLXNpemUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS90eXBlZmFjZXMvX3R5cGVmYWNlcy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wcml2YXRlL3R5cGVmYWNlcy9fbXVsdGlwbGllci5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wcml2YXRlL3V0aWxzL191dGlscy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wcml2YXRlL3V0aWxzL19jb252ZXJ0ZXJzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHlwaS9zY3NzL3ByaXZhdGUvdXRpbHMvX2Jhc2VzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHlwaS9zY3NzL3ByaXZhdGUvdXRpbHMvX21hcHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS91dGlscy9fbGlzdHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS91dGlscy9fZXh0ZW5kZXIuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS93cml0ZS9fd3JpdGUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvX3B1YmxpYy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wdWJsaWMvcmh5dGhtL19yaHl0aG0uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHVibGljL3JoeXRobS9fYmFzZWxpbmUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHVibGljL3R5cGkvX3R5cGkuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHVibGljL3R5cGkvX2luaXQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHVibGljL3R5cGkvX2NyZWF0ZS1jbGFzcy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wdWJsaWMvdHlwZWZhY2VzL190eXBlZmFjZXMuc2NzcyIsIl90b29scy5zY3NzIiwiX2Jhc2Uuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zYXNzeS1pbnB1dHMvc2Fzcy9tYWluLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2Fzc3ktaW5wdXRzL3Nhc3MvaGVscGVycy9fcHgtdG8tcmVtLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2Fzc3ktaW5wdXRzL3Nhc3MvaGVscGVycy9fYXBwZWFyYW5jZS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3N5LWlucHV0cy9zYXNzL2lucHV0cy9fdGV4dC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3N5LWlucHV0cy9zYXNzL2lucHV0cy9fYnV0dG9uLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc2Fzc3ktaW5wdXRzL3Nhc3MvaW5wdXRzL19yYWRpby5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3N5LWlucHV0cy9zYXNzL2lucHV0cy9fY2hlY2tib3guc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zYXNzeS1pbnB1dHMvc2Fzcy9pbnB1dHMvX3NlbGVjdC5zY3NzIiwiX29iamVjdHMuc2NzcyIsIl91dGlsaXRpZXMuc2NzcyIsIl9jb21wb25lbnRzLmhlYWRlci5zY3NzIiwiX2NvbXBvbmVudHMuY2FydC5zY3NzIiwiX2NvbXBvbmVudHMuZm9vdGVyLnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3R5bGVzIGZyYWdtZW50IGltcG9ydCBnbyBoZXJlXHJcbkBpbXBvcnQgXCJub3JtYWxpemVcIjtcclxuQGltcG9ydCBcInNldHRpbmdzXCI7XHJcbkBpbXBvcnQgXCJ0b29sc1wiO1xyXG5AaW1wb3J0IFwiYmFzZVwiO1xyXG5AaW1wb3J0IFwib2JqZWN0c1wiO1xyXG5AaW1wb3J0IFwidXRpbGl0aWVzXCI7XHJcblxyXG5AaW1wb3J0IFwiY29tcG9uZW50cy5oZWFkZXJcIjtcclxuQGltcG9ydCBcImNvbXBvbmVudHMuY2FydFwiO1xyXG5AaW1wb3J0IFwiY29tcG9uZW50cy5mb290ZXJcIjtcclxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09XHJcbi8vIG5vcm1hbGl6ZS5jc3MgdjcuMC4wXHJcbi8vIFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT1cclxuLyohIG5vcm1hbGl6ZS5jc3MgdjcuMC4wIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL1xyXG5cclxuLyogRG9jdW1lbnRcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW5cclxuICogICAgSUUgb24gV2luZG93cyBQaG9uZSBhbmQgaW4gaU9TLlxyXG4gKi9cclxuXHJcbmh0bWwge1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xyXG4gIC8qIDEgKi9cclxuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcclxuICAvKiAyICovXHJcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xyXG4gIC8qIDIgKi9cclxufVxyXG5cclxuLyogU2VjdGlvbnNcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cclxuICovXHJcblxyXG5ib2R5IHtcclxuICBtYXJnaW46IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cclxuICovXHJcblxyXG5hcnRpY2xlLCBhc2lkZSwgZm9vdGVyLCBoZWFkZXIsIG5hdiwgc2VjdGlvbiB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXHJcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXHJcbiAqL1xyXG5cclxuaDEge1xyXG4gIGZvbnQtc2l6ZTogMmVtO1xyXG4gIG1hcmdpbjogMC42N2VtIDA7XHJcbn1cclxuXHJcbi8qIEdyb3VwaW5nIGNvbnRlbnRcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cclxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXHJcbiAqL1xyXG5cclxuZmlnY2FwdGlvbiwgZmlndXJlLCBtYWluIHtcclxuICAvKiAxICovXHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgbWFyZ2luIGluIElFIDguXHJcbiAqL1xyXG5cclxuZmlndXJlIHtcclxuICBtYXJnaW46IDFlbSA0MHB4O1xyXG59XHJcblxyXG4vKipcclxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gRmlyZWZveC5cclxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXHJcbiAqL1xyXG5cclxuaHIge1xyXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xyXG4gIC8qIDEgKi9cclxuICBoZWlnaHQ6IDA7XHJcbiAgLyogMSAqL1xyXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xyXG4gIC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cclxuICovXHJcblxyXG5wcmUge1xyXG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcclxuICAvKiAxICovXHJcbiAgZm9udC1zaXplOiAxZW07XHJcbiAgLyogMiAqL1xyXG59XHJcblxyXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLyoqXHJcbiAqIDEuIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cclxuICogMi4gUmVtb3ZlIGdhcHMgaW4gbGlua3MgdW5kZXJsaW5lIGluIGlPUyA4KyBhbmQgU2FmYXJpIDgrLlxyXG4gKi9cclxuXHJcbmEge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gIC8qIDEgKi9cclxuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwOiBvYmplY3RzO1xyXG4gIC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctIGFuZCBGaXJlZm94IDM5LS5cclxuICogMi4gQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIElFLCBPcGVyYSwgYW5kIFNhZmFyaS5cclxuICovXHJcblxyXG5hYmJyW3RpdGxlXSB7XHJcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcclxuICAvKiAxICovXHJcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XHJcbiAgLyogMiAqL1xyXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcclxuICAvKiAyICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQcmV2ZW50IHRoZSBkdXBsaWNhdGUgYXBwbGljYXRpb24gb2YgYGJvbGRlcmAgYnkgdGhlIG5leHQgcnVsZSBpbiBTYWZhcmkgNi5cclxuICovXHJcblxyXG5iLCBzdHJvbmcge1xyXG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cclxuICovXHJcblxyXG5iLCBzdHJvbmcge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xyXG5cclxuY29kZSwga2JkLCBzYW1wIHtcclxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XHJcbiAgLyogMSAqL1xyXG4gIGZvbnQtc2l6ZTogMWVtO1xyXG4gIC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHN0eWxlIGluIEFuZHJvaWQgNC4zLS5cclxuICovXHJcblxyXG5kZm4ge1xyXG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBiYWNrZ3JvdW5kIGFuZCBjb2xvciBpbiBJRSA5LS5cclxuICovXHJcblxyXG5tYXJrIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xyXG4gIGNvbG9yOiAjMDAwO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xyXG5cclxuc21hbGwge1xyXG4gIGZvbnQtc2l6ZTogODAlO1xyXG59XHJcblxyXG4vKipcclxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXHJcbiAqIGFsbCBicm93c2Vycy5cclxuICovXHJcblxyXG5zdWIsIHN1cCB7XHJcbiAgZm9udC1zaXplOiA3NSU7XHJcbiAgbGluZS1oZWlnaHQ6IDA7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcclxufVxyXG5cclxuc3ViIHtcclxuICBib3R0b206IC0wLjI1ZW07XHJcbn1cclxuXHJcbnN1cCB7XHJcbiAgdG9wOiAtMC41ZW07XHJcbn1cclxuXHJcbi8qIEVtYmVkZGVkIGNvbnRlbnRcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cclxuICovXHJcblxyXG5hdWRpbywgdmlkZW8ge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGlPUyA0LTcuXHJcbiAqL1xyXG5cclxuYXVkaW86bm90KFtjb250cm9sc10pIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG4gIGhlaWdodDogMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgYm9yZGVyIG9uIGltYWdlcyBpbnNpZGUgbGlua3MgaW4gSUUgMTAtLlxyXG4gKi9cclxuXHJcbmltZyB7XHJcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xyXG59XHJcblxyXG4vKipcclxuICogSGlkZSB0aGUgb3ZlcmZsb3cgaW4gSUUuXHJcbiAqL1xyXG5cclxuc3ZnOm5vdCg6cm9vdCkge1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbi8qIEZvcm1zXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cclxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxyXG4gKi9cclxuXHJcbmJ1dHRvbiwgaW5wdXQsIG9wdGdyb3VwLCBzZWxlY3QsIHRleHRhcmVhIHtcclxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcclxuICAvKiAxICovXHJcbiAgZm9udC1zaXplOiAxMDAlO1xyXG4gIC8qIDEgKi9cclxuICBsaW5lLWhlaWdodDogMS4xNTtcclxuICAvKiAxICovXHJcbiAgbWFyZ2luOiAwO1xyXG4gIC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxyXG4gKiAxLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlLlxyXG4gKi9cclxuXHJcbmJ1dHRvbiwgaW5wdXQge1xyXG4gIC8qIDEgKi9cclxuICBvdmVyZmxvdzogdmlzaWJsZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxyXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXHJcbiAqL1xyXG5cclxuYnV0dG9uLCBzZWxlY3Qge1xyXG4gIC8qIDEgKi9cclxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIFByZXZlbnQgYSBXZWJLaXQgYnVnIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYCBhbmQgYHZpZGVvYFxyXG4gKiAgICBjb250cm9scyBpbiBBbmRyb2lkIDQuXHJcbiAqIDIuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXHJcbiAqL1xyXG5cclxuYnV0dG9uLCBodG1sIFt0eXBlPVwiYnV0dG9uXCJdLCBbdHlwZT1cInJlc2V0XCJdLCBbdHlwZT1cInN1Ym1pdFwiXSB7XHJcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XHJcbiAgLyogMiAqL1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cclxuICovXHJcblxyXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsIFt0eXBlPVwiYnV0dG9uXCJdOjotbW96LWZvY3VzLWlubmVyLCBbdHlwZT1cInJlc2V0XCJdOjotbW96LWZvY3VzLWlubmVyLCBbdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XHJcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xyXG4gIHBhZGRpbmc6IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXHJcbiAqL1xyXG5cclxuYnV0dG9uOi1tb3otZm9jdXNyaW5nLCBbdHlwZT1cImJ1dHRvblwiXTotbW96LWZvY3VzcmluZywgW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZywgW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xyXG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cclxuICovXHJcblxyXG5maWVsZHNldCB7XHJcbiAgcGFkZGluZzogMC4zNWVtIDAuNzVlbSAwLjYyNWVtO1xyXG59XHJcblxyXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cclxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxyXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XHJcbiAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cclxuXHJcbmxlZ2VuZCB7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAvKiAxICovXHJcbiAgY29sb3I6IGluaGVyaXQ7XHJcbiAgLyogMiAqL1xyXG4gIGRpc3BsYXk6IHRhYmxlO1xyXG4gIC8qIDEgKi9cclxuICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgLyogMSAqL1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgLyogMyAqL1xyXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XHJcbiAgLyogMSAqL1xyXG59XHJcblxyXG4vKipcclxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXHJcbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXHJcbiAqL1xyXG5cclxucHJvZ3Jlc3Mge1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAvKiAxICovXHJcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xyXG4gIC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUuXHJcbiAqL1xyXG5cclxudGV4dGFyZWEge1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG59XHJcblxyXG4vKipcclxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAtLlxyXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAtLlxyXG4gKi9cclxuXHJcblt0eXBlPVwiY2hlY2tib3hcIl0sIFt0eXBlPVwicmFkaW9cIl0ge1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgLyogMSAqL1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgLyogMiAqL1xyXG59XHJcblxyXG4vKipcclxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxyXG4gKi9cclxuXHJcblt0eXBlPVwibnVtYmVyXCJdIHtcclxuICAmOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLCAmOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcclxuICAgIGhlaWdodDogYXV0bztcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cclxuICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXHJcbiAqL1xyXG5cclxuW3R5cGU9XCJzZWFyY2hcIl0ge1xyXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xyXG4gIC8qIDEgKi9cclxuICBvdXRsaW5lLW9mZnNldDogLTJweDtcclxuICAvKiAyICovXHJcbiAgJjo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbiwgJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XHJcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGFuZCBjYW5jZWwgYnV0dG9ucyBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBtYWNPUy5cclxuICovXHJcblxyXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cclxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxyXG4gKi9cclxuXHJcbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xyXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xyXG4gIC8qIDEgKi9cclxuICBmb250OiBpbmhlcml0O1xyXG4gIC8qIDIgKi9cclxufVxyXG5cclxuLyogSW50ZXJhY3RpdmVcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxyXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSwgYW5kIEZpcmVmb3guXHJcbiAqL1xyXG5cclxuZGV0YWlscywgbWVudSB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi8qXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cclxuICovXHJcblxyXG5zdW1tYXJ5IHtcclxuICBkaXNwbGF5OiBsaXN0LWl0ZW07XHJcbn1cclxuXHJcbi8qIFNjcmlwdGluZ1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxyXG4gKi9cclxuXHJcbmNhbnZhcyB7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXHJcbiAqL1xyXG5cclxudGVtcGxhdGUsIFtoaWRkZW5dIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG59XHJcblxyXG4vKiBIaWRkZW5cclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC0uXHJcbiAqLyIsIi8vID09PT09PT09PT1cclxuLy8gU2V0dGluZ3NcclxuLy8gPT09PT09PT09PVxyXG5cclxuLy8gR3JpZHNcclxuQGltcG9ydCBcIi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5XCI7XHJcbiRzdXN5OiAoXHJcbiAgZ2xvYmFsLWJveC1zaXppbmc6IGJvcmRlci1ib3gsXHJcbik7XHJcblxyXG4kZ3JpZC0xMjogKFxyXG4gIGd1dHRlcnM6IDAuMTUsXHJcbiAgY29sdW1uczogMTJcclxuKTtcclxuXHJcbi8vIFZhbHVlc1xyXG4kbmF2LWhlaWdodDogNjNweDtcclxuJGZ1bGwtaGVpZ2h0OiAxMDB2aDtcclxuXHJcbi8vIENvbG91cnNcclxuJGxpZ2h0LWdyZXk6ICNGMkYyRjI7XHJcbiRncmV5OiAjZWFlYmVjO1xyXG4kZGFyay1ncmV5OiAjNzM3Mjc4O1xyXG5cclxuJGJsdWU6ICM4OGQ0ZGQ7XHJcbiRkYXJrLWJsdWU6ICM3NGQzZGU7XHJcblxyXG4kb3JhbmdlOiAjZmYzYTAwO1xyXG5cclxuJGJsYWNrLWFscGhhMTogcmdiYShibGFjaywgMC4xKTtcclxuJGJsYWNrLWFscGhhMzogcmdiYShibGFjaywgMC4zKTtcclxuJGJsYWNrLWFscGhhNTogcmdiYShibGFjaywgMC41KTtcclxuJHdoaXRlLWFscGhhNDogcmdiYSh3aGl0ZSwgMC40KTtcclxuJHdoaXRlLWFscGhhOTogcmdiYSh3aGl0ZSwgMC45KTtcclxuXHJcbi8vIEZvbnRzXHJcbiRzYW5zLXNlcmlmOiBcIkNlbnR1cnkgR290aGljXCIsIENlbnR1cnlHb3RoaWMsIEFwcGxlR290aGljLCBzYW5zLXNlcmlmO1xyXG4kc2VyaWY6IEJhc2tlcnZpbGxlLCBcIkJhc2tlcnZpbGxlIE9sZCBGYWNlXCIsIFwiSG9lZmxlciBUZXh0XCIsIEdhcmFtb25kLCBcIlRpbWVzIE5ldyBSb21hblwiLCBzZXJpZjtcclxuXHJcbi8vIFotaW5kZXhcclxuJGxheWVyczogKFxyXG4gIGdlbmVyaWMsXHJcbiAgY29udGFpbmVyLFxyXG4gIGNhbnZhcyxcclxuICBoZWFkZXIsXHJcbiAgZm9vdGVyLFxyXG4gIG5hdi10b29nbGUsXHJcbiAgbmF2LWxpc3RzLFxyXG4pO1xyXG5cclxuLy8gQnJlYWtwb2ludHNcclxuQGltcG9ydCAnbGliL21hcHB5LWJyZWFrcG9pbnRzJztcclxuJGJyZWFrcG9pbnRzOiAoXHJcbiAgeHhzOiAgICAgICAgICAgIDM2MHB4LFxyXG4gIHhzbWFsbDogICAgICAgICA0ODBweCxcclxuICBzbWFsbDogICAgICAgICAgNTkwcHgsXHJcbiAgbWVkaXVtOiAgICAgICAgIDY0MHB4LFxyXG4gIGxhcmdlOiAgICAgICAgICA3NjhweCxcclxuICB4bGFyZ2U6ICAgICAgICAgOTkycHgsXHJcbiAgeHhsOiAgICAgICAgICAgIDEyMDBweCxcclxuICB4eHhsOiAgICAgICAgICAgMTQ0MHB4LFxyXG4gIG1heDogICAgICAgICAgICAxNjAwcHgsXHJcbiAgaXBhZExhbmRzY2FwZTogIDEwMjRweCxcclxuICBpcGFkUG9ydHJhaXQ6ICAgNzY4cHgsXHJcbik7XHJcblxyXG4vLyBTZXQgbWFwcyBmb3IgdHlwb2dyYXBoeSByZXNwb25zaXZlIHNpemluZ1xyXG5AaW1wb3J0IFwiLi9ub2RlX21vZHVsZXMvdHlwaS9zY3NzL3R5cGlcIjtcclxuJHR5cGk6IChcclxuICBiYXNlOiAoXHJcbiAgICBudWxsOiAoMTZweCwgMS40KVxyXG4gICksXHJcbiAgaDEtbWFwOiAoXHJcbiAgICBudWxsOiAoMmVtLCAxLjIpLFxyXG4gICAgbGFyZ2U6ICgyLjEyNWVtLCAxLjIpXHJcbiAgKSxcclxuICBoMi1tYXA6IChcclxuICAgIG51bGw6ICgxLjcyNWVtLCAxLjIpLFxyXG4gICAgbGFyZ2U6ICgyZW0sIDEuMilcclxuICApLFxyXG4gIGgzLW1hcDogKFxyXG4gICAgbnVsbDogKDEuMjVlbSwgMS4yKSxcclxuICAgIGxhcmdlOiAoMS41ZW0sIDEuMilcclxuICApLFxyXG4gIGg0LW1hcDogKFxyXG4gICAgbnVsbDogKDEuMTI1ZW0sIDEuMiksXHJcbiAgICBsYXJnZTogKDEuMjVlbSwgMS4yKVxyXG4gICksXHJcbiAgaDUtbWFwOiAoXHJcbiAgICBudWxsOiAoMWVtLCAxLjIpLFxyXG4gICAgbGFyZ2U6ICgxLjEyNWVtLCAxLjIpXHJcbiAgKSxcclxuICBoNi1tYXA6IChcclxuICAgIG51bGw6IDFlbSxcclxuICAgIGxhcmdlOiAxLjEyNWVtXHJcbiAgKSxcclxuICBicmVhZGNydW1iLW1hcDogKFxyXG4gICAgbnVsbDogMC42MjVlbSxcclxuICAgIGxhcmdlOiAwLjY4NzVlbVxyXG4gICksXHJcbiAgcGFyYWdyYXBoLW1hcDogKFxyXG4gICAgbnVsbDogMWVtLFxyXG4gICAgbGFyZ2U6IDEuMzc1ZW1cclxuICApLFxyXG4gIHNtYWxsLW1hcDogKFxyXG4gICAgbnVsbDogMC43NWVtXHJcbiAgKSxcclxuICBzdXAtbWFwOiAoXHJcbiAgICBudWxsOiAwLjg3NWVtXHJcbiAgKSxcclxuICBmb290ZXItbWFwOiAoXHJcbiAgICBudWxsOiAwLjY4NzVlbSxcclxuICAgIGxhcmdlOiAwLjc1ZW1cclxuICApXHJcbik7XHJcblxyXG4vLyBNaXNjIHZhcmlhYmxlc1xyXG4kYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcclxuJGNvcm5lci1yYWRpdXM6IDJyZW07XHJcbiRjb3JuZXItcmFkaXVzLXNtYWxsOiAxcmVtOyIsIi8vIFN1c3lcbi8vID09PT1cblxuQGltcG9ydCAnc3VzeS9sYW5ndWFnZS9zdXN5JztcbiIsIi8vIFN1c3kgTmV4dCBTeW50YXhcbi8vID09PT09PT09PT09PT09PT1cblxuJHN1c3ktdmVyc2lvbjogMi4xO1xuXG5AaW1wb3J0IFwiLi4vc3VcIjtcbkBpbXBvcnQgXCIuLi9vdXRwdXQvZmxvYXRcIjtcblxuQGltcG9ydCBcInN1c3kvc2V0dGluZ3NcIjtcbkBpbXBvcnQgXCJzdXN5L3ZhbGlkYXRpb25cIjtcbkBpbXBvcnQgXCJzdXN5L2dyaWRzXCI7XG5AaW1wb3J0IFwic3VzeS9ib3gtc2l6aW5nXCI7XG5AaW1wb3J0IFwic3VzeS9jb250ZXh0XCI7XG5AaW1wb3J0IFwic3VzeS9iYWNrZ3JvdW5kXCI7XG5AaW1wb3J0IFwic3VzeS9jb250YWluZXJcIjtcbkBpbXBvcnQgXCJzdXN5L3NwYW5cIjtcbkBpbXBvcnQgXCJzdXN5L2d1dHRlcnNcIjtcbkBpbXBvcnQgXCJzdXN5L2lzb2xhdGVcIjtcbkBpbXBvcnQgXCJzdXN5L2dhbGxlcnlcIjtcbkBpbXBvcnQgXCJzdXN5L3Jvd3NcIjtcbkBpbXBvcnQgXCJzdXN5L21hcmdpbnNcIjtcbkBpbXBvcnQgXCJzdXN5L3BhZGRpbmdcIjtcbkBpbXBvcnQgXCJzdXN5L2JsZWVkXCI7XG5AaW1wb3J0IFwic3VzeS9icmVha3BvaW50LXBsdWdpblwiO1xuIiwiLy8gU3Vcbi8vID09XG5cbkBpbXBvcnQgXCJzdS91dGlsaXRpZXNcIjtcbkBpbXBvcnQgXCJzdS9zZXR0aW5nc1wiO1xuQGltcG9ydCBcInN1L3ZhbGlkYXRpb25cIjtcbkBpbXBvcnQgXCJzdS9ncmlkXCI7XG4iLCIvLyBNYXAgRnVuY3Rpb25zXG4vLyA9PT09PT09PT09PT09XG5cblxuLy8gVHJ1bmNhdGUgTGlzdFxuLy8gLS0tLS0tLS0tLS0tLVxuLy8gLSBSZXR1cm4gYSBsaXN0LCB0cnVuY2F0ZWQgdG8gYSBnaXZlbiBsZW5ndGhcbkBmdW5jdGlvbiBfc3VzeS10cnVuY2F0ZS1saXN0KFxuICAkbGlzdCxcbiAgJGxlbmd0aFxuKSB7XG4gICRfcmV0dXJuOiAoKTtcblxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkbGlzdCkge1xuICAgICRfcmV0dXJuOiBpZigkaSA8PSAkbGVuZ3RoLCBhcHBlbmQoJF9yZXR1cm4sIG50aCgkbGlzdCwgJGkpKSwgJF9yZXR1cm4pO1xuICB9XG5cbiAgQHJldHVybiAkX3JldHVybjtcbn1cblxuXG4vLyBEZWVwIEdldFxuLy8gLS0tLS0tLS1cbi8vIC0gUmV0dXJuIGEgdmFsdWUgZGVlcCBpbiBuZXN0ZWQgbWFwc1xuQGZ1bmN0aW9uIF9zdXN5LWRlZXAtZ2V0KFxuICAkbWFwLFxuICAka2V5cy4uLlxuKSB7XG4gICRfcmV0dXJuOiAkbWFwO1xuXG4gIEBlYWNoICRrZXkgaW4gJGtleXMge1xuICAgIEBpZiB0eXBlLW9mKCRfcmV0dXJuKSA9PSBtYXAge1xuICAgICAgJF9yZXR1cm46IG1hcC1nZXQoJF9yZXR1cm4sICRrZXkpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cblxuLy8gRGVlcCBTZXRcbi8vIC0tLS0tLS0tXG4vLyAtIFNldCBhIHZhbHVlIGRlZXAgaW4gbmVzdGVkIG1hcHNcbkBmdW5jdGlvbiBfc3VzeS1kZWVwLXNldChcbiAgJG1hcCxcbiAgJGtleXMtdmFsdWUuLi5cbikge1xuICAkX3ZhbHVlOiBudGgoJGtleXMtdmFsdWUsIC0xKTtcbiAgJF9rZXlzOiBfc3VzeS10cnVuY2F0ZS1saXN0KCRrZXlzLXZhbHVlLCBsZW5ndGgoJGtleXMtdmFsdWUpIC0gMSk7XG4gICRfbGVuZ3RoOiBsZW5ndGgoJF9rZXlzKTtcbiAgJF9yZXR1cm46ICgpO1xuXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJF9sZW5ndGgge1xuICAgICRfbjogMCAtICRpO1xuICAgICRfbGV2ZWw6IF9zdXN5LXRydW5jYXRlLWxpc3QoJF9rZXlzLCAkX2xlbmd0aCArICRfbik7XG4gICAgJF9sZXZlbDogX3N1c3ktZGVlcC1nZXQoJG1hcCwgJF9sZXZlbC4uLik7XG4gICAgJF9tZXJnZTogbnRoKCRfa2V5cywgJF9uKTtcbiAgICAkX21lcmdlOiAoJF9tZXJnZTogJF92YWx1ZSk7XG4gICAgJF9yZXR1cm46IGlmKCRfbGV2ZWwsIG1hcC1tZXJnZSgkX2xldmVsLCAkX21lcmdlKSwgJF9tZXJnZSk7XG4gICAgJF92YWx1ZTogJF9yZXR1cm47XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuXG5cbi8vIERlZXAgTWVyZ2Vcbi8vIC0tLS0tLS0tLS1cbi8vIFJldHVybiAyIG9iamVjdHMgb2YgYW55IGRlcHRoLCBtZXJnZWRcbkBmdW5jdGlvbiBfc3VzeS1kZWVwLW1lcmdlKFxuICAkbWFwMSxcbiAgJG1hcDJcbikge1xuXG4gIEBpZiB0eXBlLW9mKCRtYXAxKSAhPSBtYXAgb3IgdHlwZS1vZigkbWFwMikgIT0gbWFwIHtcbiAgICAkbWFwMTogJG1hcDI7XG4gIH0gQGVsc2Uge1xuICAgIEBlYWNoICRrZXksICR2YWx1ZSBpbiAkbWFwMiB7XG4gICAgICAkX25ldzogKCRrZXk6IF9zdXN5X2RlZXAtbWVyZ2UobWFwLWdldCgkbWFwMSwgJGtleSksICR2YWx1ZSkpO1xuICAgICAgJG1hcDE6IG1hcC1tZXJnZSgkbWFwMSwgJF9uZXcpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJG1hcDE7XG59XG5cblxuLy8gRGVlcCBIYXMtS2V5XG4vLyAtLS0tLS0tLS0tLS1cbi8vIC0gUmV0dXJuIHRydWUgaWYgYSBkZWVwIGtleSBleGlzdHNcbkBmdW5jdGlvbiBfc3VzeS1kZWVwLWhhcy1rZXkoXG4gICRtYXAsXG4gICRrZXlzLi4uXG4pIHtcbiAgJF9yZXR1cm46IG51bGw7XG4gICRfc3RvcDogZmFsc2U7XG5cbiAgQGVhY2ggJGtleSBpbiAka2V5cyB7XG4gICAgQGlmIG5vdCgkX3N0b3ApIHtcbiAgICAgICRfcmV0dXJuOiBtYXAtaGFzLWtleSgkbWFwLCAka2V5KTtcbiAgICB9XG5cbiAgICBAaWYgJF9yZXR1cm4ge1xuICAgICAgJG1hcDogbWFwLWdldCgkbWFwLCAka2V5KTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRfc3RvcDogdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuIiwiLy8gU2V0dGluZ3Ncbi8vID09PT09PT09XG5cbi8vIFZlcnNpb25cbi8vIC0tLS0tLS1cbiRzdS12ZXJzaW9uOiAxLjE7XG5cblxuLy8gRGVmYXVsdCBTZXR0aW5nc1xuLy8gLS0tLS0tLS0tLS0tLS0tLVxuLy8gUFJJVkFURTogVGhlIGJhc2ljIHNldHRpbmdzXG4kc3VzeS1kZWZhdWx0czogKFxuICBjb2x1bW5zOiA0LFxuICBndXR0ZXJzOiAuMjUsXG4pO1xuXG5cbi8vIFVzZXIgU2V0dGluZ3Ncbi8vIC0tLS0tLS0tLS0tLS1cbi8vIC0gRGVmaW5lIHRoZSAkc3VzeSB2YXJpYWJsZSB3aXRoIGEgbWFwIG9mIHlvdXIgb3duIHNldHRpbmdzLlxuLy8gLSBTZXQgRUlUSEVSICRjb2x1bW4td2lkdGggT1IgJGNvbnRhaW5lclxuLy8gLSBVc2UgJGNvbHVtbi13aWR0aCBmb3Igc3RhdGljIGxheW91dHNcbiRzdXN5OiAoKSAhZGVmYXVsdDtcblxuXG4vLyBTdXN5IERlZmF1bHRzXG4vLyAtLS0tLS0tLS0tLS0tXG4vLyBQUklWQVRFOiBBZGQgZGVmYXVsdHMgdG8gU3VzeVxuQG1peGluIHN1c3ktZGVmYXVsdHMoXG4gICRkZWZhdWx0c1xuKSB7XG4gICRzdXN5LWRlZmF1bHRzOiBtYXAtbWVyZ2UoJHN1c3ktZGVmYXVsdHMsICRkZWZhdWx0cykgIWdsb2JhbDtcbn1cblxuXG4vLyBTdXN5IFNldFxuLy8gLS0tLS0tLS1cbi8vIENoYW5nZSBvbmUgc2V0dGluZ1xuLy8gLSAka2V5ICAgOiBzZXR0aW5nIG5hbWVcbi8vIC0gJHZhbHVlIDogc2V0dGluZyB2YWx1ZVxuQG1peGluIHN1c3ktc2V0KFxuICAka2V5LXZhbHVlLi4uXG4pIHtcbiAgJHN1c3k6IF9zdXN5LWRlZXAtc2V0KCRzdXN5LCAka2V5LXZhbHVlLi4uKSAhZ2xvYmFsO1xufVxuXG5cbi8vIFN1c3kgR2V0XG4vLyAtLS0tLS0tLVxuLy8gUmV0dXJuIG9uZSBzZXR0aW5nIGZyb20gYSBncmlkXG4vLyAtICRrZXkgICAgIDogPGtleXdvcmQ+XG4vLyAtICRsYXlvdXQgIDogPHNldHRpbmdzPlxuQGZ1bmN0aW9uIHN1c3ktZ2V0KFxuICAka2V5LFxuICAkbGF5b3V0OiBtYXAtbWVyZ2UoJHN1c3ktZGVmYXVsdHMsICRzdXN5KVxuKSB7XG4gICRsYXlvdXQ6IHBhcnNlLWdyaWQoJGxheW91dCk7XG4gICRfb3B0aW9uczogJGxheW91dCAkc3VzeSAkc3VzeS1kZWZhdWx0cztcbiAgJF9icmVhazogZmFsc2U7XG4gICRfcmV0dXJuOiBudWxsO1xuXG4gIEBlYWNoICRvcHQgaW4gJF9vcHRpb25zIHtcbiAgICBAaWYgdHlwZS1vZigkb3B0KSA9PSBtYXAgYW5kIG5vdCgkX2JyZWFrKSB7XG4gICAgICAkX2tleXNldDogX3N1c3ktZGVlcC1oYXMta2V5KCRvcHQsICRrZXkuLi4pO1xuICAgICAgQGlmICRfa2V5c2V0IHtcbiAgICAgICAgJF9yZXR1cm46IF9zdXN5LWRlZXAtZ2V0KCRvcHQsICRrZXkuLi4pO1xuICAgICAgICAkX2JyZWFrOiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG4iLCIvLyBNYXRoIFZhbGlkYXRpb25cbi8vID09PT09PT09PT09PT09PVxuXG5cbi8vIFZhbGlkIENvbHVtbnNcbi8vIC0tLS0tLS0tLS0tLS1cbi8vIENoZWNrIHRoYXQgYSBjb2x1bW4gc2V0dGluZyBpcyB2YWxpZC5cbkBmdW5jdGlvbiB2YWxpZC1jb2x1bW5zKFxuICAkY29sdW1ucyxcbiAgJHNpbGVudDogZmFsc2Vcbikge1xuICAkdHlwZTogdHlwZS1vZigkY29sdW1ucyk7XG4gICRyZXR1cm46IG51bGw7XG5cbiAgQGlmICR0eXBlID09IG51bWJlciBhbmQgdW5pdGxlc3MoJGNvbHVtbnMpIHtcbiAgICAkcmV0dXJuOiAkY29sdW1ucztcbiAgfSBAZWxzZSBpZiAkdHlwZSA9PSBsaXN0IHtcbiAgICAkZmFpbDogbnVsbDtcbiAgICBAZWFjaCAkY29sIGluICRjb2x1bW5zIHtcbiAgICAgIEBpZiB0eXBlLW9mKCRjb2wpID09IG51bWJlciB7XG4gICAgICAgICRmYWlsOiAkZmFpbCBvciBpZih1bml0bGVzcygkY29sKSwgbnVsbCwgdHJ1ZSk7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgJGZhaWw6IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgICRyZXR1cm46IGlmKCRmYWlsLCAkcmV0dXJuLCAkY29sdW1ucyk7XG4gIH1cblxuICBAaWYgJHJldHVybiAhPSAkY29sdW1ucyBhbmQgbm90KCRzaWxlbnQpIHtcbiAgICAkcmV0dXJuOiBudWxsO1xuICAgICR3YXJuOiAnJGNvbHVtbnMgbXVzdCBiZSBhIHVuaXRsZXNzIG51bWJlciBvciBsaXN0IG9mIHVuaXRsZXNzIG51bWJlcnMuJztcbiAgICBAd2FybiAkd2FybiArICcgQ3VycmVudCB2YWx1ZSBbI3skdHlwZX1dOiAjeyRjb2x1bW5zfSc7XG4gIH1cblxuICBAcmV0dXJuICRyZXR1cm47XG59XG5cblxuLy8gVmFsaWQgR3V0dGVyc1xuLy8gLS0tLS0tLS0tLS0tLVxuLy8gQ2hlY2sgdGhhdCBhIGd1dHRlciBzZXR0aW5nIGlzIHZhbGlkLlxuQGZ1bmN0aW9uIHZhbGlkLWd1dHRlcnMoXG4gICRndXR0ZXJzLFxuICAkc2lsZW50OiBmYWxzZVxuKSB7XG4gICR0eXBlOiB0eXBlLW9mKCRndXR0ZXJzKTtcbiAgJHJldHVybjogbnVsbDtcblxuICBAaWYgJHR5cGUgPT0gbnVtYmVyIGFuZCB1bml0bGVzcygkZ3V0dGVycykge1xuICAgICRyZXR1cm46ICRndXR0ZXJzO1xuICB9IEBlbHNlIGlmIG5vdCgkc2lsZW50KSB7XG4gICAgJHdhcm46ICckZ3V0dGVycyBtdXN0IGJlIGEgdW5pdGxlc3MgbnVtYmVyLic7XG4gICAgQHdhcm4gJHdhcm4gKyAnIEN1cnJlbnQgdmFsdWUgWyN7JHR5cGV9XTogI3skZ3V0dGVyc30nO1xuICB9XG5cbiAgQHJldHVybiAkcmV0dXJuO1xufVxuIiwiLy8gQ29sdW1uIG1hdGhcbi8vID09PT09PT09PT09XG5cblxuLy8gSXMgU3ltbWV0cmljYWxcbi8vIC0tLS0tLS0tLS0tLS0tXG4vLyBSZXR1cm5zIHRydWUgaWYgYSBncmlkIGlzIHN5bW1ldHJpY2FsLlxuLy8gLSBbJGNvbHVtbnNdICAgOiA8bnVtYmVyPiB8IDxsaXN0PlxuQGZ1bmN0aW9uIGlzLXN5bW1ldHJpY2FsKFxuICAkY29sdW1uczogc3VzeS1nZXQoY29sdW1ucylcbikge1xuICAkY29sdW1uczogdmFsaWQtY29sdW1ucygkY29sdW1ucyk7XG4gIEByZXR1cm4gaWYodHlwZS1vZigkY29sdW1ucykgPT0gbnVtYmVyLCAkY29sdW1ucywgbnVsbCk7XG59XG5cblxuLy8gU3VzeSBDb3VudFxuLy8gLS0tLS0tLS0tLVxuLy8gRmluZCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgaW4gYSBnaXZlbiBsYXlvdXRcbi8vIC0gWyRjb2x1bW5zXSAgIDogPG51bWJlcj4gfCA8bGlzdD5cbkBmdW5jdGlvbiBzdXN5LWNvdW50KFxuICAkY29sdW1uczogc3VzeS1nZXQoY29sdW1ucylcbikge1xuICAkY29sdW1uczogdmFsaWQtY29sdW1ucygkY29sdW1ucyk7XG4gIEByZXR1cm4gaXMtc3ltbWV0cmljYWwoJGNvbHVtbnMpIG9yIGxlbmd0aCgkY29sdW1ucyk7XG59XG5cblxuLy8gU3VzeSBTdW1cbi8vIC0tLS0tLS0tXG4vLyBGaW5kIHRoZSB0b3RhbCBzdW0gb2YgY29sdW1uLXVuaXRzIGluIGEgbGF5b3V0XG4vLyAtIFskY29sdW1uc10gICA6IDxudW1iZXI+IHwgPGxpc3Q+XG4vLyAtIFskZ3V0dGVyc10gICA6IDxyYXRpbz5cbi8vIC0gWyRzcHJlYWRdICAgIDogZmFsc2UvbmFycm93IHwgd2lkZSB8IHdpZGVyXG5AZnVuY3Rpb24gc3VzeS1zdW0oXG4gICRjb2x1bW5zICA6IHN1c3ktZ2V0KGNvbHVtbnMpLFxuICAkZ3V0dGVycyAgOiBzdXN5LWdldChndXR0ZXJzKSxcbiAgJHNwcmVhZCAgIDogZmFsc2Vcbikge1xuICAkY29sdW1uczogdmFsaWQtY29sdW1ucygkY29sdW1ucyk7XG4gICRndXR0ZXJzOiB2YWxpZC1ndXR0ZXJzKCRndXR0ZXJzKTtcblxuICAkc3ByZWFkOiBpZigkc3ByZWFkID09IHdpZGUsIDAsIGlmKCRzcHJlYWQgPT0gd2lkZXIsIDEsIC0xKSk7XG4gICRndXR0ZXItc3VtOiAoc3VzeS1jb3VudCgkY29sdW1ucykgKyAkc3ByZWFkKSAqICRndXR0ZXJzO1xuICAkY29sdW1uLXN1bTogaXMtc3ltbWV0cmljYWwoJGNvbHVtbnMpO1xuXG4gIEBpZiBub3QoJGNvbHVtbi1zdW0pIHtcbiAgICBAZWFjaCAkY29sdW1uIGluICRjb2x1bW5zIHtcbiAgICAgICRjb2x1bW4tc3VtOiAoJGNvbHVtbi1zdW0gb3IgMCkgKyAkY29sdW1uO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJGNvbHVtbi1zdW0gKyAkZ3V0dGVyLXN1bTtcbn1cblxuXG4vLyBTdXN5IFNsaWNlXG4vLyAtLS0tLS0tLS0tXG4vLyBSZXR1cm4gYSBzdWJzZXQgb2YgY29sdW1ucyBhdCBhIGdpdmVuIGxvY2F0aW9uLlxuLy8gLSAkc3BhbiAgICAgICAgOiA8bnVtYmVyPlxuLy8gLSAkbG9jYXRpb24gICAgOiA8bnVtYmVyPlxuLy8gLSBbJGNvbHVtbnNdICAgOiA8bnVtYmVyPiB8IDxsaXN0PlxuQGZ1bmN0aW9uIHN1c3ktc2xpY2UoXG4gICRzcGFuLFxuICAkbG9jYXRpb24sXG4gICRjb2x1bW5zOiBzdXN5LWdldChjb2x1bW5zKVxuKSB7XG4gICRjb2x1bW5zOiB2YWxpZC1jb2x1bW5zKCRjb2x1bW5zKTtcbiAgJHN1Yi1jb2x1bW5zOiAkc3BhbjtcblxuICBAaWYgbm90KGlzLXN5bW1ldHJpY2FsKCRjb2x1bW5zKSkge1xuICAgICRsb2NhdGlvbjogJGxvY2F0aW9uIG9yIDE7XG4gICAgJHN1Yi1jb2x1bW5zOiAoKTtcbiAgICBAZm9yICRpIGZyb20gJGxvY2F0aW9uIHRvICgkbG9jYXRpb24gKyAkc3Bhbikge1xuICAgICAgJHN1Yi1jb2x1bW5zOiBhcHBlbmQoJHN1Yi1jb2x1bW5zLCBudGgoJGNvbHVtbnMsICRpKSk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkc3ViLWNvbHVtbnM7XG59XG5cblxuLy8gU3VzeVxuLy8gLS0tLVxuLy8gRmluZCB0aGUgc3VtIG9mIGEgY29sdW1uLXNwYW4uXG4vLyAtICRzcGFuICAgICAgICA6IDxudW1iZXI+XG4vLyAtICRsb2NhdGlvbiAgICA6IDxudW1iZXI+XG4vLyAtIFskY29sdW1uc10gICA6IDxudW1iZXI+IHwgPGxpc3Q+XG4vLyAtIFskZ3V0dGVyc10gICA6IDxyYXRpbz5cbi8vIC0gWyRzcHJlYWRdICAgIDogZmFsc2UvbmFycm93IHwgd2lkZSB8IHdpZGVyXG5AZnVuY3Rpb24gc3VzeShcbiAgJHNwYW4sXG4gICRsb2NhdGlvbiAgICAgOiBmYWxzZSxcbiAgJGNvbHVtbnMgICAgICA6IHN1c3ktZ2V0KGNvbHVtbnMpLFxuICAkZ3V0dGVycyAgICAgIDogc3VzeS1nZXQoZ3V0dGVycyksXG4gICRzcHJlYWQgICAgICAgOiBmYWxzZVxuKSB7XG4gICRjb2x1bW5zOiB2YWxpZC1jb2x1bW5zKCRjb2x1bW5zKTtcbiAgJGd1dHRlcnM6IHZhbGlkLWd1dHRlcnMoJGd1dHRlcnMpO1xuICAkc3Bhbjogc3VzeS1zbGljZSgkc3BhbiwgJGxvY2F0aW9uLCAkY29sdW1ucyk7XG5cbiAgQHJldHVybiBzdXN5LXN1bSgkc3BhbiwgJGd1dHRlcnMsICRzcHJlYWQpO1xufVxuIiwiLy8gRmxvYXQgQVBJXG4vLyA9PT09PT09PT1cblxuQGltcG9ydCBcInNoYXJlZFwiO1xuXG5AaW1wb3J0IFwiZmxvYXQvY29udGFpbmVyXCI7XG5AaW1wb3J0IFwiZmxvYXQvc3BhblwiO1xuQGltcG9ydCBcImZsb2F0L2VuZFwiO1xuQGltcG9ydCBcImZsb2F0L2lzb2xhdGVcIjtcbiIsIi8vIFNoYXJlZCBBUElcbi8vID09PT09PT09PT1cblxuQGltcG9ydCBcInN1cHBvcnRcIjtcblxuQGltcG9ydCBcInNoYXJlZC9pbnNwZWN0XCI7XG5AaW1wb3J0IFwic2hhcmVkL291dHB1dFwiO1xuQGltcG9ydCBcInNoYXJlZC9kaXJlY3Rpb25cIjtcbkBpbXBvcnQgXCJzaGFyZWQvYmFja2dyb3VuZFwiO1xuQGltcG9ydCBcInNoYXJlZC9jb250YWluZXJcIjtcbkBpbXBvcnQgXCJzaGFyZWQvbWFyZ2luc1wiO1xuQGltcG9ydCBcInNoYXJlZC9wYWRkaW5nXCI7XG5cblxuXG4iLCIvLyBTdXN5IEJyb3dzZXIgU3VwcG9ydFxuLy8gPT09PT09PT09PT09PT09PT09PT1cblxuQGltcG9ydCBcInN1cHBvcnQvc3VwcG9ydFwiO1xuQGltcG9ydCBcInN1cHBvcnQvcHJlZml4XCI7XG5AaW1wb3J0IFwic3VwcG9ydC9iYWNrZ3JvdW5kXCI7XG5AaW1wb3J0IFwic3VwcG9ydC9ib3gtc2l6aW5nXCI7XG5AaW1wb3J0IFwic3VwcG9ydC9yZW1cIjtcbkBpbXBvcnQgXCJzdXBwb3J0L2NsZWFyZml4XCI7XG4iLCIvLyBCcm93c2VyIFN1cHBvcnRcbi8vID09PT09PT09PT09PT09PVxuXG4vLyBTdXN5IFN1cHBvcnQgRGVmYXVsdHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGluY2x1ZGUgc3VzeS1kZWZhdWx0cygoXG4gIHVzZS1jdXN0b206IChcbiAgICBjbGVhcmZpeDogZmFsc2UsXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kLW9wdGlvbnM6IGZhbHNlLFxuICAgIGJyZWFrcG9pbnQ6IHRydWUsXG4gICAgYm94LXNpemluZzogdHJ1ZSxcbiAgICByZW06IHRydWUsXG4gICksXG4pKTtcblxuXG4vLyBTdXN5IFN1cHBvcnQgW21peGluXVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFNlbmQgcHJvcGVydHktdmFsdWUgcGFpcnMgdG8gdGhlIHByb3BlciBzdXBwb3J0IG1vZHVsZXMuXG4vLyAtICRwcm9wICA6IDxjc3MgcHJvcGVydHk+XG4vLyAtICR2YWwgICA6IDxjc3MgdmFsdWU+XG5AbWl4aW4gc3VzeS1zdXBwb3J0KFxuICAkcHJvcCxcbiAgJHZhbFxuKSB7XG4gIC8vIEJhY2tncm91bmQgU3VwcG9ydFxuICBAaWYgJHByb3AgPT0gYmFja2dyb3VuZC1pbWFnZSB7XG4gICAgQGluY2x1ZGUgc3VzeS1iYWNrZ3JvdW5kLWltYWdlKCR2YWwpO1xuICB9IEBlbHNlIGlmICRwcm9wID09IGJhY2tncm91bmQtc2l6ZSB7XG4gICAgQGluY2x1ZGUgc3VzeS1iYWNrZ3JvdW5kLXNpemUoJHZhbCk7XG4gIH0gQGVsc2UgaWYgJHByb3AgPT0gYmFja2dyb3VuZC1vcmlnaW4ge1xuICAgIEBpbmNsdWRlIHN1c3ktYmFja2dyb3VuZC1vcmlnaW4oJHZhbCk7XG4gIH0gQGVsc2UgaWYgJHByb3AgPT0gYmFja2dyb3VuZC1jbGlwIHtcbiAgICBAaW5jbHVkZSBzdXN5LWJhY2tncm91bmQtY2xpcCgkdmFsKTtcbiAgfVxuXG4gIC8vIEJveC1TaXppbmcgU3VwcG9ydFxuICBAZWxzZSBpZiAkcHJvcCA9PSBib3gtc2l6aW5nIHtcbiAgICBAaW5jbHVkZSBzdXN5LWJveC1zaXppbmcoJHZhbCk7XG4gIH1cblxuICAvLyBSZW0gU3VwcG9ydFxuICBAZWxzZSB7XG4gICAgQGluY2x1ZGUgc3VzeS1yZW0oJHByb3AsICR2YWwpO1xuICB9XG59XG5cblxuLy8gU3VzeSBTdXBwb3J0IFtmdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDaGVjayBmb3Igc3VwcG9ydCBvZiBhIGZlYXR1cmUuXG4vLyAtICRmZWF0dXJlICAgICAgIDogPHN0cmluZz5cbi8vICAgICAgICAgICAgICAgICAgICAtIGUuZyBcInJlbVwiIG9yIFwiYm94LXNpemluZ1wiXG4vLyAtICRyZXF1aXJlbWVudHMgIDogPG1hcD5cbi8vICAgICAgICAgICAgICAgICAgICAtIGUuZyAodmFyaWFibGU6IHJlbS13aXRoLXB4LWZhbGxiYWNrLCBtaXhpbjogcmVtKVxuLy8gLSAkd2FybiAgICAgICAgICA6IDxib29sPlxuQGZ1bmN0aW9uIHN1c3ktc3VwcG9ydChcbiAgJGZlYXR1cmUsXG4gICRyZXF1aXJlbWVudHM6ICgpLFxuICAkd2FybjogdHJ1ZVxuKSB7XG4gICRfc3VwcG9ydDogc3VzeS1nZXQodXNlLWN1c3RvbSAkZmVhdHVyZSk7XG5cbiAgQGlmICRfc3VwcG9ydCB7XG4gICAgJF9mYWlsOiBmYWxzZTtcblxuICAgIEBlYWNoICRfdHlwZSwgJF9yZXEgaW4gJHJlcXVpcmVtZW50cyB7XG4gICAgICBAZWFjaCAkX2kgaW4gJF9yZXEge1xuXG4gICAgICAgICRfcGFzcyA6IG51bGw7XG5cbiAgICAgICAgLy8gc2FzcyAzLjUgb3IgZ3JlYXRlclxuICAgICAgICBAaWYgZnVuY3Rpb24tZXhpc3RzKCdnZXQtZnVuY3Rpb24nKSB7XG4gICAgICAgICAgJF9wYXNzOiBjYWxsKGdldC1mdW5jdGlvbih1bnF1b3RlKFwiI3skX3R5cGV9LWV4aXN0c1wiKSksICRfaSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2FzcyAzLjQgb3IgbGVzc1xuICAgICAgICBAZWxzZSB7XG4gICAgICAgICAgJF9wYXNzOiBjYWxsKHVucXVvdGUoXCIjeyRfdHlwZX0tZXhpc3RzXCIpLCAkX2kpO1xuICAgICAgICB9XG5cbiAgICAgICAgQGlmIG5vdCgkX3Bhc3MpIHtcbiAgICAgICAgICAkX2ZhaWw6IHRydWU7XG4gICAgICAgICAgQGlmICR3YXJuIHtcbiAgICAgICAgICAgIEB3YXJuIFwiWW91IHJlcXVlc3RlZCBjdXN0b20gc3VwcG9ydCBvZiAjeyRmZWF0dXJlfSwgYnV0IHRoZSAjeyRfaX0gI3skX3R5cGV9IGlzIG5vdCBhdmFpbGFibGUuXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgJF9zdXBwb3J0OiBpZigkX2ZhaWwsIGZhbHNlLCAkX3N1cHBvcnQpO1xuICB9XG5cbiAgQHJldHVybiAkX3N1cHBvcnQ7XG59XG4iLCIvLyBTdXN5IFByZWZpeFxuLy8gPT09PT09PT09PT1cblxuLy8gUHJlZml4XG4vLyAtLS0tLS1cbi8vIE91dHB1dCBzaW1wbGUgcHJlZml4ZWQgcHJvcGVydGllcy5cbi8vIC0gJHByb3AgICAgICA6IDxjc3MgcHJvcGVydHk+XG4vLyAtICR2YWwgICAgICAgOiA8Y3NzIHZhbHVlPlxuLy8gLSBbJHByZWZpeF0gIDogPGJyb3dzZXIgcHJlZml4IGxpc3Q+XG5AbWl4aW4gc3VzeS1wcmVmaXgoXG4gICRwcm9wLFxuICAkdmFsLFxuICAkcHJlZml4OiBvZmZpY2lhbFxuKSB7XG4gIEBlYWNoICRmaXggaW4gJHByZWZpeCB7XG4gICAgJGZpeDogaWYoJGZpeCA9PSBvZmZpY2lhbCBvciBub3QoJGZpeCksICRwcm9wLCAnLSN7JGZpeH0tI3skcHJvcH0nKTtcbiAgICBAaW5jbHVkZSBzdXN5LXJlbSgkZml4LCAkdmFsKTtcbiAgfVxufVxuIiwiLy8gQmFja2dyb3VuZCBQcm9wZXJ0aWVzXG4vLyA9PT09PT09PT09PT09PT09PT09PT1cblxuLy8gU3VzeSBCYWNrZ3JvdW5kIEltYWdlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENoZWNrIGZvciBhbiBleGlzdGluZyBzdXBwb3J0IG1peGluLCBvciBwcm92aWRlIGEgc2ltcGxlIGZhbGxiYWNrLlxuLy8gLSAkaW1hZ2U6IDxiYWNrZ3JvdW5kLWltYWdlPlxuQG1peGluIHN1c3ktYmFja2dyb3VuZC1pbWFnZShcbiAgJGltYWdlXG4pIHtcbiAgQGlmIHN1c3ktc3VwcG9ydChiYWNrZ3JvdW5kLWltYWdlLCAobWl4aW46IGJhY2tncm91bmQtaW1hZ2UpLCAkd2FybjogZmFsc2UpIHtcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLWltYWdlKCRpbWFnZS4uLik7XG4gIH0gQGVsc2Uge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6ICRpbWFnZTtcbiAgfVxufVxuXG4vLyBTdXN5IEJhY2tncm91bmQgU2l6ZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDaGVjayBmb3IgYW4gZXhpc3Rpbmcgc3VwcG9ydCBtaXhpbiwgb3IgcHJvdmlkZSBhIHNpbXBsZSBmYWxsYmFjay5cbi8vIC0gJGltYWdlOiA8YmFja2dyb3VuZC1zaXplPlxuQG1peGluIHN1c3ktYmFja2dyb3VuZC1zaXplKFxuICAkc2l6ZVxuKSB7XG4gIEBpZiBzdXN5LXN1cHBvcnQoYmFja2dyb3VuZC1vcHRpb25zLCAobWl4aW46IGJhY2tncm91bmQtc2l6ZSkpIHtcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLXNpemUoJHNpemUpO1xuICB9IEBlbHNlIHtcbiAgICBiYWNrZ3JvdW5kLXNpemU6ICRzaXplO1xuICB9XG59XG5cbi8vIFN1c3kgQmFja2dyb3VuZCBPcmlnaW5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENoZWNrIGZvciBhbiBleGlzdGluZyBzdXBwb3J0IG1peGluLCBvciBwcm92aWRlIGEgc2ltcGxlIGZhbGxiYWNrLlxuLy8gLSAkaW1hZ2U6IDxiYWNrZ3JvdW5kLW9yaWdpbj5cbkBtaXhpbiBzdXN5LWJhY2tncm91bmQtb3JpZ2luKFxuICAkb3JpZ2luXG4pIHtcbiAgQGlmIHN1c3ktc3VwcG9ydChiYWNrZ3JvdW5kLW9wdGlvbnMsIChtaXhpbjogYmFja2dyb3VuZC1vcmlnaW4pKSB7XG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZC1vcmlnaW4oJG9yaWdpbik7XG4gIH0gQGVsc2Uge1xuICAgIGJhY2tncm91bmQtb3JpZ2luOiAkb3JpZ2luO1xuICB9XG59XG5cbi8vIFN1c3kgQmFja2dyb3VuZCBDbGlwXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIHByb3ZpZGUgYSBzaW1wbGUgZmFsbGJhY2suXG4vLyAtICRpbWFnZTogPGJhY2tncm91bmQtY2xpcD5cbkBtaXhpbiBzdXN5LWJhY2tncm91bmQtY2xpcChcbiAgJGNsaXBcbikge1xuICBAaWYgc3VzeS1zdXBwb3J0KGJhY2tncm91bmQtb3B0aW9ucywgKG1peGluOiBiYWNrZ3JvdW5kLWNsaXApKSB7XG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZC1jbGlwKCRjbGlwKTtcbiAgfSBAZWxzZSB7XG4gICAgYmFja2dyb3VuZC1jbGlwOiAkY2xpcDtcbiAgfVxufVxuIiwiLy8gQm94IFNpemluZ1xuLy8gPT09PT09PT09PVxuXG4vLyBCb3ggU2l6aW5nXG4vLyAtLS0tLS0tLS0tXG4vLyBDaGVjayBmb3IgYW4gZXhpc3Rpbmcgc3VwcG9ydCBtaXhpbiwgb3IgcHJvdmlkZSBhIHNpbXBsZSBmYWxsYmFjay5cbi8vIC0gJG1vZGVsOiA8Ym94LXNpemluZz5cbkBtaXhpbiBzdXN5LWJveC1zaXppbmcoXG4gICRtb2RlbDogY29udGVudC1ib3hcbikge1xuICBAaWYgJG1vZGVsIHtcbiAgICBAaWYgc3VzeS1zdXBwb3J0KGJveC1zaXppbmcsIChtaXhpbjogYm94LXNpemluZyksICR3YXJuOiBmYWxzZSkge1xuICAgICAgQGluY2x1ZGUgYm94LXNpemluZygkbW9kZWwpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJHByZWZpeDogKG1veiwgd2Via2l0LCBvZmZpY2lhbCk7XG4gICAgICBAaW5jbHVkZSBzdXN5LXByZWZpeChib3gtc2l6aW5nLCAkbW9kZWwsICRwcmVmaXgpO1xuICAgIH1cbiAgfVxufVxuIiwiLy8gcmVtIFN1cHBvcnRcbi8vID09PT09PT09PT09XG5cbi8vIHJlbVxuLy8gLS0tXG4vLyBDaGVjayBmb3IgYW4gZXhpc3Rpbmcgc3VwcG9ydCBtaXhpbiwgb3Igb3V0cHV0IGRpcmVjdGx5LlxuLy8gLSAkcHJvcCAgOiA8Y3NzIHByb3BlcnR5PlxuLy8gLSAkdmFsICAgOiA8Y3NzIHZhbHVlPlxuQG1peGluIHN1c3ktcmVtKFxuICAkcHJvcCxcbiAgJHZhbFxuKSB7XG4gICRfcmVxczogKFxuICAgIHZhcmlhYmxlOiByaHl0aG0tdW5pdCByZW0td2l0aC1weC1mYWxsYmFjayxcbiAgICBtaXhpbjogcmVtLFxuICApO1xuICBAaWYgc3VzeS1zdXBwb3J0KHJlbSwgJF9yZXFzLCAkd2FybjogZmFsc2UpIGFuZCAkcmh5dGhtLXVuaXQgPT0gcmVtIHtcbiAgICBAaW5jbHVkZSByZW0oJHByb3AsICR2YWwpO1xuICB9IEBlbHNlIHtcbiAgICAjeyRwcm9wfTogJHZhbDtcbiAgfVxufVxuIiwiLy8gU3VzeSBGYWxsYmFjayBDbGVhcmZpeFxuLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG5cbi8vIENsZWFyZml4XG4vLyAtLS0tLS0tLVxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIHByb3ZpZGUgYSBzaW1wbGUgZmFsbGJhY2suXG5AbWl4aW4gc3VzeS1jbGVhcmZpeCB7XG4gIEBpZiBzdXN5LXN1cHBvcnQoY2xlYXJmaXgsIChtaXhpbjogY2xlYXJmaXgpKSB7XG4gICAgQGluY2x1ZGUgY2xlYXJmaXg7XG4gIH0gQGVsc2Uge1xuICAgICY6YWZ0ZXIge1xuICAgICAgY29udGVudDogXCIgXCI7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIGNsZWFyOiBib3RoO1xuICAgIH1cbiAgfVxufVxuIiwiLy8gRGVidWdnaW5nXG4vLyA9PT09PT09PT1cblxuLy8gU3VzeSBJbnNwZWN0XG4vLyAtLS0tLS0tLS0tLS1cbi8vIE91dHB1dCBhcmd1bWVudHMgcGFzc2VkIHRvIGEgaW5zcGVjdC5cbi8vIC0gJG1peGluICA6IDxzdXN5IG1peGluPlxuLy8gLSAkaW5zcGVjICAgOiA8bWl4aW4gYXJndW1lbnRzPlxuXG5AbWl4aW4gc3VzeS1pbnNwZWN0KFxuICAkbWl4aW4sXG4gICRpbnNwZWN0XG4pIHtcbiAgJHNob3c6IGZhbHNlO1xuXG4gIEBlYWNoICRpdGVtIGluICRpbnNwZWN0IHtcbiAgICBAaWYgaW5kZXgoJGl0ZW0sIGluc3BlY3QpIHtcbiAgICAgICRzaG93OiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEBpZiAkc2hvdyBvciBzdXN5LWdldChkZWJ1ZyBpbnNwZWN0KSB7XG4gICAgLXN1c3ktI3skbWl4aW59OiBpbnNwZWN0KCRpbnNwZWN0KTtcbiAgfVxufVxuIiwiLy8gT3V0cHV0XG4vLyA9PT09PT1cblxuLy8gT3V0cHV0XG4vLyAtLS0tLS1cbi8vIE91dHB1dCBDU1Mgd2l0aCBwcm9wZXIgYnJvd3NlciBzdXBwb3J0LlxuLy8gLSAkc3R5bGVzICA6IDxtYXAgb2YgY3NzIHByb3BlcnR5LXZhbHVlIHBhaXJzPlxuQG1peGluIG91dHB1dChcbiAgJHN0eWxlc1xuKSB7XG4gIEBlYWNoICRwcm9wLCAkdmFsIGluICRzdHlsZXMge1xuICAgIEBpbmNsdWRlIHN1c3ktc3VwcG9ydCgkcHJvcCwgJHZhbCk7XG4gIH1cbn1cbiIsIi8vIERpcmVjdGlvbiBIZWxwZXJzXG4vLyA9PT09PT09PT09PT09PT09PVxuXG4vLyBTdXN5IEZsb3cgRGVmYXVsdHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLSBQUklWQVRFXG5AaW5jbHVkZSBzdXN5LWRlZmF1bHRzKChcbiAgZmxvdzogbHRyLFxuKSk7XG5cbi8vIEdldCBEaXJlY3Rpb25cbi8vIC0tLS0tLS0tLS0tLS1cbi8vIFJldHVybiB0aGUgJ2Zyb20nIG9yICd0bycgZGlyZWN0aW9uIG9mIGEgbHRyIG9yIHJ0bCBmbG93LlxuLy8gLSBbJGZsb3ddICA6IGx0ciB8IHJ0bFxuLy8gLSBbJGtleV0gICA6IGZyb20gfCB0b1xuQGZ1bmN0aW9uIGdldC1kaXJlY3Rpb24oXG4gICRmbG93OiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBmbG93KSxcbiAgJGtleTogZnJvbVxuKSB7XG4gICRyZXR1cm46IGlmKCRmbG93ID09IHJ0bCwgKGZyb206IHJpZ2h0LCB0bzogbGVmdCksIChmcm9tOiBsZWZ0LCB0bzogcmlnaHQpKTtcbiAgQHJldHVybiBtYXAtZ2V0KCRyZXR1cm4sICRrZXkpO1xufVxuXG4vLyBUb1xuLy8gLS1cbi8vIFJldHVybiB0aGUgJ3RvJyBkaXJlY3Rpb24gb2YgYSBmbG93XG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXG5AZnVuY3Rpb24gdG8oXG4gICRmbG93OiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBmbG93KVxuKSB7XG4gIEByZXR1cm4gZ2V0LWRpcmVjdGlvbigkZmxvdywgdG8pO1xufVxuXG4vLyBGcm9tXG4vLyAtLS0tXG4vLyBSZXR1cm4gdGhlICdmcm9tJyBkaXJlY3Rpb24gb2YgYSBmbG93XG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXG5AZnVuY3Rpb24gZnJvbShcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXG4pIHtcbiAgQHJldHVybiBnZXQtZGlyZWN0aW9uKCRmbG93LCBmcm9tKTtcbn1cbiIsIi8vIEdyaWQgQmFja2dyb3VuZCBBUElcbi8vID09PT09PT09PT09PT09PT09PT1cbi8vIC0gU3ViLXBpeGVsIHJvdW5kaW5nIGNhbiBsZWFkIHRvIHNldmVyYWwgcGl4ZWxzIHZhcmlhdGlvbiBiZXR3ZWVuIGJyb3dzZXJzLlxuXG4vLyBHcmlkIEJhY2tncm91bmQgT3V0cHV0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtICRpbWFnZTogYmFja2dyb3VuZC1pbWFnZVxuLy8gLSAkc2l6ZTogYmFja2dyb3VuZC1zaXplXG4vLyAtICRjbGlwOiBiYWNrZ3JvdW5kLWNsaXBcbi8vIC0gWyRmbG93XTogbHRyIHwgcnRsXG5AbWl4aW4gYmFja2dyb3VuZC1ncmlkLW91dHB1dCAoXG4gICRpbWFnZSxcbiAgJHNpemU6IG51bGwsXG4gICRjbGlwOiBudWxsLFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcbikge1xuICAkb3V0cHV0OiAoXG4gICAgYmFja2dyb3VuZC1pbWFnZTogJGltYWdlLFxuICAgIGJhY2tncm91bmQtc2l6ZTogJHNpemUsXG4gICAgYmFja2dyb3VuZC1vcmlnaW46ICRjbGlwLFxuICAgIGJhY2tncm91bmQtY2xpcDogJGNsaXAsXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogZnJvbSgkZmxvdykgdG9wLFxuICApO1xuXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcbn1cbiIsIi8vIFNoYXJlZCBDb250YWluZXIgQVBJXG4vLyA9PT09PT09PT09PT09PT09PT09PVxuXG4vLyBDb250YWluZXIgT3V0cHV0XG4vLyAtLS0tLS0tLS0tLS0tLS0tXG4vLyAtIFskd2lkdGhdICAgICAgICAgOiA8bGVuZ3RoPlxuLy8gLSBbJGp1c3RpZnldICAgICAgIDogbGVmdCB8IGNlbnRlciB8IHJpZ2h0XG4vLyAtIFskbWF0aF0gICAgICAgICAgOiBmbHVpZCB8IHN0YXRpY1xuQG1peGluIGNvbnRhaW5lci1vdXRwdXQoXG4gICR3aWR0aCxcbiAgJGp1c3RpZnk6IGF1dG8gYXV0byxcbiAgJHByb3BlcnR5OiBtYXgtd2lkdGhcbikge1xuICAkb3V0cHV0OiAoXG4gICAgI3skcHJvcGVydHl9OiAkd2lkdGggb3IgMTAwJSxcbiAgICBtYXJnaW4tbGVmdDogbnRoKCRqdXN0aWZ5LCAxKSxcbiAgICBtYXJnaW4tcmlnaHQ6IG50aCgkanVzdGlmeSwgMiksXG4gICk7XG5cbiAgQGluY2x1ZGUgb3V0cHV0KCRvdXRwdXQpO1xufVxuIiwiLy8gTWFyZ2lucyBBUElcbi8vID09PT09PT09PT09XG5cbi8vIE1hcmdpbiBPdXRwdXRcbi8vIC0tLS0tLS0tLS0tLS1cbi8vIC0gJGJlZm9yZSAgOiA8bGVuZ3RoPlxuLy8gLSAkYWZ0ZXIgICA6IDxsZW5ndGg+XG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXG5AbWl4aW4gbWFyZ2luLW91dHB1dChcbiAgJGJlZm9yZSxcbiAgJGFmdGVyLFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcbikge1xuICAkdG86IHRvKCRmbG93KTtcbiAgJGZyb206IGZyb20oJGZsb3cpO1xuXG4gICRvdXRwdXQ6IChcbiAgICBtYXJnaW4tI3skZnJvbX06ICRiZWZvcmUsXG4gICAgbWFyZ2luLSN7JHRvfTogJGFmdGVyLFxuICApO1xuXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcbn1cbiIsIi8vIFBhZGRpbmcgQVBJXG4vLyA9PT09PT09PT09PVxuXG4vLyBQYWRkaW5nIE91dHB1dFxuLy8gLS0tLS0tLS0tLS0tLS1cbi8vIC0gJGJlZm9yZSAgOiA8bGVuZ3RoPlxuLy8gLSAkYWZ0ZXIgICA6IDxsZW5ndGg+XG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXG5AbWl4aW4gcGFkZGluZy1vdXRwdXQoXG4gICRiZWZvcmUsXG4gICRhZnRlcixcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXG4pIHtcbiAgJHRvOiB0bygkZmxvdyk7XG4gICRmcm9tOiBmcm9tKCRmbG93KTtcblxuICAkb3V0cHV0OiAoXG4gICAgcGFkZGluZy0jeyRmcm9tfTogJGJlZm9yZSxcbiAgICBwYWRkaW5nLSN7JHRvfTogJGFmdGVyLFxuICApO1xuXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcbn1cbiIsIi8vIEZsb2F0IENvbnRhaW5lciBBUElcbi8vID09PT09PT09PT09PT09PT09PT1cblxuLy8gRmxvYXQgQ29udGFpbmVyXG4vLyAtLS0tLS0tLS0tLS0tLS1cbi8vIC0gWyR3aWR0aF0gICAgICAgICA6IDxsZW5ndGg+XG4vLyAtIFskanVzdGlmeV0gICAgICAgOiBsZWZ0IHwgY2VudGVyIHwgcmlnaHRcbi8vIC0gWyRtYXRoXSAgIDogZmx1aWQgfCBzdGF0aWNcbkBtaXhpbiBmbG9hdC1jb250YWluZXIoXG4gICR3aWR0aCxcbiAgJGp1c3RpZnk6IGF1dG8gYXV0byxcbiAgJHByb3BlcnR5OiBtYXgtd2lkdGhcbikge1xuICBAaW5jbHVkZSBzdXN5LWNsZWFyZml4O1xuICBAaW5jbHVkZSBjb250YWluZXItb3V0cHV0KCR3aWR0aCwgJGp1c3RpZnksICRwcm9wZXJ0eSk7XG59XG4iLCIvLyBGbG9hdCBTcGFuIEFQSVxuLy8gPT09PT09PT09PT09PT1cblxuLy8gRmxvYXQgU3BhbiBPdXRwdXRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtICR3aWR0aCAgICAgICAgICAgICA6IDxsZW5ndGg+XG4vLyAtIFskZmxvYXRdICAgICAgICAgICA6IGZyb20gfCB0b1xuLy8gLSBbJG1hcmdpbi1iZWZvcmVdICAgOiA8bGVuZ3RoPlxuLy8gLSBbJG1hcmdpbi1hZnRlcl0gICAgOiA8bGVuZ3RoPlxuLy8gLSBbJHBhZGRpbmctYmVmb3JlXSAgOiA8bGVuZ3RoPlxuLy8gLSBbJHBhZGRpbmctYWZ0ZXJdICAgOiA8bGVuZ3RoPlxuLy8gLSBbJGZsb3ddICAgICAgICAgICAgOiBsdHIgfCBydGxcbkBtaXhpbiBmbG9hdC1zcGFuLW91dHB1dChcbiAgJHdpZHRoLFxuICAkZmxvYXQgICAgICAgICAgICA6IGZyb20sXG4gICRtYXJnaW4tYmVmb3JlICAgIDogbnVsbCxcbiAgJG1hcmdpbi1hZnRlciAgICAgOiBudWxsLFxuICAkcGFkZGluZy1iZWZvcmUgICA6IG51bGwsXG4gICRwYWRkaW5nLWFmdGVyICAgIDogbnVsbCxcbiAgJGZsb3cgICAgICAgICAgICAgOiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBmbG93KVxuKSB7XG4gICR0byAgICAgOiB0bygkZmxvdyk7XG4gICRmcm9tICAgOiBmcm9tKCRmbG93KTtcblxuICAkb3V0cHV0OiAoXG4gICAgd2lkdGg6ICR3aWR0aCxcbiAgICBmbG9hdDogaWYoJGZsb2F0ID09IHRvLCAkdG8sIG51bGwpIG9yIGlmKCRmbG9hdCA9PSBmcm9tLCAkZnJvbSwgbnVsbCksXG4gICAgbWFyZ2luLSN7JGZyb219OiAkbWFyZ2luLWJlZm9yZSxcbiAgICBtYXJnaW4tI3skdG99OiAkbWFyZ2luLWFmdGVyLFxuICAgIHBhZGRpbmctI3skZnJvbX06ICRwYWRkaW5nLWJlZm9yZSxcbiAgICBwYWRkaW5nLSN7JHRvfTogJHBhZGRpbmctYWZ0ZXIsXG4gICk7XG5cbiAgQGluY2x1ZGUgb3V0cHV0KCRvdXRwdXQpO1xufVxuIiwiLy8gRmxvYXQgRW5kcyBBUElcbi8vID09PT09PT09PT09PT09XG5cbi8vIFN1c3kgRW5kIERlZmF1bHRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxuLy8gLSBQUklWQVRFXG5AaW5jbHVkZSBzdXN5LWRlZmF1bHRzKChcbiAgbGFzdC1mbG93OiB0byxcbikpO1xuXG4vLyBGbG9hdCBMYXN0XG4vLyAtLS0tLS0tLS0tXG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXG5AbWl4aW4gZmxvYXQtbGFzdChcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpLFxuICAkbGFzdC1mbG93OiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBsYXN0LWZsb3cpLFxuICAkbWFyZ2luOiAwXG4pIHtcbiAgJHRvOiB0bygkZmxvdyk7XG5cbiAgJG91dHB1dDogKFxuICAgIGZsb2F0OiBpZigkbGFzdC1mbG93ID09IHRvLCAkdG8sIG51bGwpLFxuICAgIG1hcmdpbi0jeyR0b306ICRtYXJnaW4sXG4gICk7XG5cbiAgQGluY2x1ZGUgb3V0cHV0KCRvdXRwdXQpO1xufVxuXG4vLyBGbG9hdCBGaXJzdFxuLy8gLS0tLS0tLS0tLS1cbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcbkBtaXhpbiBmbG9hdC1maXJzdChcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXG4pIHtcbiAgJG91dHB1dDogKFxuICAgIG1hcmdpbi0je2Zyb20oJGZsb3cpfTogMCxcbiAgKTtcblxuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XG59XG4iLCIvLyBGbG9hdCBJc29sYXRpb24gQVBJXG4vLyA9PT09PT09PT09PT09PT09PT09XG5cbi8vIElzb2xhdGUgT3V0cHV0XG4vLyAtLS0tLS0tLS0tLS0tLVxuLy8gLSAkcHVzaCAgICA6IDxsZW5ndGg+XG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXG5AbWl4aW4gaXNvbGF0ZS1vdXRwdXQoXG4gICRwdXNoLFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcbikge1xuICAkdG86IHRvKCRmbG93KTtcbiAgJGZyb206IGZyb20oJGZsb3cpO1xuXG4gICRvdXRwdXQ6IChcbiAgICBmbG9hdDogJGZyb20sXG4gICAgbWFyZ2luLSN7JGZyb219OiAkcHVzaCxcbiAgICBtYXJnaW4tI3skdG99OiAtMTAwJSxcbiAgKTtcblxuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XG59XG4iLCIvLyBTdXN5IFNldHRpbmdzXG4vLyA9PT09PT09PT09PT09XG5cbi8vIFN1c3kgTGFuZ3VhZ2UgRGVmYXVsdHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gUFJJVkFURVxuQGluY2x1ZGUgc3VzeS1kZWZhdWx0cygoXG4gIGNvbnRhaW5lcjogYXV0byxcbiAgbWF0aDogZmx1aWQsXG4gIG91dHB1dDogZmxvYXQsXG4gIGNvbnRhaW5lci1wb3NpdGlvbjogY2VudGVyLFxuICBndXR0ZXItcG9zaXRpb246IGFmdGVyLFxuICBnbG9iYWwtYm94LXNpemluZzogY29udGVudC1ib3gsXG4gIGRlYnVnOiAoXG4gICAgaW1hZ2U6IGhpZGUsXG4gICAgY29sb3I6IHJnYmEoIzY2ZiwgLjI1KSxcbiAgICBvdXRwdXQ6IGJhY2tncm91bmQsXG4gICAgdG9nZ2xlOiB0b3AgcmlnaHQsXG4gICksXG4pKTtcblxuXG4vLyBWYWxpZCBLZXl3b3JkIFZhbHVlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gUFJJVkFURTogRE9OVCdUIFRPVUNIXG4kc3VzeS1rZXl3b3JkczogKFxuICBjb250YWluZXI6IGF1dG8sXG4gIG1hdGg6IHN0YXRpYyBmbHVpZCxcbiAgb3V0cHV0OiBpc29sYXRlIGZsb2F0LFxuICBjb250YWluZXItcG9zaXRpb246IGxlZnQgY2VudGVyIHJpZ2h0LFxuICBmbG93OiBsdHIgcnRsLFxuICBndXR0ZXItcG9zaXRpb246IGJlZm9yZSBhZnRlciBzcGxpdCBpbnNpZGUgaW5zaWRlLXN0YXRpYyxcbiAgYm94LXNpemluZzogYm9yZGVyLWJveCBjb250ZW50LWJveCxcbiAgc3BhbjogZnVsbCxcbiAgZWRnZTogZmlyc3QgYWxwaGEgbGFzdCBvbWVnYSBmdWxsLFxuICBzcHJlYWQ6IG5hcnJvdyB3aWRlIHdpZGVyLFxuICBndXR0ZXItb3ZlcnJpZGU6IG5vLWd1dHRlcnMgbm8tZ3V0dGVyLFxuICByb2xlOiBuZXN0LFxuICBjbGVhcjogYnJlYWsgbm9icmVhayxcbiAgZGVidWcgaW1hZ2U6IHNob3cgaGlkZSBzaG93LWNvbHVtbnMgc2hvdy1iYXNlbGluZSxcbiAgZGVidWcgb3V0cHV0OiBiYWNrZ3JvdW5kIG92ZXJsYXksXG4pO1xuXG5cbi8vIFBhcnNlIFN1c3kgS2V5d29yZHMgYW5kIE1hcHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBwYXJzZS1zZXR0aW5ncyhcbiAgJHNob3J0OiAkc3VzeVxuKSB7XG4gICRfcmV0dXJuOiAoKTtcblxuICBAaWYgdHlwZS1vZigkc2hvcnQpID09IG1hcCB7XG4gICAgJF9yZXR1cm46ICRzaG9ydDtcbiAgfSBAZWxzZSB7XG4gICAgQGVhY2ggJGl0ZW0gaW4gJHNob3J0IHtcbiAgICAgIC8vIHN0cmluZ3NcbiAgICAgIEBpZiB0eXBlLW9mKCRpdGVtKSA9PSBzdHJpbmcge1xuICAgICAgICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJHN1c3kta2V5d29yZHMge1xuICAgICAgICAgIEBpZiBpbmRleCgkdmFsdWUsICRpdGVtKSB7XG4gICAgICAgICAgICAkX2tleS12YWx1ZTogYXBwZW5kKCRrZXksICRpdGVtKTtcbiAgICAgICAgICAgICRfcmV0dXJuOiBfc3VzeS1kZWVwLXNldCgkX3JldHVybiwgJF9rZXktdmFsdWUuLi4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgLy8gbWFwc1xuICAgICAgfSBAZWxzZSBpZiB0eXBlLW9mKCRpdGVtKSA9PSBtYXAge1xuICAgICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAkaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkX3JldHVybjtcbn1cblxuXG4vLyBQYXJzZSBDb2x1bW5zICYgR3V0dGVyc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBwYXJzZS1sYXlvdXQoXG4gICRzaG9ydFxuKSB7XG4gICRfcmV0dXJuOiAoKTtcbiAgJF9jb2x1bW5zOiAoKTtcbiAgJF9ndXR0ZXJzOiBudWxsO1xuXG4gIEBpZiBub3QodW5pdGxlc3MobnRoKG50aCgkc2hvcnQsIDEpLCAxKSkpIHtcbiAgICAkX2d1dHRlcnM6IG50aCgkc2hvcnQsIDEpO1xuICB9IEBlbHNlIHtcbiAgICAkX2NvbHVtbnM6IChjb2x1bW5zOiBudGgoJHNob3J0LCAxKSk7XG4gICAgJF9ndXR0ZXJzOiBpZihsZW5ndGgoJHNob3J0KSA+IDEsIG50aCgkc2hvcnQsIDIpLCAkX2d1dHRlcnMpO1xuICB9XG5cbiAgQGlmIHR5cGUtb2YoJF9ndXR0ZXJzKSA9PSBsaXN0IGFuZCBsZW5ndGgoJF9ndXR0ZXJzKSA+IDAge1xuICAgICRfZ3V0dGVyczogKFxuICAgICAgZ3V0dGVyczogbnRoKCRfZ3V0dGVycywgMikgLyBudGgoJF9ndXR0ZXJzLCAxKSxcbiAgICAgIGNvbHVtbi13aWR0aDogbnRoKCRfZ3V0dGVycywgMSksXG4gICAgKTtcbiAgfSBAZWxzZSB7XG4gICAgJF9ndXR0ZXJzOiBpZigkX2d1dHRlcnMsIChndXR0ZXJzOiAkX2d1dHRlcnMpLCAoKSk7XG4gIH1cblxuICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAkX2NvbHVtbnMpO1xuICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAkX2d1dHRlcnMpO1xuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cblxuLy8gUGFyc2UgR3JpZC9Db250ZXh0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBwYXJzZS1ncmlkKFxuICAkc2hvcnQ6ICRzdXN5XG4pIHtcbiAgJF9yZXR1cm46IHBhcnNlLXNldHRpbmdzKCRzaG9ydCk7XG4gICRfbGF5b3V0OiAoKTtcblxuICBAaWYgdHlwZS1vZigkc2hvcnQpID09IG1hcCB7XG4gICAgJF9yZXR1cm46ICRzaG9ydDtcbiAgfSBAZWxzZSB7XG4gICAgQGVhY2ggJGl0ZW0gaW4gJHNob3J0IHtcbiAgICAgIC8vIG51bWJlciBvciBsaXN0XG4gICAgICBAaWYgdHlwZS1vZigkaXRlbSkgPT0gbnVtYmVyIG9yIHR5cGUtb2YoJGl0ZW0pID09IGxpc3Qge1xuICAgICAgICBAaWYgdHlwZS1vZigkaXRlbSkgPT0gbGlzdCBvciB1bml0bGVzcygkaXRlbSkge1xuICAgICAgICAgICRfbGF5b3V0OiBhcHBlbmQoJF9sYXlvdXQsICRpdGVtKTtcbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKGNvbnRhaW5lcjogJGl0ZW0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICRfbGF5b3V0OiBpZihsZW5ndGgoJF9sYXlvdXQpID4gMCwgcGFyc2UtbGF5b3V0KCRfbGF5b3V0KSwgJF9sYXlvdXQpO1xuICB9XG5cbiAgQHJldHVybiBtYXAtbWVyZ2UoJF9yZXR1cm4sICRfbGF5b3V0KTtcbn1cblxuXG4vLyBQYXJzZSBTcGFuXG4vLyAtLS0tLS0tLS0tXG5AZnVuY3Rpb24gcGFyc2Utc3BhbihcbiAgJHNob3J0LFxuICAka2V5OiBzcGFuXG4pIHtcbiAgJF9yZXR1cm46ICgpO1xuXG4gIEBpZiB0eXBlLW9mKCRzaG9ydCkgPT0gbWFwIHtcbiAgICAkX3JldHVybjogJHNob3J0O1xuICB9IEBlbHNlIHtcbiAgICAkX2F0OiBpbmRleCgkc2hvcnQsIGF0KTtcblxuICAgIEBpZiAkX2F0IHtcbiAgICAgICRfbG9jaTogJF9hdCArIDE7XG4gICAgICAkX2xvY2F0aW9uOiBudGgoJHNob3J0LCAkX2xvY2kpO1xuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKGxvY2F0aW9uOiAkX2xvY2F0aW9uKSk7XG4gICAgICAkc2hvcnQ6IHNldC1udGgoJHNob3J0LCAkX2F0LCBudWxsKTtcbiAgICAgICRzaG9ydDogc2V0LW50aCgkc2hvcnQsICRfbG9jaSwgbnVsbCk7XG4gICAgfVxuXG4gICAgJF9pOiAxO1xuICAgICRfc3BhbjogKCk7XG5cbiAgICBAd2hpbGUgJF9pIDw9IGxlbmd0aCgkc2hvcnQpIHtcbiAgICAgICRfdGhpczogbnRoKCRzaG9ydCwgJF9pKTtcblxuICAgICAgQGlmIHR5cGUtb2YoJF90aGlzKSA9PSBudW1iZXIge1xuICAgICAgICAkX3NwYW46IGFwcGVuZCgkX3NwYW4sICRfdGhpcyk7XG4gICAgICAgICRzaG9ydDogc2V0LW50aCgkc2hvcnQsICRfaSwgbnVsbCk7XG4gICAgICB9IEBlbHNlIGlmICRfdGhpcyA9PSBvZiB7XG4gICAgICAgICRzaG9ydDogc2V0LW50aCgkc2hvcnQsICRfaSwgbnVsbCk7XG4gICAgICAgICRfaTogbGVuZ3RoKCRzaG9ydCkgKyAxO1xuICAgICAgfVxuXG4gICAgICAkX2k6ICRfaSArIDE7XG4gICAgfVxuXG4gICAgQGlmIGxlbmd0aCgkX3NwYW4pID4gMCB7XG4gICAgICAkX3NwYW46IGlmKGxlbmd0aCgkX3NwYW4pID09IDEsIG50aCgkX3NwYW4sIDEpLCAkX3NwYW4pO1xuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKCRrZXk6ICRfc3BhbikpO1xuICAgIH1cblxuICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sIHBhcnNlLWdyaWQoJHNob3J0KSk7XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuXG5cbi8vIFBhcnNlIEd1dHRlcnNcbi8vIC0tLS0tLS0tLS0tLS1cbkBmdW5jdGlvbiBwYXJzZS1ndXR0ZXJzKFxuICAkc2hvcnQ6ICRzdXN5XG4pIHtcbiAgJF9ndXR0ZXJzOiBwYXJzZS1zcGFuKCRzaG9ydCwgZ3V0dGVyLW92ZXJyaWRlKTtcbiAgJF9zcGFuOiBzdXN5LWdldChndXR0ZXItb3ZlcnJpZGUsICRfZ3V0dGVycyk7XG5cbiAgQGlmICRfc3BhbiBhbmQgbm90KG1hcC1nZXQoJF9ndXR0ZXJzLCBjb2x1bW5zKSkge1xuICAgICRfY29udGV4dDogKCk7XG4gICAgJF9uZXc6ICgpO1xuXG4gICAgQGVhY2ggJGl0ZW0gaW4gJF9zcGFuIHtcbiAgICAgIEBpZiB0eXBlLW9mKCRpdGVtKSA9PSBudW1iZXIgYW5kIHVuaXRsZXNzKCRpdGVtKSB7XG4gICAgICAgICRfY29udGV4dDogYXBwZW5kKCRfY29udGV4dCwgJGl0ZW0pO1xuICAgICAgfSBAZWxzZSB7XG4gICAgICAgICRfbmV3OiBhcHBlbmQoJF9uZXcsICRpdGVtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkX2NvbnRleHQ6IHBhcnNlLWdyaWQoJF9jb250ZXh0KTtcbiAgICAkX25ldzogaWYobGVuZ3RoKCRfbmV3KSA9PSAwLCBudWxsLCAkX25ldyk7XG4gICAgJF9uZXc6IGlmKGxlbmd0aCgkX25ldykgPT0gMSwgbnRoKCRfbmV3LCAxKSwgJF9uZXcpO1xuICAgICRfbmV3OiAoZ3V0dGVyLW92ZXJyaWRlOiBpZigkX25ldyAhPSAkX3NwYW4sICRfbmV3LCAkX3NwYW4pKTtcblxuICAgICRfZ3V0dGVyczogbWFwLW1lcmdlKCRfZ3V0dGVycywgJF9uZXcpO1xuICAgICRfZ3V0dGVyczogbWFwLW1lcmdlKCRfZ3V0dGVycywgJF9jb250ZXh0KTtcbiAgfVxuXG4gIEByZXR1cm4gJF9ndXR0ZXJzO1xufVxuIiwiLy8gVmFsaWRhdGlvblxuLy8gPT09PT09PT09PVxuXG5cbi8vIFZhbGlkYXRlIENvbHVtbiBNYXRoXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIHZhbGlkLWNvbHVtbi1tYXRoKFxuICAkbWF0aCxcbiAgJGNvbHVtbi13aWR0aFxuKSB7XG4gIEBpZiAkbWF0aCA9PSBzdGF0aWMgYW5kIG5vdCgkY29sdW1uLXdpZHRoKSB7XG4gICAgQGVycm9yICdTdGF0aWMgbWF0aCByZXF1aXJlcyBhIHZhbGlkIGNvbHVtbi13aWR0aCBzZXR0aW5nLic7XG4gIH1cblxuICBAcmV0dXJuICRjb2x1bW4td2lkdGg7XG59XG4iLCIvLyBHcmlkIFN5bnRheFxuLy8gPT09PT09PT09PT1cblxuXG4vLyBMYXlvdXRcbi8vIC0tLS0tLVxuLy8gU2V0IGEgbmV3IGxheW91dCB1c2luZyBhIHNob3J0aGFuZFxuLy8gLSAkbGF5b3V0OiA8c2V0dGluZ3M+XG4vLyAtICRjbGVhbjogYm9vbGVhblxuQG1peGluIGxheW91dChcbiAgJGxheW91dCxcbiAgJGNsZWFuOiBmYWxzZVxuKSB7XG4gICRpbnNwZWN0ICA6ICRsYXlvdXQ7XG4gICRzdXN5ICAgICA6IF9nZXQtbGF5b3V0KCRsYXlvdXQsICRjbGVhbikgIWdsb2JhbDtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QobGF5b3V0LCAkaW5zcGVjdCk7XG59XG5cblxuLy8gVXNlIEdyaWRcbi8vIC0tLS0tLS0tXG4vLyBVc2UgYW4gYXJiaXRyYXJ5IGxheW91dCBmb3IgYSBzZWN0aW9uIG9mIGNvZGVcbi8vIC0gJGxheW91dDogPHNldHRpbmdzPlxuLy8gLSAkY2xlYW46IGJvb2xlYW5cbkBtaXhpbiB3aXRoLWxheW91dChcbiAgJGxheW91dCxcbiAgJGNsZWFuOiBmYWxzZVxuKSB7XG4gICRpbnNwZWN0ICA6ICRsYXlvdXQ7XG4gICRvbGQgICAgICA6ICRzdXN5O1xuICAkc3VzeSAgICAgOiBfZ2V0LWxheW91dCgkbGF5b3V0LCAkY2xlYW4pICFnbG9iYWw7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHdpdGgtbGF5b3V0LCAkaW5zcGVjdCk7XG5cbiAgQGNvbnRlbnQ7XG5cbiAgJHN1c3k6ICRvbGQgIWdsb2JhbDtcbn1cblxuXG4vLyBMYXlvdXRcbi8vIC0tLS0tLVxuLy8gUmV0dXJuIGEgcGFyc2VkIGxheW91dCBtYXAgYmFzZWQgb24gc2hvcnRoYW5kIHN5bnRheFxuLy8gLSAkbGF5b3V0OiA8c2V0dGluZ3M+XG5AZnVuY3Rpb24gbGF5b3V0KFxuICAkbGF5b3V0OiAkc3VzeVxuKSB7XG4gIEByZXR1cm4gcGFyc2UtZ3JpZCgkbGF5b3V0KTtcbn1cblxuXG4vLyBHZXQgTGF5b3V0XG4vLyAtLS0tLS0tLS0tXG4vLyBSZXR1cm4gYSBuZXcgbGF5b3V0IGJhc2VkIG9uIGN1cnJlbnQgYW5kIGdpdmVuIHNldHRpbmdzXG4vLyAtICRsYXlvdXQ6IDxzZXR0aW5ncz5cbi8vIC0gJGNsZWFuOiBib29sZWFuXG5AZnVuY3Rpb24gX2dldC1sYXlvdXQoXG4gICRsYXlvdXQsXG4gICRjbGVhbjogZmFsc2Vcbikge1xuICAkbGF5b3V0OiBsYXlvdXQoJGxheW91dCk7XG4gIEByZXR1cm4gaWYoJGNsZWFuLCAkbGF5b3V0LCBfc3VzeS1kZWVwLW1lcmdlKCRzdXN5LCAkbGF5b3V0KSk7XG59XG4iLCIvLyBTdXN5IEJveCBTaXppbmdcbi8vID09PT09PT09PT09PT09PT09XG5cbi8vIEdsb2JhbCBCb3ggU2l6aW5nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxuLy8gU2V0IGEgYm94IG1vZGVsIGdsb2JhbGx5IG9uIGFsbCBlbGVtZW50cy5cbi8vIC0gWyRib3hdOiBib3JkZXItYm94IHwgY29udGVudC1ib3hcbi8vIC0gWyRpbmhlcml0XTogdHJ1ZSB8IGZhbHNlXG5AbWl4aW4gZ2xvYmFsLWJveC1zaXppbmcoXG4gICRib3g6IHN1c3ktZ2V0KGdsb2JhbC1ib3gtc2l6aW5nKSxcbiAgJGluaGVyaXQ6IGZhbHNlXG4pIHtcbiAgJGluc3BlY3Q6ICRib3g7XG5cbiAgQGlmICRpbmhlcml0IHtcbiAgICBAYXQtcm9vdCB7XG4gICAgICAgaHRtbCB7IEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogJGJveCkpOyB9XG4gICAgICAgKiwgKjpiZWZvcmUsICo6YWZ0ZXIgeyBib3gtc2l6aW5nOiBpbmhlcml0OyB9XG4gICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgKiwgKjpiZWZvcmUsICo6YWZ0ZXIgeyBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6ICRib3gpKTsgfVxuICB9XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGdsb2JhbC1ib3gtc2l6aW5nLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIHVwZGF0ZS1ib3gtbW9kZWwoJGJveCk7XG59XG5cbi8vIEJvcmRlciBCb3ggU2l6aW5nXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxuLy8gQSBsZWdhY3kgc2hvcnRjdXQuLi5cbi8vIC0gWyRpbmhlcml0XTogdHJ1ZSB8IGZhbHNlXG5AbWl4aW4gYm9yZGVyLWJveC1zaXppbmcoXG4gICRpbmhlcml0OiBmYWxzZVxuKSB7XG4gIEBpbmNsdWRlIGdsb2JhbC1ib3gtc2l6aW5nKGJvcmRlci1ib3gsICRpbmhlcml0KTtcbn1cblxuLy8gVXBkYXRlIEJveCBNb2RlbFxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuLy8gUFJJVkFURTogVXBkYXRlcyBnbG9iYWwgYm94IG1vZGVsIHNldHRpbmdcbkBtaXhpbiB1cGRhdGUtYm94LW1vZGVsKFxuICAkYm94XG4pIHtcbiAgQGlmICRib3ggIT0gc3VzeS1nZXQoZ2xvYmFsLWJveC1zaXppbmcpIHtcbiAgQGluY2x1ZGUgc3VzeS1zZXQoZ2xvYmFsLWJveC1zaXppbmcsICRib3gpO1xuICB9XG59XG4iLCIvLyBDb250ZXh0IFN5bnRheFxuLy8gPT09PT09PT09PT09PT1cblxuLy8gTmVzdGVkIFtmdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gYSBzdWJzZXQgZ3JpZCBmb3IgbmVzdGVkIGNvbnRleHQuXG4vLyAtICRjb250ZXh0ICAgOiA8c3Bhbj5cbkBmdW5jdGlvbiBuZXN0ZWQoXG4gICRjb250ZXh0XG4pIHtcbiAgJGNvbnRleHQgICAgOiBwYXJzZS1zcGFuKCRjb250ZXh0KTtcbiAgJHNwYW4gICAgICAgOiBzdXN5LWdldChzcGFuLCAkY29udGV4dCk7XG4gICRsb2NhdGlvbiAgIDogZ2V0LWxvY2F0aW9uKCRjb250ZXh0KTtcbiAgJGNvbHVtbnMgICAgOiBzdXN5LWdldChjb2x1bW5zLCAkY29udGV4dCk7XG5cbiAgQHJldHVybiBzdXN5LXNsaWNlKCRzcGFuLCAkbG9jYXRpb24sICRjb2x1bW5zKTtcbn1cblxuLy8gTmVzdGVkIFttaXhpbl1cbi8vIC0tLS0tLS0tLS0tLS0tXG4vLyBVc2UgYSBzdWJzZXQgZ3JpZCBmb3IgYSBuZXN0ZWQgY29udGV4dFxuLy8gLSAkY29udGV4dCAgIDogPHNwYW4+XG4vLyAtIEBjb250ZW50ICAgOiA8Y29udGVudD5cbkBtaXhpbiBuZXN0ZWQoXG4gICRjb250ZXh0XG4pIHtcbiAgJGluc3BlY3QgIDogJGNvbnRleHQ7XG4gICRjb250ZXh0ICA6IHBhcnNlLXNwYW4oJGNvbnRleHQpO1xuICAkb2xkICAgICAgOiBzdXN5LWdldChjb2x1bW5zKTtcbiAgJHN1c3kgICAgIDogbWFwLW1lcmdlKCRzdXN5LCAoY29sdW1uczogbmVzdGVkKCRjb250ZXh0KSkpICFnbG9iYWw7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KG5lc3RlZCwgJGluc3BlY3QpO1xuICBAY29udGVudDtcblxuICAkc3VzeSAgICAgOiBtYXAtbWVyZ2UoJHN1c3ksIChjb2x1bW5zOiAkb2xkKSkgIWdsb2JhbDtcbn1cbiIsIi8vIEJhY2tncm91bmQgR3JpZCBTeW50YXhcbi8vID09PT09PT09PT09PT09PT09PT09PT1cblxuJHN1c3ktb3ZlcmxheS1ncmlkLWhlYWQtZXhpc3RzOiBmYWxzZTtcblxuXG4vLyBTaG93IEdyaWQvc1xuLy8gLS0tLS0tLS0tLS1cbi8vIFNob3cgZ3JpZCBvbiBhbnkgZWxlbWVudCB1c2luZyBlaXRoZXIgYmFja2dyb3VuZCBvciBvdmVybGF5LlxuLy8gLSBbJGdyaWRdICA6IDxzZXR0aW5ncz5cbkBtaXhpbiBzaG93LWdyaWQoXG4gICRncmlkOiAkc3VzeVxuKSB7XG4gICRpbnNwZWN0OiAkZ3JpZDtcbiAgJF9vdXRwdXQ6IGRlYnVnLWdldChvdXRwdXQsICRncmlkKTtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3Qoc2hvdy1ncmlkLCAkaW5zcGVjdCk7XG4gIEBpZiAkX291dHB1dCA9PSBvdmVybGF5IGFuZCBzdXN5LWdldChkZWJ1ZyBpbWFnZSwgJGdyaWQpICE9IGhpZGUge1xuICAgIEBpbmNsdWRlIG92ZXJsYXktZ3JpZCgkZ3JpZCk7XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmQtZ3JpZCgkZ3JpZCk7XG4gIH1cbn1cblxuQG1peGluIHNob3ctZ3JpZHMoXG4gICRncmlkOiAkc3VzeVxuKSB7XG4gIEBpbmNsdWRlIHNob3ctZ3JpZCgkZ3JpZCk7XG59XG5cbi8vIEJhY2tncm91bmQgR3JpZFxuLy8gLS0tLS0tLS0tLS0tLS0tXG4vLyBTaG93IGEgZ3JpZCBiYWNrZ3JvdW5kIG9uIGFueSBlbGVtZW50LlxuLy8gLSBbJGdyaWRdICA6IDxzZXR0aW5ncz5cbkBtaXhpbiBiYWNrZ3JvdW5kLWdyaWQoXG4gICRncmlkOiAkc3VzeVxuKSB7XG4gICRpbnNwZWN0ICA6ICRncmlkO1xuICAkX291dHB1dCAgOiBnZXQtYmFja2dyb3VuZCgkZ3JpZCk7XG5cbiAgQGlmIGxlbmd0aCgkX291dHB1dCkgPiAwIHtcbiAgICAkX2Zsb3c6IHN1c3ktZ2V0KGZsb3csICRncmlkKTtcblxuICAgICRfaW1hZ2U6ICgpO1xuICAgIEBlYWNoICRuYW1lLCAkbGF5ZXIgaW4gbWFwLWdldCgkX291dHB1dCwgaW1hZ2UpIHtcbiAgICAgICRfZGlyZWN0aW9uOiBpZigkbmFtZSA9PSBiYXNlbGluZSwgdG8gYm90dG9tLCB0byB0bygkX2Zsb3cpKTtcbiAgICAgICRfaW1hZ2U6IGFwcGVuZCgkX2ltYWdlLCBsaW5lYXItZ3JhZGllbnQoJF9kaXJlY3Rpb24sICRsYXllciksIGNvbW1hKTtcbiAgICB9XG4gICAgJF9vdXRwdXQ6IG1hcC1tZXJnZSgkX291dHB1dCwgKGltYWdlOiAkX2ltYWdlKSk7XG5cbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLWdyaWQtb3V0cHV0KCRfb3V0cHV0Li4uKTtcbiAgICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoYmFja2dyb3VuZC1ncmlkLCAkaW5zcGVjdCk7XG4gIH1cbn1cblxuXG4vLyBPdmVybGF5IEdyaWRcbi8vIC0tLS0tLS0tLS0tLVxuLy8gR2VuZXJhdGUgYW4gaWNvbiB0byB0cmlnZ2VyIGdyaWQtb3ZlcmxheXMgb24gYW55IGdpdmVuIGVsZW1lbnRzLlxuLy8gJGdyaWRzLi4uICA6IDxzZWxlY3Rvcj4gWzxzZXR0aW5ncz5dIFssIDxzZWxlY3Rvcj5dKlxuQG1peGluIG92ZXJsYXktZ3JpZCAoXG4gICRncmlkOiAkc3VzeVxuKSB7XG4gIEBpZiBub3QoJHN1c3ktb3ZlcmxheS1ncmlkLWhlYWQtZXhpc3RzKSB7XG4gICAgQGF0LXJvb3QgaGVhZCB7IEBpbmNsdWRlIG92ZXJsYXktaGVhZCgkZ3JpZCk7IH1cbiAgICBAYXQtcm9vdCBoZWFkOmJlZm9yZSB7IEBpbmNsdWRlIG92ZXJsYXktdHJpZ2dlcjsgfVxuICAgIEBhdC1yb290IGhlYWQ6aG92ZXIgeyBAaW5jbHVkZSBvdmVybGF5LXRyaWdnZXItaG92ZXI7IH1cbiAgICAkc3VzeS1vdmVybGF5LWdyaWQtaGVhZC1leGlzdHM6IHRydWUgIWdsb2JhbDtcbiAgfVxuXG4gIGhlYWQ6aG92ZXIgfiAmLFxuICBoZWFkOmhvdmVyIH4gYm9keSAmIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgJjpiZWZvcmUge1xuICAgICAgQGluY2x1ZGUgZ3JpZC1vdmVybGF5LWJhc2U7XG4gICAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLWdyaWQoJGdyaWQpO1xuICAgIH1cbiAgfVxufVxuXG5cbi8vIFtQcml2YXRlXSBPdmVybGF5IFRyaWdnZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBtaXhpbiBvdmVybGF5LXRyaWdnZXIge1xuICBjb250ZW50OiBcInx8fFwiO1xuICBkaXNwbGF5OiBibG9jaztcbiAgcGFkZGluZzogNXB4IDEwcHg7XG4gIGZvbnQ6IHtcbiAgICBmYW1pbHk6IHNhbnMtc2VyaWY7XG4gICAgc2l6ZTogMTZweDtcbiAgICB3ZWlnaHQ6IGJvbGQ7XG4gIH1cbn1cblxuXG4vLyBbUHJpdmF0ZV0gT3ZlcmxheSBUcmlnZ2VyIEhvdmVyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AbWl4aW4gb3ZlcmxheS10cmlnZ2VyLWhvdmVyIHtcbiAgYmFja2dyb3VuZDogcmdiYSh3aGl0ZSwgLjUpO1xuICBjb2xvcjogcmVkO1xufVxuXG5cbi8vIFtQcml2YXRlXSBPdmVybGF5IEhlYWRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIDxoZWFkPiBzdHlsZXMgdG8gY3JlYXRlIGdyaWQgb3ZlcmxheSB0b2dnbGVcbkBtaXhpbiBvdmVybGF5LWhlYWQgKFxuICAkZ3JpZDogJHN1c3lcbikge1xuICAkX3RvZ2dsZTogZGVidWctZ2V0KHRvZ2dsZSwgJGdyaWQpO1xuICAkX2hvcno6IG51bGw7XG4gICRfdmVydDogbnVsbDtcblxuICBAZWFjaCAkc2lkZSBpbiAkX3RvZ2dsZSB7XG4gICAgJF9ob3J6OiBpZigkc2lkZSA9PSBsZWZ0IG9yICRzaWRlID09IHJpZ2h0LCAkc2lkZSwgJF9ob3J6KTtcbiAgICAkX3ZlcnQ6IGlmKCRzaWRlID09IHRvcCBvciAkc2lkZSA9PSBib3R0b20sICRzaWRlLCAkX3ZlcnQpO1xuICB9XG5cbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgI3skX2hvcnp9OiAxMHB4O1xuICAjeyRfdmVydH06IDEwcHg7XG4gIHotaW5kZXg6IDk5OTtcbiAgY29sb3I6ICMzMzM7XG4gIGJhY2tncm91bmQ6IHJnYmEod2hpdGUsIC4yNSk7XG59XG5cblxuLy8gW1ByaXZhdGVdIEdyaWQgT3ZlcmxheSBCYXNlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEJhc2Ugc3R5bGVzIGZvciBnZW5lcmF0aW5nIGEgZ3JpZCBvdmVybGF5XG5AbWl4aW4gZ3JpZC1vdmVybGF5LWJhc2UoKSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBib3R0b206IDA7XG4gIHJpZ2h0OiAwO1xuICBjb250ZW50OiBcIiBcIjtcbiAgei1pbmRleDogOTk4O1xufVxuXG5cbi8vIEdldCBTeW1tZXRyaWNhbCBCYWNrZ3JvdW5kXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLSAkZ3JpZDogPG1hcD5cbkBmdW5jdGlvbiBnZXQtYmFja2dyb3VuZC1zeW0oXG4gICRncmlkXG4pIHtcbiAgJGdyaWQgICAgICAgICAgIDogcGFyc2UtZ3JpZCgkZ3JpZCk7XG4gICRfZ3V0dGVycyAgICAgICA6IHN1c3ktZ2V0KGd1dHRlcnMsICRncmlkKTtcbiAgJF9jb2x1bW4td2lkdGggIDogc3VzeS1nZXQoY29sdW1uLXdpZHRoLCAkZ3JpZCk7XG4gICRfbWF0aCAgICAgICAgICA6IHN1c3ktZ2V0KG1hdGgsICRncmlkKTtcblxuICAkX2NvbG9yICAgICAgICAgOiBkZWJ1Zy1nZXQoY29sb3IpO1xuICAkX3RyYW5zICAgICAgICAgOiB0cmFuc3BhcmVudDtcbiAgJF9saWdodCAgICAgICAgIDogbGlnaHRlbigkX2NvbG9yLCAxNSUpO1xuXG4gICRfZW5kICAgICAgICAgICA6IDEgKyAkX2d1dHRlcnM7XG4gICRfYWZ0ZXIgICAgICAgICA6IHBlcmNlbnRhZ2UoMS8kX2VuZCk7XG4gICRfc3RvcHMgICAgICAgICA6ICgpO1xuICAkX3NpemUgICAgICAgICAgOiBzcGFuKDEgJGdyaWQgd2lkZSk7XG5cbiAgQGlmIGlzLWluc2lkZSgkZ3JpZCkge1xuICAgICRfc3RvcHM6ICRfY29sb3IsICRfbGlnaHQ7XG4gIH0gQGVsc2UgaWYgaXMtc3BsaXQoJGdyaWQpIHtcbiAgICAkX3NwbGl0OiAkX2d1dHRlcnMvMjtcbiAgICAkX2JlZm9yZTogcGVyY2VudGFnZSgkX3NwbGl0LyRfZW5kKTtcbiAgICAkX2FmdGVyOiBwZXJjZW50YWdlKCgxICsgJF9zcGxpdCkvJF9lbmQpO1xuICAgICRfc3RvcHM6ICRfdHJhbnMgJF9iZWZvcmUsICRfY29sb3IgJF9iZWZvcmUsICRfbGlnaHQgJF9hZnRlciwgJF90cmFucyAkX2FmdGVyO1xuICB9IEBlbHNlIHtcbiAgICAkX3N0b3BzOiAkX2NvbG9yLCAkX2xpZ2h0ICRfYWZ0ZXIsICRfdHJhbnMgJF9hZnRlcjtcbiAgfVxuXG4gIEBpZiAkX21hdGggPT0gc3RhdGljIHtcbiAgICAkX3NpemU6IHZhbGlkLWNvbHVtbi1tYXRoKCRfbWF0aCwgJF9jb2x1bW4td2lkdGgpICogJF9lbmQ7XG4gIH1cblxuICAkX291dHB1dDogKFxuICAgIGltYWdlOiAoY29sdW1uczogJF9zdG9wcyksXG4gICAgc2l6ZTogJF9zaXplLFxuICApO1xuXG4gIEByZXR1cm4gJF9vdXRwdXQ7XG59XG5cblxuLy8gR2V0IEFzeW1tZXRyaWNhbCBJbnNpZGVcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XG5AZnVuY3Rpb24gZ2V0LWFzeW0taW5zaWRlKFxuICAkZ3JpZFxuKSB7XG4gICRncmlkICAgICA6IHBhcnNlLWdyaWQoJGdyaWQpO1xuICAkX2NvbHVtbnMgOiBzdXN5LWdldChjb2x1bW5zLCAkZ3JpZCk7XG5cbiAgJF9jb2xvciAgIDogZGVidWctZ2V0KGNvbG9yKTtcbiAgJF9saWdodCAgIDogbGlnaHRlbigkX2NvbG9yLCAxNSUpO1xuICAkX3N0b3BzICAgOiAoKTtcblxuICBAZm9yICRsb2NhdGlvbiBmcm9tIDEgdGhyb3VnaCBzdXN5LWNvdW50KCRfY29sdW1ucykge1xuICAgICR0aGlzLXN0b3A6ICgpO1xuXG4gICAgQGlmICRsb2NhdGlvbiA9PSAxIHtcbiAgICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2NvbG9yLCBjb21tYSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkc3RhcnQ6IHBhcnNlLXNwYW4oMSBhdCAkbG9jYXRpb24gJGdyaWQpO1xuICAgICAgJHN0YXJ0OiBnZXQtaXNvbGF0aW9uKCRzdGFydCk7XG4gICAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9jb2xvciAkc3RhcnQsIGNvbW1hKTtcbiAgICB9XG5cbiAgICBAaWYgJGxvY2F0aW9uID09IHN1c3ktY291bnQoJF9jb2x1bW5zKSB7XG4gICAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9saWdodCwgY29tbWEpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJF9lbmQ6IHBhcnNlLXNwYW4oMSBhdCAoJGxvY2F0aW9uICsgMSkgJGdyaWQpO1xuICAgICAgJF9lbmQ6IGdldC1pc29sYXRpb24oJF9lbmQpO1xuICAgICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsICRfbGlnaHQgJF9lbmQsIGNvbW1hKTtcbiAgICB9XG5cbiAgICAkX3N0b3BzOiBqb2luKCRfc3RvcHMsICR0aGlzLXN0b3AsIGNvbW1hKTtcbiAgfVxuXG4gIEByZXR1cm4gJF9zdG9wcztcbn1cblxuXG4vLyBHZXQgQXN5bW1ldHJpY2FsIFNwbGl0XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XG5AZnVuY3Rpb24gZ2V0LWFzeW0tc3BsaXQoXG4gICRncmlkXG4pIHtcbiAgJGdyaWQgICAgIDogcGFyc2UtZ3JpZCgkZ3JpZCk7XG4gICRfY29sdW1ucyA6IHN1c3ktZ2V0KGNvbHVtbnMsICRncmlkKTtcblxuICAkX2NvbG9yICAgOiBkZWJ1Zy1nZXQoY29sb3IpO1xuICAkX2xpZ2h0ICAgOiBsaWdodGVuKCRfY29sb3IsIDE1JSk7XG4gICRfc3RvcHMgICA6ICgpO1xuXG4gIEBmb3IgJGxvY2F0aW9uIGZyb20gMSB0aHJvdWdoIHN1c3ktY291bnQoJF9jb2x1bW5zKSB7XG4gICAgJHRoaXMtc3RvcDogKCk7XG5cbiAgICAkc3RhcnQ6IHBhcnNlLXNwYW4oMSBhdCAkbG9jYXRpb24gJGdyaWQpO1xuICAgICRzdGFydDogZ2V0LWlzb2xhdGlvbigkc3RhcnQpO1xuICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCB0cmFuc3BhcmVudCAkc3RhcnQsIGNvbW1hKTtcbiAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9jb2xvciAkc3RhcnQsIGNvbW1hKTtcblxuICAgICRfZW5kOiAkc3RhcnQgKyBzcGFuKDEgYXQgJGxvY2F0aW9uICRncmlkKTtcbiAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9saWdodCAkX2VuZCwgY29tbWEpO1xuICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCB0cmFuc3BhcmVudCAkX2VuZCwgY29tbWEpO1xuXG4gICAgJF9zdG9wczogam9pbigkX3N0b3BzLCAkdGhpcy1zdG9wLCBjb21tYSk7XG4gIH1cblxuICBAcmV0dXJuICRfc3RvcHM7XG59XG5cblxuLy8gR2V0IEFzeW1tZXRyaWNhbCBPdXRzaWRlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gJGdyaWQ6IDxzZXR0aW5ncz5cbkBmdW5jdGlvbiBnZXQtYXN5bS1vdXRzaWRlKFxuICAkZ3JpZFxuKSB7XG4gICRncmlkICAgICA6IHBhcnNlLWdyaWQoJGdyaWQpO1xuICAkX2NvbHVtbnMgOiBzdXN5LWdldChjb2x1bW5zLCAkZ3JpZCk7XG5cbiAgJF9jb2xvciAgIDogZGVidWctZ2V0KGNvbG9yKTtcbiAgJF9saWdodCAgIDogbGlnaHRlbigkX2NvbG9yLCAxNSUpO1xuICAkX3RyYW5zICAgOiB0cmFuc3BhcmVudDtcbiAgJF9zdG9wcyAgIDogKCk7XG5cbiAgQGZvciAkbG9jYXRpb24gZnJvbSAxIHRocm91Z2ggc3VzeS1jb3VudCgkX2NvbHVtbnMpIHtcbiAgICAkdGhpcy1zdG9wOiAoKTtcblxuICAgIEBpZiAkbG9jYXRpb24gPT0gMSB7XG4gICAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9jb2xvciwgY29tbWEpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJHN0YXJ0OiBwYXJzZS1zcGFuKDEgYXQgJGxvY2F0aW9uICRncmlkKTtcbiAgICAgICRzdGFydDogZ2V0LWlzb2xhdGlvbigkc3RhcnQpO1xuICAgICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsICRfY29sb3IgJHN0YXJ0LCBjb21tYSk7XG4gICAgfVxuXG4gICAgQGlmICRsb2NhdGlvbiA9PSBzdXN5LWNvdW50KCRfY29sdW1ucykge1xuICAgICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsICRfbGlnaHQsIGNvbW1hKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRndXR0ZXI6IGdldC1zcGFuLXdpZHRoKGZpcnN0ICRsb2NhdGlvbiAkZ3JpZCk7XG5cbiAgICAgICRfZW5kOiBwYXJzZS1zcGFuKDEgYXQgKCRsb2NhdGlvbiArIDEpICRncmlkKTtcbiAgICAgICRfZW5kOiBnZXQtaXNvbGF0aW9uKCRfZW5kKTtcblxuICAgICAgJGd1dHRlcjogJF9saWdodCAkZ3V0dGVyLCAkX3RyYW5zICRndXR0ZXIsICRfdHJhbnMgJF9lbmQ7XG4gICAgICAkdGhpcy1zdG9wOiBqb2luKCR0aGlzLXN0b3AsICRndXR0ZXIsIGNvbW1hKTtcbiAgICB9XG5cbiAgICAkX3N0b3BzOiBqb2luKCRfc3RvcHMsICR0aGlzLXN0b3AsIGNvbW1hKTtcbiAgfVxuXG4gIEByZXR1cm4gJF9zdG9wcztcbn1cblxuXG4vLyBHZXQgQXN5bW1ldHJpY2FsIEJhY2tncm91bmRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLSAkZ3JpZDogPHNldHRpbmdzPlxuQGZ1bmN0aW9uIGdldC1iYWNrZ3JvdW5kLWFzeW0oXG4gICRncmlkXG4pIHtcbiAgJF9zdG9wczogKCk7XG5cbiAgQGlmIGlzLWluc2lkZSgkZ3JpZCkge1xuICAgICRfc3RvcHM6IGdldC1hc3ltLWluc2lkZSgkZ3JpZCk7XG4gIH0gQGVsc2UgaWYgaXMtc3BsaXQoJGdyaWQpIHtcbiAgICAkX3N0b3BzOiBnZXQtYXN5bS1zcGxpdCgkZ3JpZCk7XG4gIH0gQGVsc2Uge1xuICAgICRfc3RvcHM6IGdldC1hc3ltLW91dHNpZGUoJGdyaWQpO1xuICB9XG5cbiAgQHJldHVybiAoaW1hZ2U6IChjb2x1bW5zOiAkX3N0b3BzKSk7XG59XG5cblxuLy8gR2V0IEJhY2tncm91bmRcbi8vIC0tLS0tLS0tLS0tLS0tXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XG5AZnVuY3Rpb24gZ2V0LWJhY2tncm91bmQoXG4gICRncmlkXG4pIHtcbiAgJGdyaWQgICAgIDogcGFyc2UtZ3JpZCgkZ3JpZCk7XG4gICRfc2hvdyAgICA6IHN1c3ktZ2V0KGRlYnVnIGltYWdlLCAkZ3JpZCk7XG4gICRfcmV0dXJuICA6ICgpO1xuXG4gIEBpZiAkX3Nob3cgYW5kICRfc2hvdyAhPSAnaGlkZScge1xuICAgICRfY29sdW1uczogc3VzeS1nZXQoY29sdW1ucywgJGdyaWQpO1xuXG4gICAgQGlmICRfc2hvdyAhPSAnc2hvdy1iYXNlbGluZScge1xuICAgICAgJF9zeW06IGlzLXN5bW1ldHJpY2FsKCRfY29sdW1ucyk7XG4gICAgICAkX3JldHVybjogaWYoJF9zeW0sIGdldC1iYWNrZ3JvdW5kLXN5bSgkZ3JpZCksIGdldC1iYWNrZ3JvdW5kLWFzeW0oJGdyaWQpKTtcbiAgICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sIChjbGlwOiBjb250ZW50LWJveCkpO1xuICAgIH1cblxuICAgIEBpZiAkX3Nob3cgIT0gJ3Nob3ctY29sdW1ucydcbiAgICAgIGFuZCBnbG9iYWwtdmFyaWFibGUtZXhpc3RzKGJhc2UtbGluZS1oZWlnaHQpXG4gICAgICBhbmQgdHlwZS1vZigkYmFzZS1saW5lLWhlaWdodCkgPT0gJ251bWJlcidcbiAgICAgIGFuZCBub3QgdW5pdGxlc3MoJGJhc2UtbGluZS1oZWlnaHQpIHtcbiAgICAgICRfY29sb3I6IHZhcmlhYmxlLWV4aXN0cygnZ3JpZC1iYWNrZ3JvdW5kLWJhc2VsaW5lLWNvbG9yJyk7XG4gICAgICAkX2NvbG9yOiBpZigkX2NvbG9yLCAkZ3JpZC1iYWNrZ3JvdW5kLWJhc2VsaW5lLWNvbG9yLCAjMDAwKTtcblxuICAgICAgJF9pbWFnZTogbWFwLWdldCgkX3JldHVybiwgaW1hZ2UpO1xuICAgICAgJF9zaXplOiBtYXAtZ2V0KCRfcmV0dXJuLCBzaXplKTtcbiAgICAgICRfYmFzZWxpbmU6IChiYXNlbGluZTogKCRfY29sb3IgMXB4LCB0cmFuc3BhcmVudCAxcHgpKTtcbiAgICAgICRfYmFzZWxpbmUtc2l6ZTogMTAwJSAkYmFzZS1saW5lLWhlaWdodDtcblxuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKFxuICAgICAgICBpbWFnZTogaWYoJF9pbWFnZSwgbWFwLW1lcmdlKCRfaW1hZ2UsICRfYmFzZWxpbmUpLCAkX2Jhc2VsaW5lKSxcbiAgICAgICAgc2l6ZTogaWYoJF9zaXplLCAoJF9zaXplLCAkX2Jhc2VsaW5lLXNpemUpLCAkX2Jhc2VsaW5lLXNpemUpLFxuICAgICAgKSk7XG5cbiAgICAgIEBpZiAkX3Nob3cgPT0gJ3Nob3cnIHtcbiAgICAgICAgJF9jbGlwOiBtYXAtZ2V0KCRfcmV0dXJuLCBjbGlwKTtcbiAgICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKGNsaXA6IGpvaW4oJF9jbGlwLCBib3JkZXItYm94LCBjb21tYSkpKTtcbiAgICAgIH1cbiAgICB9IEBlbHNlIGlmICRfc2hvdyA9PSAnc2hvdy1iYXNlbGluZScge1xuICAgICAgQHdhcm4gJ1BsZWFzZSBwcm92aWRlIGEgJGJhc2UtbGluZS1oZWlnaHQgd2l0aCB0aGUgZGVzaXJlZCBoZWlnaHQgYW5kIHVuaXRzJztcbiAgICB9XG4gIH1cblxuICBAaWYgbWFwLWdldCgkX3JldHVybiwgaW1hZ2UpIHtcbiAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAoZmxvdzogc3VzeS1nZXQoZmxvdywgJGdyaWQpKSk7XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuXG5cbi8vIEdldCBEZWJ1Z1xuLy8gLS0tLS0tLS0tXG4vLyBSZXR1cm4gdGhlIHZhbHVlIG9mIGEgZGVidWcgc2V0dGluZ1xuLy8gLSAka2V5OiA8c2V0dGluZz5cbkBmdW5jdGlvbiBkZWJ1Zy1nZXQoXG4gICRrZXksXG4gICRncmlkOiAkc3VzeVxuKSB7XG4gICRrZXk6IGpvaW4oZGVidWcsICRrZXksIHNwYWNlKTtcbiAgQHJldHVybiBzdXN5LWdldCgka2V5LCAkZ3JpZCk7XG59XG4iLCIvLyBDb250YWluZXIgU3ludGF4XG4vLyA9PT09PT09PT09PT09PT09XG5cbi8vIENvbnRhaW5lciBbbWl4aW5dXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxuLy8gU2V0IGEgY29udGFpbmVyIGVsZW1lbnRcbi8vIC0gWyRsYXlvdXRdICA6IDxzZXR0aW5ncz5cbkBtaXhpbiBjb250YWluZXIoXG4gICRsYXlvdXQ6ICRzdXN5XG4pIHtcbiAgJGluc3BlY3QgICAgOiAkbGF5b3V0O1xuICAkbGF5b3V0ICAgICA6IHBhcnNlLWdyaWQoJGxheW91dCk7XG5cbiAgJF93aWR0aCAgICAgOiBnZXQtY29udGFpbmVyLXdpZHRoKCRsYXlvdXQpO1xuICAkX2p1c3RpZnkgICA6IHBhcnNlLWNvbnRhaW5lci1wb3NpdGlvbihzdXN5LWdldChjb250YWluZXItcG9zaXRpb24sICRsYXlvdXQpKTtcbiAgJF9wcm9wZXJ0eSAgOiBpZihzdXN5LWdldChtYXRoLCAkbGF5b3V0KSA9PSBzdGF0aWMsIHdpZHRoLCBtYXgtd2lkdGgpO1xuXG4gICRfYm94ICAgICAgIDogc3VzeS1nZXQoYm94LXNpemluZywgJGxheW91dCk7XG5cbiAgQGlmICRfYm94IHtcbiAgICBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6ICRfYm94KSk7XG4gIH1cblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoY29udGFpbmVyLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIGZsb2F0LWNvbnRhaW5lcigkX3dpZHRoLCAkX2p1c3RpZnksICRfcHJvcGVydHkpO1xuICBAaW5jbHVkZSBzaG93LWdyaWQoJGxheW91dCk7XG59XG5cbi8vIENvbnRhaW5lciBbZnVuY3Rpb25dXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIGNvbnRhaW5lciB3aWR0aFxuLy8gLSBbJGxheW91dF0gIDogPHNldHRpbmdzPlxuQGZ1bmN0aW9uIGNvbnRhaW5lcihcbiAgJGxheW91dDogJHN1c3lcbikge1xuICAkbGF5b3V0OiBwYXJzZS1ncmlkKCRsYXlvdXQpO1xuICBAcmV0dXJuIGdldC1jb250YWluZXItd2lkdGgoJGxheW91dCk7XG59XG5cbi8vIEdldCBDb250YWluZXIgV2lkdGhcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENhbGN1bGF0ZSB0aGUgY29udGFpbmVyIHdpZHRoXG4vLyAtIFskbGF5b3V0XTogPHNldHRpbmdzPlxuQGZ1bmN0aW9uIGdldC1jb250YWluZXItd2lkdGgoXG4gICRsYXlvdXQ6ICRzdXN5XG4pIHtcbiAgJGxheW91dCAgICAgICAgIDogcGFyc2UtZ3JpZCgkbGF5b3V0KTtcbiAgJF93aWR0aCAgICAgICAgIDogc3VzeS1nZXQoY29udGFpbmVyLCAkbGF5b3V0KTtcbiAgJF9jb2x1bW4td2lkdGggIDogc3VzeS1nZXQoY29sdW1uLXdpZHRoLCAkbGF5b3V0KTtcbiAgJF9tYXRoICAgICAgICAgIDogc3VzeS1nZXQobWF0aCwgJGxheW91dCk7XG5cbiAgQGlmIG5vdCgkX3dpZHRoKSBvciAkX3dpZHRoID09IGF1dG8ge1xuICAgIEBpZiB2YWxpZC1jb2x1bW4tbWF0aCgkX21hdGgsICRfY29sdW1uLXdpZHRoKSB7XG4gICAgICAkX2NvbHVtbnMgICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRsYXlvdXQpO1xuICAgICAgJF9ndXR0ZXJzICAgOiBzdXN5LWdldChndXR0ZXJzLCAkbGF5b3V0KTtcbiAgICAgICRfc3ByZWFkICAgIDogaWYoaXMtc3BsaXQoJGxheW91dCksIHdpZGUsIG5hcnJvdyk7XG4gICAgICAkX3dpZHRoICAgICA6IHN1c3ktc3VtKCRfY29sdW1ucywgJF9ndXR0ZXJzLCAkX3NwcmVhZCkgKiAkX2NvbHVtbi13aWR0aDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRfd2lkdGg6IDEwMCU7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkX3dpZHRoO1xufVxuXG4vLyBQYXJzZSBDb250YWluZXIgUG9zaXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUGFyc2UgdGhlICRjb250YWluZXItcG9zaXRpb24gaW50byBtYXJnaW4gdmFsdWVzLlxuLy8gLSBbJGp1c3RpZnldICAgOiBsZWZ0IHwgY2VudGVyIHwgcmlnaHQgfCA8bGVuZ3RoPiBbPGxlbmd0aD5dXG5AZnVuY3Rpb24gcGFyc2UtY29udGFpbmVyLXBvc2l0aW9uKFxuICAkanVzdGlmeTogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgY29udGFpbmVyLXBvc2l0aW9uKVxuKSB7XG4gICRfcmV0dXJuOiBpZigkanVzdGlmeSA9PSBsZWZ0LCAwLCBhdXRvKSBpZigkanVzdGlmeSA9PSByaWdodCwgMCwgYXV0byk7XG5cbiAgQGlmIG5vdChpbmRleChsZWZ0IHJpZ2h0IGNlbnRlciwgJGp1c3RpZnkpKSB7XG4gICAgJF9yZXR1cm46IG50aCgkanVzdGlmeSwgMSk7XG4gICAgJF9yZXR1cm46ICRfcmV0dXJuIGlmKGxlbmd0aCgkanVzdGlmeSkgPiAxLCBudGgoJGp1c3RpZnksIDIpLCAkX3JldHVybik7XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuIiwiLy8gU3BhbiBTeW50YXhcbi8vID09PT09PT09PT09XG5cbi8vIFNwYW4gW21peGluXVxuLy8gLS0tLS0tLS0tLS0tXG4vLyBTZXQgYSBzcGFubmluZyBlbGVtZW50IHVzaW5nIHNob3J0aGFuZCBzeW50YXguXG4vLyAtICRzcGFuICA6IDxzcGFuPlxuQG1peGluIHNwYW4oXG4gICRzcGFuXG4pIHtcbiAgJGluc3BlY3Q6ICRzcGFuO1xuICAkc3BhbjogcGFyc2Utc3Bhbigkc3Bhbik7XG4gICRvdXRwdXQ6IHNwYW4tbWF0aCgkc3Bhbik7XG4gICRuZXN0aW5nOiBzdXN5LWdldChzcGFuLCAkc3Bhbik7XG4gICRjbGVhcjogc3VzeS1nZXQoY2xlYXIsICRzcGFuKTtcblxuICAkYm94OiBzdXN5LWdldChib3gtc2l6aW5nLCAkc3Bhbik7XG4gICRjb250ZW50LWJveDogaWYoc3VzeS1nZXQoZ2xvYmFsLWJveC1zaXppbmcpICE9ICdib3JkZXItYm94JywgdHJ1ZSwgZmFsc2UpO1xuICAkYm94OiAkYm94IG9yIGlmKGlzLWluc2lkZSgkc3BhbikgYW5kICRjb250ZW50LWJveCwgYm9yZGVyLWJveCwgbnVsbCk7XG5cbiAgQGlmICRjbGVhciA9PSBicmVhayB7XG4gICAgQGluY2x1ZGUgYnJlYWs7XG4gIH0gQGVsc2UgaWYgJGNsZWFyID09IG5vYnJlYWsge1xuICAgIEBpbmNsdWRlIG5vYnJlYWs7XG4gIH1cblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3Qoc3BhbiwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6ICRib3gpKTtcbiAgQGluY2x1ZGUgZmxvYXQtc3Bhbi1vdXRwdXQoJG91dHB1dC4uLik7XG5cbiAgQGlmIHZhbGlkLWNvbHVtbnMoJG5lc3RpbmcsIHNpbGVudCkge1xuICAgIEBpbmNsdWRlIG5lc3RlZCgkc3BhbikgeyBAY29udGVudDsgfVxuICB9IEBlbHNlIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyBTcGFuIFtmdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHRoZSB3aWR0aCBvZiBhIHNwYW4uXG4vLyAtICRzcGFuICA6IDxzcGFuPlxuQGZ1bmN0aW9uIHNwYW4oXG4gICRzcGFuXG4pIHtcbiAgQHJldHVybiBnZXQtc3Bhbi13aWR0aCgkc3Bhbik7XG59XG5cbi8vIFNwYW4gTWF0aFxuLy8gLS0tLS0tLS0tXG4vLyBHZXQgYWxsIHRoZSBzcGFuIHJlc3VsdHMuXG4vLyAtICRzcGFuOiA8bWFwPlxuQGZ1bmN0aW9uIHNwYW4tbWF0aChcbiAgJHNwYW5cbikge1xuICAkbmVzdCAgICAgICAgICAgICA6IGlmKHN1c3ktZ2V0KHJvbGUsICRzcGFuKSA9PSBuZXN0LCB0cnVlLCBmYWxzZSk7XG4gICRzcGxpdC1uZXN0ICAgICAgIDogaWYoaXMtc3BsaXQoJHNwYW4pIGFuZCAkbmVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAkZWRnZSAgICAgICAgICAgICA6IGdldC1lZGdlKCRzcGFuKTtcbiAgJGxvY2F0aW9uICAgICAgICAgOiBnZXQtbG9jYXRpb24oJHNwYW4pO1xuXG4gICRmbG9hdCAgICAgICAgICAgIDogZnJvbTtcbiAgJHBhZGRpbmctYmVmb3JlICAgOiBudWxsO1xuICAkcGFkZGluZy1hZnRlciAgICA6IG51bGw7XG4gICRtYXJnaW4tYmVmb3JlICAgIDogbnVsbDtcbiAgJG1hcmdpbi1hZnRlciAgICAgOiBudWxsO1xuXG4gIC8vIGNhbGN1bGF0ZSB3aWR0aHNcbiAgJHNwcmVhZDogaW5kZXgobWFwLXZhbHVlcygkc3BhbiksIHNwcmVhZCk7XG4gICRzcGFuOiBpZigkc3BsaXQtbmVzdCBhbmQgbm90KCRzcHJlYWQpLCBtYXAtbWVyZ2UoJHNwYW4sIChzcHJlYWQ6IHdpZGUpKSwgJHNwYW4pO1xuICAkd2lkdGg6IGdldC1zcGFuLXdpZHRoKCRzcGFuKTtcbiAgJGd1dHRlcnM6IGdldC1ndXR0ZXJzKCRzcGFuKTtcblxuICAvLyBhcHBseSBndXR0ZXJzXG4gIEBpZiBpcy1pbnNpZGUoJHNwYW4pIHtcbiAgICBAaWYgbm90KHN1c3ktZ2V0KHJvbGUsICRzcGFuKSkge1xuICAgICAgJHBhZGRpbmctYmVmb3JlOiBtYXAtZ2V0KCRndXR0ZXJzLCBiZWZvcmUpO1xuICAgICAgJHBhZGRpbmctYWZ0ZXI6IG1hcC1nZXQoJGd1dHRlcnMsIGFmdGVyKTtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpZiBub3QoJHNwbGl0LW5lc3QpIHtcbiAgICAgICRtYXJnaW4tYmVmb3JlOiBtYXAtZ2V0KCRndXR0ZXJzLCBiZWZvcmUpO1xuICAgICAgJG1hcmdpbi1hZnRlcjogbWFwLWdldCgkZ3V0dGVycywgYWZ0ZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNwZWNpYWwgbWFyZ2luIGhhbmRsaW5nXG4gIEBpZiBzdXN5LWdldChvdXRwdXQsICRzcGFuKSA9PSBpc29sYXRlIGFuZCAkbG9jYXRpb24ge1xuICAgICRtYXJnaW4tYmVmb3JlOiBnZXQtaXNvbGF0aW9uKCRzcGFuKTtcbiAgICAkbWFyZ2luLWFmdGVyOiAtMTAwJTtcbiAgfSBAZWxzZSBpZiAkZWRnZSB7XG4gICAgJGlzLXNwbGl0OiBpcy1zcGxpdCgkc3Bhbik7XG4gICAgJHBvczogc3VzeS1nZXQoZ3V0dGVyLXBvc2l0aW9uLCAkc3Bhbik7XG5cbiAgICBAaWYgJGVkZ2UgPT0gbGFzdCB7XG4gICAgICAkZmxvYXQ6IHN1c3ktZ2V0KGxhc3QtZmxvdywgJHNwYW4pO1xuICAgIH1cblxuICAgIEBpZiBub3QoJGlzLXNwbGl0KSB7XG4gICAgICBAaWYgJGVkZ2UgPT0gZnVsbCBvciAoJGVkZ2UgPT0gZmlyc3QgYW5kICRwb3MgPT0gYmVmb3JlKSB7XG4gICAgICAgICRtYXJnaW4tYmVmb3JlOiAwO1xuICAgICAgfVxuICAgICAgQGlmICRlZGdlID09IGZ1bGwgb3IgKCRlZGdlID09IGxhc3QgYW5kICRwb3MgPT0gYWZ0ZXIpIHtcbiAgICAgICAgJG1hcmdpbi1hZnRlcjogMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIEByZXR1cm4gKFxuICAgIHdpZHRoICAgICAgICAgICA6ICR3aWR0aCxcbiAgICBmbG9hdCAgICAgICAgICAgOiAkZmxvYXQsXG4gICAgbWFyZ2luLWJlZm9yZSAgIDogJG1hcmdpbi1iZWZvcmUsXG4gICAgbWFyZ2luLWFmdGVyICAgIDogJG1hcmdpbi1hZnRlcixcbiAgICBwYWRkaW5nLWJlZm9yZSAgOiAkcGFkZGluZy1iZWZvcmUsXG4gICAgcGFkZGluZy1hZnRlciAgIDogJHBhZGRpbmctYWZ0ZXIsXG4gICAgZmxvdyAgICAgICAgICAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pLFxuICApO1xufVxuXG4vLyBHZXQgU3BhbiBXaWR0aFxuLy8gLS0tLS0tLS0tLS0tLS1cbi8vIFJldHVybiBzcGFuIHdpZHRoLlxuLy8gLSAkc3BhbjogPG1hcD5cbkBmdW5jdGlvbiBnZXQtc3Bhbi13aWR0aChcbiAgJHNwYW5cbikge1xuICAkc3BhbiAgICAgOiBwYXJzZS1zcGFuKCRzcGFuKTtcblxuICAkbiAgICAgICAgOiBzdXN5LWdldChzcGFuLCAkc3Bhbik7XG4gICRsb2NhdGlvbiA6IGdldC1sb2NhdGlvbigkc3Bhbik7XG4gICRjb2x1bW5zICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRzcGFuKTtcbiAgJGd1dHRlcnMgIDogc3VzeS1nZXQoZ3V0dGVycywgJHNwYW4pO1xuICAkc3ByZWFkICAgOiBzdXN5LWdldChzcHJlYWQsICRzcGFuKTtcblxuICAkY29udGV4dCAgOiBudWxsO1xuICAkc3Bhbi1zdW0gOiBudWxsO1xuICAkd2lkdGggICAgOiBudWxsO1xuXG4gIEBpZiAkbiA9PSAnZnVsbCcge1xuICAgICRwb3M6IHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJHNwYW4pO1xuICAgICRyb2xlOiBzdXN5LWdldChyb2xlLCAkc3Bhbik7XG4gICAgJG46IGlmKCRwb3MgPT0gc3BsaXQgYW5kICRyb2xlICE9IG5lc3QsIHN1c3ktY291bnQoJGNvbHVtbnMpLCAxMDAlKTtcbiAgfVxuXG4gIEBpZiB0eXBlLW9mKCRuKSAhPSBudW1iZXIge1xuICAgIEB3YXJuIFwiKCN7dHlwZS1vZigkbil9KSAjeyRufSBpcyBub3QgYSB2YWxpZCBzcGFuLlwiO1xuICB9IEBlbHNlIGlmIHVuaXRsZXNzKCRuKSB7XG4gICAgJGNvbnRleHQ6IHN1c3ktc3VtKCRjb2x1bW5zLCAkZ3V0dGVycywgaWYoaXMtc3BsaXQoJHNwYW4pLCB3aWRlLCBuYXJyb3cpKTtcbiAgICAkc3ByZWFkOiBpZihpcy1pbnNpZGUoJHNwYW4pLCAkc3ByZWFkIG9yIHdpZGUsICRzcHJlYWQpO1xuICAgICRzcGFuLXN1bTogc3VzeSgkbiwgJGxvY2F0aW9uLCAkY29sdW1ucywgJGd1dHRlcnMsICRzcHJlYWQpO1xuXG4gICAgJF9tYXRoOiBzdXN5LWdldChtYXRoLCAkc3Bhbik7XG4gICAgJF9jb2x1bW4td2lkdGg6IHN1c3ktZ2V0KGNvbHVtbi13aWR0aCwgJHNwYW4pO1xuICAgIEBpZiAkX21hdGggPT0gc3RhdGljIHtcbiAgICAgICR3aWR0aDogJHNwYW4tc3VtICogdmFsaWQtY29sdW1uLW1hdGgoJF9tYXRoLCAkX2NvbHVtbi13aWR0aCk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkd2lkdGg6IHBlcmNlbnRhZ2UoJHNwYW4tc3VtIC8gJGNvbnRleHQpO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgJHdpZHRoOiAkbjtcbiAgfVxuXG4gIEByZXR1cm4gJHdpZHRoO1xufVxuIiwiLy8gR3V0dGVyIFN5bnRheFxuLy8gPT09PT09PT09PT09PVxuXG5cbi8vIEd1dHRlcnNcbi8vIC0tLS0tLS1cbi8vIFNldCBndXR0ZXJzIG9uIGFuIGVsZW1lbnQuXG4vLyAtIFskc3Bhbl0gICA6IDxzZXR0aW5ncz5cbkBtaXhpbiBndXR0ZXJzKFxuICAkc3BhbjogJHN1c3lcbikge1xuICAkaW5zcGVjdCAgOiAkc3BhbjtcbiAgJHNwYW4gICAgIDogcGFyc2UtZ3V0dGVycygkc3Bhbik7XG4gICRfZ3V0dGVycyA6IGdldC1ndXR0ZXJzKCRzcGFuKTtcblxuICAkX291dHB1dDogKFxuICAgIGJlZm9yZTogbWFwLWdldCgkX2d1dHRlcnMsIGJlZm9yZSksXG4gICAgYWZ0ZXI6IG1hcC1nZXQoJF9ndXR0ZXJzLCBhZnRlciksXG4gICAgZmxvdzogc3VzeS1nZXQoZmxvdywgJHNwYW4pLFxuICApO1xuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChndXR0ZXJzLCAkaW5zcGVjdCk7XG5cbiAgQGlmIGlzLWluc2lkZSgkc3Bhbikge1xuICAgIEBpbmNsdWRlIHBhZGRpbmctb3V0cHV0KCRfb3V0cHV0Li4uKTtcbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgbWFyZ2luLW91dHB1dCgkX291dHB1dC4uLik7XG4gIH1cbn1cblxuQG1peGluIGd1dHRlcihcbiAgJHNwYW46ICRzdXN5XG4pIHtcbiAgQGluY2x1ZGUgZ3V0dGVycygkc3Bhbik7XG59XG5cblxuLy8gR3V0dGVyXG4vLyAtLS0tLS1cbi8vIFJldHVybiB0aGUgd2lkdGggb2YgYSBndXR0ZXIuXG4vLyAtIFskc3Bhbl0gICA6IDxzZXR0aW5ncz5cbkBmdW5jdGlvbiBndXR0ZXIoXG4gICRzcGFuOiAkc3VzeVxuKSB7XG4gICRzcGFuOiBwYXJzZS1ndXR0ZXJzKCRzcGFuKTtcblxuICAkX2d1dHRlcnM6IGdldC1ndXR0ZXJzKCRzcGFuKTtcbiAgJF9ndXR0ZXJzOiBtYXAtZ2V0KCRfZ3V0dGVycywgYmVmb3JlKSBvciBtYXAtZ2V0KCRfZ3V0dGVycywgYWZ0ZXIpO1xuXG4gIEByZXR1cm4gJF9ndXR0ZXJzO1xufVxuXG5AZnVuY3Rpb24gZ3V0dGVycyhcbiAgJHNwYW46ICRzdXN5XG4pIHtcbiAgQHJldHVybiBndXR0ZXIoJHNwYW4pO1xufVxuXG5cbi8vIEdldCBHdXR0ZXIgV2lkdGhcbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIFJldHVybiBndXR0ZXIgd2lkdGguXG4vLyAtIFskY29udGV4dF06IDxjb250ZXh0PlxuQGZ1bmN0aW9uIGdldC1ndXR0ZXItd2lkdGgoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gICRjb250ZXh0ICA6IHBhcnNlLWd1dHRlcnMoJGNvbnRleHQpO1xuXG4gICRfZ3V0dGVycyA6IHN1c3ktZ2V0KGd1dHRlcnMsICRjb250ZXh0KTtcbiAgJF9ndXR0ZXIgIDogc3VzeS1nZXQoZ3V0dGVyLW92ZXJyaWRlLCAkY29udGV4dCk7XG5cbiAgQGlmICRfZ3V0dGVycyBhbmQgKCRfZ3V0dGVycyA+IDApIGFuZCBub3QoJF9ndXR0ZXIpIHtcbiAgICAkX2NvbHVtbi13aWR0aDogc3VzeS1nZXQoY29sdW1uLXdpZHRoLCAkY29udGV4dCk7XG4gICAgJF9tYXRoOiBndXR0ZXItbWF0aCgkY29udGV4dCk7XG4gICAgQGlmICRfbWF0aCA9PSBzdGF0aWMge1xuICAgICAgJF9ndXR0ZXI6ICRfZ3V0dGVycyAqIHZhbGlkLWNvbHVtbi1tYXRoKCRfbWF0aCwgJF9jb2x1bW4td2lkdGgpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJF9jb2x1bW5zIDogc3VzeS1nZXQoY29sdW1ucywgJGNvbnRleHQpO1xuICAgICAgJF9zcHJlYWQgIDogaWYoaXMtc3BsaXQoJGNvbnRleHQpLCB3aWRlLCBzdXN5LWdldChzcHJlYWQsICRjb250ZXh0KSk7XG4gICAgICAkX2d1dHRlciAgOiBwZXJjZW50YWdlKCRfZ3V0dGVycyAvIHN1c3ktc3VtKCRfY29sdW1ucywgJF9ndXR0ZXJzLCAkX3NwcmVhZCkpO1xuICAgIH1cbiAgfVxuXG4gICRfZ3V0dGVyOiBpZigkX2d1dHRlciA9PSAnbm8tZ3V0dGVycycgb3IgJF9ndXR0ZXIgPT0gJ25vLWd1dHRlcicsIG51bGwsICRfZ3V0dGVyKTtcblxuICBAcmV0dXJuICRfZ3V0dGVyO1xufVxuXG5cbi8vIEdldCBHdXR0ZXJzXG4vLyAtLS0tLS0tLS0tLVxuLy8gUmV0dXJuIGJlZm9yZSBhbmQgYWZ0ZXIgZ3V0dGVyIHZhbHVlcy5cbi8vIC0gWyRjb250ZXh0XTogPGNvbnRleHQ+XG5AZnVuY3Rpb24gZ2V0LWd1dHRlcnMoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gICRjb250ZXh0ICAgICAgICAgICAgOiBwYXJzZS1ndXR0ZXJzKCRjb250ZXh0KTtcblxuICAkX2d1dHRlci1wb3NpdGlvbiAgIDogc3VzeS1nZXQoZ3V0dGVyLXBvc2l0aW9uLCAkY29udGV4dCk7XG4gICRfZ3V0dGVyICAgICAgICAgICAgOiBnZXQtZ3V0dGVyLXdpZHRoKCRjb250ZXh0KTtcblxuICAkX3JldHVybiAgICAgICAgICAgIDogKGJlZm9yZTogbnVsbCwgYWZ0ZXI6IG51bGwpO1xuXG4gIEBpZiBpcy1zcGxpdCgkY29udGV4dCkgYW5kICRfZ3V0dGVyIHtcbiAgICAkX2d1dHRlcjogJF9ndXR0ZXIgLyAyO1xuICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sIChiZWZvcmU6ICRfZ3V0dGVyLCBhZnRlcjogJF9ndXR0ZXIpKTtcbiAgfSBAZWxzZSB7XG4gICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKCRfZ3V0dGVyLXBvc2l0aW9uOiAkX2d1dHRlcikpO1xuICB9XG5cbiAgQHJldHVybiAkX3JldHVybjtcbn1cblxuXG4vLyBJcyBJbnNpZGVcbi8vIC0tLS0tLS0tLVxuLy8gUmV0dXJucyB0cnVlIGlmIGd1dHRlcnMgYXJlIGluc2lkZS5cbi8vICRjb250ZXh0OiA8Y29udGV4dD5cbkBmdW5jdGlvbiBpcy1pbnNpZGUoXG4gICRjb250ZXh0XG4pIHtcbiAgJF9pbnNpZGU6IGluc2lkZSBpbnNpZGUtc3RhdGljO1xuICAkX2d1dHRlci1wb3NpdGlvbjogc3VzeS1nZXQoZ3V0dGVyLXBvc2l0aW9uLCAkY29udGV4dCk7XG5cbiAgQHJldHVybiBpZihpbmRleCgkX2luc2lkZSwgJF9ndXR0ZXItcG9zaXRpb24pLCB0cnVlLCBmYWxzZSk7XG59XG5cblxuLy8gSXMgU3BsaXRcbi8vIC0tLS0tLS0tXG4vLyBSZXR1cm5zIHRydWUgaWYgZ3V0dGVycyBhcmUgc3BsaXQuXG4vLyAkY29udGV4dDogPGNvbnRleHQ+XG5AZnVuY3Rpb24gaXMtc3BsaXQoXG4gICRjb250ZXh0XG4pIHtcbiAgJF9zcGxpdDogc3BsaXQgaW5zaWRlIGluc2lkZS1zdGF0aWM7XG4gICRfZ3V0dGVyLXBvc2l0aW9uOiBzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRjb250ZXh0KTtcblxuICBAcmV0dXJuIGlmKGluZGV4KCRfc3BsaXQsICRfZ3V0dGVyLXBvc2l0aW9uKSwgdHJ1ZSwgZmFsc2UpO1xufVxuXG5cbi8vIEd1dHRlciBNYXRoXG4vLyAtLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHRoZSBtYXRoIHRvIHVzZSBmb3IgZ3V0dGVyIGNhbGN1bGF0aW9uc1xuLy8gJGNvbnRleHQ6IDxjb250ZXh0PlxuQGZ1bmN0aW9uIGd1dHRlci1tYXRoKFxuICAkY29udGV4dDogJHN1c3lcbikge1xuICAkX3JldHVybiAgOiBzdXN5LWdldChtYXRoLCAkY29udGV4dCk7XG4gICRfcmV0dXJuICA6IGlmKHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJGNvbnRleHQpID09IGluc2lkZS1zdGF0aWMsIHN0YXRpYywgJF9yZXR1cm4pO1xuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG4iLCIvLyBJc29sYXRpb24gU3ludGF4XG4vLyA9PT09PT09PT09PT09PT09XG5cblxuLy8gSXNvbGF0ZSBbTWl4aW5dXG4vLyAtLS0tLS0tLS0tLS0tLS1cbi8vIFNldCBpc29sYXRpb24gYXMgYW4gb3ZlcnJpZGUuXG4vLyAtICRsb2NhdGlvbjogPHNwYW4+XG5AbWl4aW4gaXNvbGF0ZShcbiAgJGlzb2xhdGU6IDFcbikge1xuICAkaW5zcGVjdDogJGlzb2xhdGU7XG5cbiAgJG91dHB1dDogKFxuICAgIHB1c2g6IGlzb2xhdGUoJGlzb2xhdGUpLFxuICAgIGZsb3c6IHN1c3ktZ2V0KGZsb3csICRpc29sYXRlKSxcbiAgKTtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoaXNvbGF0ZSwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBpc29sYXRlLW91dHB1dCgkb3V0cHV0Li4uKTtcbn1cblxuXG4vLyBJc29sYXRlIFtmdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIGFuIGlzb2xhdGlvbiBvZmZzZXQgd2lkdGguXG4vLyAtICRsb2NhdGlvbjogPHNwYW4+XG5AZnVuY3Rpb24gaXNvbGF0ZShcbiAgJGlzb2xhdGU6IDFcbikge1xuICAkaXNvbGF0ZTogcGFyc2Utc3BhbigkaXNvbGF0ZSk7XG4gICRpc29sYXRpb246IHN1c3ktZ2V0KHNwYW4sICRpc29sYXRlKTtcblxuICBAaWYgJGlzb2xhdGlvbiBhbmQgbm90KGdldC1sb2NhdGlvbigkaXNvbGF0ZSkpIHtcbiAgICAkbmV3OiAoXG4gICAgICBzcGFuOiBudWxsLFxuICAgICAgbG9jYXRpb246ICRpc29sYXRpb24sXG4gICAgKTtcbiAgICAkaXNvbGF0ZTogbWFwLW1lcmdlKCRpc29sYXRlLCAkbmV3KTtcbiAgfVxuXG4gIEByZXR1cm4gZ2V0LWlzb2xhdGlvbigkaXNvbGF0ZSk7XG59XG5cblxuLy8gR2V0IElzb2xhdGlvblxuLy8gLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHRoZSBpc29sYXRpb24gb2Zmc2V0IHdpZHRoXG4vLyAtICRpbnB1dDogPG1hcD5cbkBmdW5jdGlvbiBnZXQtaXNvbGF0aW9uKFxuICAkaW5wdXRcbikge1xuICAkbG9jYXRpb24gICA6IGdldC1sb2NhdGlvbigkaW5wdXQpO1xuICAkY29sdW1ucyAgICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRpbnB1dCk7XG4gICR3aWR0aCAgICAgIDogbnVsbDtcblxuICBAaWYgdHlwZS1vZigkbG9jYXRpb24pID09IG51bWJlciBhbmQgbm90KHVuaXRsZXNzKCRsb2NhdGlvbikpIHtcbiAgICAkd2lkdGg6ICRsb2NhdGlvbjtcbiAgfSBAZWxzZSBpZiAkbG9jYXRpb24ge1xuICAgICRwdXNoOiAkbG9jYXRpb24gLSAxO1xuICAgIEBpZiAkcHVzaCA+IDAge1xuICAgICAgJHB1c2g6IG1hcC1tZXJnZSgkaW5wdXQsIChcbiAgICAgICAgc3BhbjogJHB1c2gsXG4gICAgICAgIGxvY2F0aW9uOiAxLFxuICAgICAgICBzcHJlYWQ6IHdpZGUsXG4gICAgICApKTtcbiAgICAgICR3aWR0aDogZ2V0LXNwYW4td2lkdGgoJHB1c2gpO1xuICAgIH1cbiAgfVxuXG4gIEBpZiBzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRpbnB1dCkgPT0gc3BsaXRcbiAgICAgIGFuZCBzdXN5LWdldChndXR0ZXJzLCAkaW5wdXQpID4gMCB7XG4gICAgJHdpZHRoOiBpZigkd2lkdGggPT0gbnVsbCwgZ3V0dGVycygkaW5wdXQpLCAkd2lkdGggKyBndXR0ZXJzKCRpbnB1dCkpO1xuICB9XG5cbiAgQHJldHVybiAkd2lkdGggb3IgMDtcbn1cbiIsIi8vIEdhbGxlcnkgU3ludGF4XG4vLyA9PT09PT09PT09PT09PVxuXG4vLyBHYWxsZXJ5XG4vLyAtLS0tLS0tXG4vLyBDcmVhdGUgYW4gaXNvbGF0ZWQgZ2FsbGVyeVxuLy8gLSAkc3BhbiAgICAgICAgOiA8c3Bhbj5cbi8vIC0gWyRzZWxlY3Rvcl0gIDogY2hpbGQgfCBvZi10eXBlXG5AbWl4aW4gZ2FsbGVyeShcbiAgJHNwYW4sXG4gICRzZWxlY3RvcjogY2hpbGRcbikge1xuICAkaW5zcGVjdCAgICA6ICRzcGFuO1xuICAkc3BhbiAgICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xuICAkc3BhbiAgICAgICA6IG1hcC1tZXJnZSgkc3BhbiwgKGxvY2F0aW9uOiAxKSk7XG5cbiAgJG4gICAgICAgICAgICA6IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcbiAgJGNvbHVtbnMgICAgICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRzcGFuKTtcbiAgJGNvbnRleHQgICAgICA6IHN1c3ktY291bnQoJGNvbHVtbnMpO1xuICAkZmxvdyAgICAgICAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pO1xuXG4gICRpbnNpZGUgICAgICAgOiBpcy1pbnNpZGUoJHNwYW4pO1xuICAkZnJvbSAgICAgICAgIDogZnJvbSgkZmxvdyk7XG4gICRsaW5lICAgICAgICAgOiBmbG9vcigkY29udGV4dCAvICRuKTtcbiAgJHN5bW1ldHJpY2FsICA6IGlzLXN5bW1ldHJpY2FsKCRjb2x1bW5zKTtcblxuICAkb3V0cHV0OiAoXG4gICAgd2lkdGggICAgICAgICAgICAgOiBudWxsLFxuICAgIGZsb2F0ICAgICAgICAgICAgIDogZnJvbSxcbiAgICBtYXJnaW4tYmVmb3JlICAgICA6IG51bGwsXG4gICAgbWFyZ2luLWFmdGVyICAgICAgOiBudWxsLFxuICAgIHBhZGRpbmctYmVmb3JlICAgIDogbnVsbCxcbiAgICBwYWRkaW5nLWFmdGVyICAgICA6IG51bGwsXG4gICAgZmxvdyAgICAgICAgICAgICAgOiAkZmxvdyxcbiAgKTtcblxuICBAaWYgJGluc2lkZSB7XG4gICAgJGd1dHRlcnM6IGdldC1ndXR0ZXJzKCRzcGFuKTtcbiAgICAkb3V0cHV0OiBtYXAtbWVyZ2UoJG91dHB1dCwgKFxuICAgICAgcGFkZGluZy1iZWZvcmU6IG1hcC1nZXQoJGd1dHRlcnMsIGJlZm9yZSksXG4gICAgICBwYWRkaW5nLWFmdGVyOiBtYXAtZ2V0KCRndXR0ZXJzLCBhZnRlciksXG4gICAgKSk7XG4gIH1cblxuICBAaWYgJHN5bW1ldHJpY2FsIHtcbiAgICAkb3V0cHV0OiBtYXAtbWVyZ2UoJG91dHB1dCwgKHdpZHRoOiBnZXQtc3Bhbi13aWR0aCgkc3BhbikpKTtcbiAgfVxuXG4gICRib3ggICAgICAgICAgOiBzdXN5LWdldChib3gtc2l6aW5nLCAkc3Bhbik7XG4gICRnbG9iYWwtYm94ICAgOiBpZihzdXN5LWdldChnbG9iYWwtYm94LXNpemluZykgPT0gJ2JvcmRlci1ib3gnLCB0cnVlLCBmYWxzZSk7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGdhbGxlcnksICRpbnNwZWN0KTtcblxuICAvLyBDb2xsZWN0aXZlIE91dHB1dFxuICBAaWYgJGJveCA9PSBib3JkZXItYm94IG9yICgkaW5zaWRlIGFuZCBub3QoJGJveCkgYW5kIG5vdCgkZ2xvYmFsLWJveCkpIHtcbiAgICBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6IGJvcmRlci1ib3gpKTtcbiAgfSBAZWxzZSBpZiAkYm94ID09IGNvbnRlbnQtYm94IHtcbiAgICBAaW5jbHVkZSBvdXRwdXQoKGJveC1zaXppbmc6IGNvbnRlbnQtYm94KSk7XG4gIH1cblxuICBAaW5jbHVkZSBmbG9hdC1zcGFuLW91dHB1dCgkb3V0cHV0Li4uKTtcblxuICAvLyBJbmRpdmlkdWFsIExvb3BcbiAgQGZvciAkaXRlbSBmcm9tIDEgdGhyb3VnaCAkbGluZSB7XG4gICAgJG50aDogJyN7JGxpbmV9biArICN7JGl0ZW19JztcbiAgICAmOm50aC0jeyRzZWxlY3Rvcn0oI3skbnRofSkge1xuICAgICAgLy8gSW5kaXZpZHVhbCBQcmVwXG4gICAgICAkb3V0cHV0OiAoXG4gICAgICAgIHdpZHRoICAgICAgICAgICAgIDogaWYoJHN5bW1ldHJpY2FsLCBudWxsLCBnZXQtc3Bhbi13aWR0aCgkc3BhbikpLFxuICAgICAgICBmbG9hdCAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgIG1hcmdpbi1iZWZvcmUgICAgIDogZ2V0LWlzb2xhdGlvbigkc3BhbiksXG4gICAgICAgIG1hcmdpbi1hZnRlciAgICAgIDogLTEwMCUsXG4gICAgICAgIHBhZGRpbmctYmVmb3JlICAgIDogbnVsbCxcbiAgICAgICAgcGFkZGluZy1hZnRlciAgICAgOiBudWxsLFxuICAgICAgICBmbG93ICAgICAgICAgICAgICA6ICRmbG93LFxuICAgICAgKTtcblxuICAgICAgLy8gSW5kaXZpZHVhbCBPdXRwdXRcbiAgICAgIEBpbmNsdWRlIGZsb2F0LXNwYW4tb3V0cHV0KCRvdXRwdXQuLi4pO1xuXG4gICAgICBAaWYgZ2V0LWVkZ2UoJHNwYW4pID09IGZpcnN0IHtcbiAgICAgICAgQGluY2x1ZGUgYnJlYWs7XG4gICAgICAgIEBpbmNsdWRlIGZpcnN0KCRzcGFuKTtcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICBAaW5jbHVkZSBub2JyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBJbmRpdmlkdWFsIExvY2F0aW9uIEluY3JlbWVudFxuICAgICAgJGxvY2F0aW9uOiBnZXQtbG9jYXRpb24oJHNwYW4pICsgJG47XG4gICAgICAkbG9jYXRpb246IGlmKCRsb2NhdGlvbiA+ICRjb250ZXh0LCAxLCAkbG9jYXRpb24pO1xuICAgICAgJHNwYW46IG1hcC1tZXJnZSgkc3BhbiwgKGxvY2F0aW9uOiAkbG9jYXRpb24pKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vIFJvdyBTdGFydCAmIEVuZFxuLy8gPT09PT09PT09PT09PT09XG5cbi8vIEJyZWFrXG4vLyAtLS0tLVxuLy8gQXBwbHkgdG8gYW55IGVsZW1lbnQgdGhhdCBzaG91bGQgZm9yY2UgYSBsaW5lIGJyZWFrLlxuQG1peGluIGJyZWFrIHtcbiAgQGluY2x1ZGUgb3V0cHV0KChjbGVhcjogYm90aCkpO1xufVxuXG5cbi8vIE5vQnJlYWtcbi8vIC0tLS0tLS1cbi8vIENhbmNlbCB0aGUgYnJlYWsoKSBlZmZlY3QsIGUuZy4gd2hlbiB1c2luZyBtZWRpYSBxdWVyaWVzLlxuQG1peGluIG5vYnJlYWsge1xuICBAaW5jbHVkZSBvdXRwdXQoKGNsZWFyOiBub25lKSk7XG59XG5cblxuLy8gRnVsbFxuLy8gLS0tLVxuLy8gLSBbJGNvbnRleHRdOiA8bGF5b3V0IHNob3J0aGFuZD5cbkBtaXhpbiBmdWxsKFxuICAkY29udGV4dDogJHN1c3lcbikge1xuICAkaW5zcGVjdCA6ICRjb250ZXh0O1xuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoZnVsbCwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBzcGFuKGZ1bGwgb2YgcGFyc2UtZ3JpZCgkY29udGV4dCkgYnJlYWspO1xufVxuXG5cbi8vIEZpcnN0XG4vLyAtLS0tLVxuLy8gLSBbJGNvbnRleHRdOiA8c2V0dGluZ3M+XG5AbWl4aW4gZmlyc3QoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gICRpbnNwZWN0ICA6ICRjb250ZXh0O1xuICAkY29udGV4dCAgOiBwYXJzZS1ncmlkKCRjb250ZXh0KTtcbiAgJGZsb3cgICAgIDogc3VzeS1nZXQoZmxvdywgJGNvbnRleHQpO1xuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChmaXJzdCwgJGluc3BlY3QpO1xuICBAaWYgbm90KGlzLXNwbGl0KCRjb250ZXh0KSkge1xuICAgIEBpbmNsdWRlIGZsb2F0LWZpcnN0KCRmbG93KTtcbiAgfVxufVxuXG5AbWl4aW4gYWxwaGEoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gIEBpbmNsdWRlIGZpcnN0KCRjb250ZXh0KTtcbn1cblxuXG4vLyBMYXN0XG4vLyAtLS0tXG4vLyAtIFskY29udGV4dF06IDxzZXR0aW5ncz5cbkBtaXhpbiBsYXN0KFxuICAkY29udGV4dDogJHN1c3lcbikge1xuICAkaW5zcGVjdCAgOiAkY29udGV4dDtcbiAgJGNvbnRleHQgIDogcGFyc2UtZ3JpZCgkY29udGV4dCk7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGxhc3QsICRpbnNwZWN0KTtcblxuICAkb3V0cHV0OiAoXG4gICAgZmxvdzogc3VzeS1nZXQoZmxvdywgJGNvbnRleHQpLFxuICAgIGxhc3QtZmxvdzogc3VzeS1nZXQobGFzdC1mbG93LCAkY29udGV4dCksXG4gICAgbWFyZ2luOiBpZihpcy1zcGxpdCgkY29udGV4dCksIG51bGwsIDApLFxuICApO1xuXG4gIEBpbmNsdWRlIGZsb2F0LWxhc3QoJG91dHB1dC4uLik7XG59XG5cbkBtaXhpbiBvbWVnYShcbiAgJGNvbnRleHQ6ICRzdXN5XG4pIHtcbiAgQGluY2x1ZGUgbGFzdCgkY29udGV4dCk7XG59XG5cblxuLy8gR2V0IEVkZ2Vcbi8vIC0tLS0tLS0tXG4vLyBDYWxjdWxhdGUgZWRnZSB2YWx1ZSBiYXNlZCBvbiBsb2NhdGlvbiwgaWYgcG9zc2libGVcbkBmdW5jdGlvbiBnZXQtZWRnZShcbiAgJHNwYW5cbikge1xuICAkc3BhbiAgICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xuICAkZWRnZSAgICAgICA6IHN1c3ktZ2V0KGVkZ2UsICRzcGFuKTtcblxuICBAaWYgbm90KCRlZGdlKSB7XG4gICAgJGNvdW50OiBzdXN5LWNvdW50KHN1c3ktZ2V0KGNvbHVtbnMsICRzcGFuKSk7XG4gICAgJGxvY2F0aW9uOiBzdXN5LWdldChsb2NhdGlvbiwgJHNwYW4pO1xuICAgICRuOiBzdXN5LWdldChzcGFuLCAkc3Bhbik7XG5cbiAgICAkbnVtYmVyOiBpZih0eXBlLW9mKCRsb2NhdGlvbikgPT0gbnVtYmVyLCB0cnVlLCBmYWxzZSk7XG4gICAgJGluZGV4OiBpZigkbnVtYmVyIGFuZCB1bml0bGVzcygkbG9jYXRpb24pLCB0cnVlLCBmYWxzZSk7XG5cbiAgICBAaWYgJG4gPT0gJGNvdW50IHtcbiAgICAgICRlZGdlOiBmdWxsO1xuICAgIH0gQGVsc2UgaWYgJGxvY2F0aW9uIGFuZCAkbiBhbmQgJGluZGV4IHtcbiAgICAgIEBpZiAkbG9jYXRpb24gPT0gMSB7XG4gICAgICAgICRlZGdlOiBpZigkbiA9PSAkY291bnQsIGZ1bGwsIGZpcnN0KTtcbiAgICAgIH0gQGVsc2UgaWYgJGxvY2F0aW9uICsgJG4gLSAxID09ICRjb3VudCB7XG4gICAgICAgICRlZGdlOiBsYXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBpZiAkZWRnZSA9PSBhbHBoYSBvciAkZWRnZSA9PSBvbWVnYSB7XG4gICAgJGVkZ2U6IGlmKCRlZGdlID09IGFscGhhLCBmaXJzdCwgbGFzdCk7XG4gIH1cblxuICBAcmV0dXJuICRlZGdlO1xufVxuXG5cbi8vIEdldCBMb2NhdGlvblxuLy8gLS0tLS0tLS0tLS0tXG4vLyBDYWxjdWxhdGUgbG9jYXRpb24gdmFsdWUgYmFzZWQgb24gZWRnZSwgaWYgcG9zc2libGVcbkBmdW5jdGlvbiBnZXQtbG9jYXRpb24oXG4gICRzcGFuXG4pIHtcbiAgJHNwYW4gICAgICAgOiBwYXJzZS1zcGFuKCRzcGFuKTtcbiAgJGxvY2F0aW9uICAgOiBzdXN5LWdldChsb2NhdGlvbiwgJHNwYW4pO1xuICAkZWRnZSAgICAgICA6IGdldC1lZGdlKCRzcGFuKTtcbiAgJG4gICAgICAgICAgOiBzdXN5LWdldChzcGFuLCAkc3Bhbik7XG5cbiAgQGlmICRlZGdlIGFuZCBub3QoJGxvY2F0aW9uKSBhbmQgdHlwZS1vZigkbikgPT0gbnVtYmVyIGFuZCB1bml0bGVzcygkbikge1xuICAgIEBpZiAkZWRnZSA9PSBmaXJzdCB7XG4gICAgICAkbG9jYXRpb246IDE7XG4gICAgfSBAZWxzZSBpZiAkZWRnZSA9PSBsYXN0IHtcbiAgICAgICRsb2NhdGlvbjogc3VzeS1jb3VudChzdXN5LWdldChjb2x1bW5zLCAkc3BhbikpIC0gJG4gKyAxO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJGxvY2F0aW9uXG59XG4iLCIvLyBNYXJnaW4gU3ludGF4XG4vLyA9PT09PT09PT09PT09XG5cbi8vIFByZVxuLy8gLS0tXG4vLyBBZGQgc3Bhbm5pbmctbWFyZ2lucyBiZWZvcmUgYW4gZWxlbWVudC5cbi8vIC0gJHNwYW4gIDogPHNwYW4+XG5AbWl4aW4gcHJlKFxuICAkc3BhblxuKSB7XG4gICRpbnNwZWN0OiAkc3BhbjtcbiAgJHNwYW4gICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3Bhbigkc3BhbikpO1xuICAkZmxvdyAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pO1xuICAkc3BsaXQgIDogaWYoc3VzeS1nZXQoZ3V0dGVyLXBvc2l0aW9uLCAkc3BhbikgPT0gc3BsaXQsIHRydWUsIGZhbHNlKTtcbiAgJGd1dHRlciA6IGd1dHRlcigkc3Bhbik7XG4gICRzcGFuICAgOiBzcGFuKCRzcGFuKTtcbiAgJHdpZHRoICA6IGlmKCRzcGxpdCBhbmQgJGd1dHRlciwgJHNwYW4gKyAkZ3V0dGVyLCAkc3Bhbik7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHByZSwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBtYXJnaW4tb3V0cHV0KCR3aWR0aCwgbnVsbCwgJGZsb3cpO1xufVxuXG4vLyBQb3N0XG4vLyAtLS0tXG4vLyBBZGQgc3Bhbm5pbmctbWFyZ2lucyBhZnRlciBhbiBlbGVtZW50LlxuLy8gLSAkc3BhbiAgOiA8c3Bhbj5cbkBtaXhpbiBwb3N0KFxuICAkc3BhblxuKSB7XG4gICRpbnNwZWN0ICA6ICRzcGFuO1xuICAkc3BhbiAgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHNwYW4pKTtcbiAgJGZsb3cgICAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pO1xuICAkc3BsaXQgICAgOiBpZihzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRzcGFuKSA9PSBzcGxpdCwgdHJ1ZSwgZmFsc2UpO1xuICAkd2lkdGggICAgOiBpZigkc3BsaXQsIHNwYW4oJHNwYW4pICsgZ3V0dGVyKCRzcGFuKSwgc3Bhbigkc3BhbikpO1xuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChwb3N0LCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIG1hcmdpbi1vdXRwdXQobnVsbCwgJHdpZHRoLCAkZmxvdyk7XG59XG5cbi8vIFB1c2hcbi8vIC0tLS1cbi8vIFNpbXBsZSBzeW5vbnltbiBmb3IgcHJlLlxuLy8gLSAkc3BhbiAgOiA8c3Bhbj5cbkBtaXhpbiBwdXNoKFxuICAkc3BhblxuKSB7XG4gIEBpbmNsdWRlIHByZSgkc3Bhbik7XG59XG5cbi8vIFB1bGxcbi8vIC0tLS1cbi8vIEFkZCBuZWdhdGl2ZSBzcGFubmluZy1tYXJnaW5zIGJlZm9yZSBhbiBlbGVtZW50LlxuLy8gLSAkc3BhbiAgOiA8c3Bhbj5cbkBtaXhpbiBwdWxsKFxuICAkc3BhblxuKSB7XG4gICRpbnNwZWN0ICA6ICRzcGFuO1xuICAkc3BhbiAgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHNwYW4pKTtcbiAgJGZsb3cgICAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pO1xuICAkc3BsaXQgICAgOiBpZihzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRzcGFuKSA9PSBzcGxpdCwgdHJ1ZSwgZmFsc2UpO1xuICAkd2lkdGggICAgOiBpZigkc3BsaXQsIDAgLSBzcGFuKCRzcGFuKSArIGd1dHRlcigkc3BhbiksIDAgLSBzcGFuKCRzcGFuKSk7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHB1bGwsICRpbnNwZWN0KTtcbiAgQGluY2x1ZGUgbWFyZ2luLW91dHB1dCgkd2lkdGgsIG51bGwsICRmbG93KTtcbn1cblxuLy8gU3F1aXNoXG4vLyAtLS0tLS1cbi8vIEFkZCBzcGFubmluZy1tYXJnaW5zIGJlZm9yZSBhbmQgYWZ0ZXIgYW4gZWxlbWVudC5cbi8vIC0gJHByZSAgICAgOiA8c3Bhbj5cbi8vIC0gWyRwb3N0XSAgOiA8c3Bhbj5cbkBtaXhpbiBzcXVpc2goXG4gICRwcmUsXG4gICRwb3N0OiBmYWxzZVxuKSB7XG4gICRpbnNwZWN0ICAgICAgOiAoJHByZSwgJHBvc3QpO1xuICAkcHJlICAgICAgICAgIDogbWFwLW1lcmdlKChzcHJlYWQ6IHdpZGUpLCBwYXJzZS1zcGFuKCRwcmUpKTtcblxuICBAaWYgJHBvc3Qge1xuICAgICRwb3N0OiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHBvc3QpKTtcbiAgfSBAZWxzZSB7XG4gICAgJHNwYW46IHN1c3ktZ2V0KHNwYW4sICRwcmUpO1xuICAgIEBpZiBsZW5ndGgoJHNwYW4pID4gMSB7XG4gICAgICAkcHJlOiBtYXAtbWVyZ2UoJHByZSwgKHNwYW46IG50aCgkc3BhbiwgMSkpKTtcbiAgICAgICRwb3N0OiBtYXAtbWVyZ2UoJHByZSwgKHNwYW46IG50aCgkc3BhbiwgMikpKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRwb3N0OiAkcHJlO1xuICAgIH1cbiAgfVxuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChzcXVpc2gsICRpbnNwZWN0KTtcbiAgQGluY2x1ZGUgcHJlKCRwcmUpO1xuICBAaW5jbHVkZSBwb3N0KCRwb3N0KTtcbn1cbiIsIi8vIFBhZGRpbmcgU3ludGF4XG4vLyA9PT09PT09PT09PT09PVxuXG4vLyBQcmVmaXhcbi8vIC0tLS0tLVxuLy8gQWRkIHNwYW5uaW5nLXBhZGRpbmcgYmVmb3JlIGFuIGVsZW1lbnQuXG4vLyAtICRzcGFuICA6IDxzcGFuPlxuQG1peGluIHByZWZpeChcbiAgJHNwYW5cbikge1xuICAkaW5zcGVjdCAgOiAkc3BhbjtcbiAgJHNwYW4gICAgIDogbWFwLW1lcmdlKChzcHJlYWQ6IHdpZGUpLCBwYXJzZS1zcGFuKCRzcGFuKSk7XG4gICRmbG93ICAgICA6IHN1c3ktZ2V0KGZsb3csICRzcGFuKTtcbiAgJHdpZHRoICAgIDogc3Bhbigkc3Bhbik7XG5cbiAgQGlmIGlzLWluc2lkZSgkc3Bhbikge1xuICAgICRndXR0ZXI6IGd1dHRlcigkc3Bhbik7XG4gICAgJHdpZHRoOiBpZigkZ3V0dGVyIGFuZCBjb21wYXJhYmxlKCR3aWR0aCwgJGd1dHRlciksICR3aWR0aCArICRndXR0ZXIsICR3aWR0aCk7XG4gIH1cblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QocHJlZml4LCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIHBhZGRpbmctb3V0cHV0KCR3aWR0aCwgbnVsbCwgJGZsb3cpO1xufVxuXG4vLyBTdWZmaXhcbi8vIC0tLS0tLVxuLy8gQWRkIHNwYW5uaW5nLXBhZGRpbmcgYWZ0ZXIgYW4gZWxlbWVudC5cbi8vIC0gJHNwYW4gIDogPHNwYW4+XG5AbWl4aW4gc3VmZml4KFxuICAkc3BhblxuKSB7XG4gICRpbnNwZWN0ICA6ICRzcGFuO1xuICAkc3BhbiAgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHNwYW4pKTtcbiAgJGZsb3cgICAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pO1xuICAkd2lkdGggICAgOiBzcGFuKCRzcGFuKTtcblxuICBAaWYgaXMtaW5zaWRlKCRzcGFuKSB7XG4gICAgJGd1dHRlcjogZ3V0dGVyKCRzcGFuKTtcbiAgICAkd2lkdGg6IGlmKCRndXR0ZXIgYW5kIGNvbXBhcmFibGUoJHdpZHRoLCAkZ3V0dGVyKSwgJHdpZHRoICsgJGd1dHRlciwgJHdpZHRoKTtcbiAgfVxuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChzdWZmaXgsICRpbnNwZWN0KTtcbiAgQGluY2x1ZGUgcGFkZGluZy1vdXRwdXQobnVsbCwgJHdpZHRoLCAkZmxvdyk7XG59XG5cbi8vIFBhZFxuLy8gLS0tXG4vLyBBZGQgc3Bhbm5pbmctcGFkZGluZyBiZWZvcmUgYW5kIGFmdGVyIGFuIGVsZW1lbnQuXG4vLyAtICRwcmUgICAgIDogPHNwYW4+XG4vLyAtIFskcG9zdF0gIDogPHNwYW4+XG5AbWl4aW4gcGFkKFxuICAkcHJlLFxuICAkcG9zdDogZmFsc2Vcbikge1xuICAkaW5zcGVjdCAgOiAoJHByZSwgJHBvc3QpO1xuICAkcHJlICAgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHByZSkpO1xuXG4gIEBpZiAkcG9zdCB7XG4gICAgJHBvc3Q6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3BhbigkcG9zdCkpO1xuICB9IEBlbHNlIHtcbiAgICAkc3Bhbjogc3VzeS1nZXQoc3BhbiwgJHByZSk7XG4gICAgQGlmIGxlbmd0aCgkc3BhbikgPiAxIHtcbiAgICAgICRwcmU6IG1hcC1tZXJnZSgkcHJlLCAoc3BhbjogbnRoKCRzcGFuLCAxKSkpO1xuICAgICAgJHBvc3Q6IG1hcC1tZXJnZSgkcHJlLCAoc3BhbjogbnRoKCRzcGFuLCAyKSkpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJHBvc3Q6ICRwcmU7XG4gICAgfVxuICB9XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHBhZCwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBwcmVmaXgoJHByZSk7XG4gIEBpbmNsdWRlIHN1ZmZpeCgkcG9zdCk7XG5cbn1cbiIsIi8vIEJsZWVkIFN5bnRheFxuLy8gPT09PT09PT09PT09XG5cbi8vIEJsZWVkXG4vLyAtLS0tLVxuLy8gQWRkIG5lZ2F0aXZlIG1hcmdpbnMsIGFuZCBlcXVhbCBwb3NpdGl2ZSBwYWRkaW5nIHRvIGNyZWF0ZSBibGVlZC5cbi8vIC0gJGJsZWVkICA6IDxzcGFuPlxuQG1peGluIGJsZWVkKFxuICAkYmxlZWQ6IDAgZ3V0dGVyKClcbikge1xuICAkaW5zcGVjdCAgOiAkYmxlZWQ7XG4gICRvdXRwdXQgICA6IGdldC1ibGVlZCgkYmxlZWQpO1xuXG4gIEBpZiBzdXN5LWdldChnbG9iYWwtYm94LXNpemluZykgIT0gY29udGVudC1ib3gge1xuICAgICRvdXRwdXQ6IG1hcC1tZXJnZSgoYm94LXNpemluZzogY29udGVudC1ib3gpLCAkb3V0cHV0KTtcbiAgfVxuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChibGVlZCwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XG59XG5cblxuLy8gQmxlZWQteFxuLy8gLS0tLS0tLVxuLy8gU2hvcnRjdXQgZm9yIGhvcml6b250YWwgYmxlZWQuXG4vLyAtICRibGVlZCAgOiA8c3Bhbj5cbkBtaXhpbiBibGVlZC14KFxuICAkYmxlZWQ6IGd1dHRlcigpXG4pIHtcbiAgJGJsZWVkICA6IHBhcnNlLXNwYW4oJGJsZWVkKTtcbiAgJHRyYmwgICA6IHN1c3ktZ2V0KHNwYW4sICRibGVlZCk7XG5cbiAgQGlmIGxlbmd0aCgkdHJibCkgPT0gMSB7XG4gICAgJGJsZWVkOiBtYXAtbWVyZ2UoJGJsZWVkLCAoc3BhbjogMCBudGgoJHRyYmwsIDEpKSk7XG4gIH0gQGVsc2UgaWYgbGVuZ3RoKCR0cmJsKSA9PSAyIHtcbiAgICAkYmxlZWQ6IG1hcC1tZXJnZSgkYmxlZWQsIChzcGFuOiAwIG50aCgkdHJibCwgMikgMCBudGgoJHRyYmwsIDEpKSk7XG4gIH0gQGVsc2Uge1xuICAgIEB3YXJuICdibGVlZC14IG9ubHkgdGFrZXMgMiBsZW5ndGhzLCBidXQgI3tsZW5ndGgoJHRyYmwpfSB3ZXJlIHBhc3NlZC4nO1xuICB9XG5cbiAgQGluY2x1ZGUgYmxlZWQoJGJsZWVkKTtcbn1cblxuXG4vLyBCbGVlZC15XG4vLyAtLS0tLS0tXG4vLyBTaG9ydGN1dCBmb3IgdmVydGljYWwgYmxlZWQuXG4vLyAtICRibGVlZCAgOiA8c3Bhbj5cbkBtaXhpbiBibGVlZC15KFxuICAkYmxlZWQ6IGlmKGZ1bmN0aW9uLWV4aXN0cyhyaHl0aG0pLCByaHl0aG0oMSksIDFlbSlcbikge1xuICAkYmxlZWQgIDogcGFyc2Utc3BhbigkYmxlZWQpO1xuICAkdHJibCAgIDogc3VzeS1nZXQoc3BhbiwgJGJsZWVkKTtcblxuICBAaWYgbGVuZ3RoKCR0cmJsKSA9PSAxIHtcbiAgICAkYmxlZWQ6IG1hcC1tZXJnZSgkYmxlZWQsIChzcGFuOiBudGgoJHRyYmwsIDEpIDApKTtcbiAgfSBAZWxzZSBpZiBsZW5ndGgoJHRyYmwpID09IDIge1xuICAgICRibGVlZDogbWFwLW1lcmdlKCRibGVlZCwgKHNwYW46IG50aCgkdHJibCwgMSkgMCBudGgoJHRyYmwsIDIpIDApKTtcbiAgfSBAZWxzZSB7XG4gICAgQHdhcm4gJ2JsZWVkLXkgb25seSB0YWtlcyAyIGxlbmd0aHMsIGJ1dCAje2xlbmd0aCgkdHJibCl9IHdlcmUgcGFzc2VkLic7XG4gIH1cblxuICBAaW5jbHVkZSBibGVlZCgkYmxlZWQpO1xufVxuXG5cbi8vIEdldCBCbGVlZFxuLy8gLS0tLS0tLS0tXG4vLyBSZXR1cm4gYmxlZWQgb3V0cHV0IHZhbHVlc1xuLy8gLSAkYmxlZWQ6IDxzcGFuPlxuQGZ1bmN0aW9uIGdldC1ibGVlZChcbiAgJGJsZWVkXG4pIHtcbiAgJGJsZWVkICAgIDogbWFwLW1lcmdlKChzcHJlYWQ6IHdpZGUpLCBwYXJzZS1zcGFuKCRibGVlZCkpO1xuICAkdHJibCAgICAgOiBzdXN5LWdldChzcGFuLCAkYmxlZWQpO1xuICAkc2hvcnQgICAgOiBudWxsO1xuICAkb3V0cHV0ICAgOiAoKTtcblxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkdHJibCkge1xuICAgICR0aGlzOiBudGgoJHRyYmwsICRpKTtcbiAgICAkbmV3OiAoKTtcbiAgICAkbWFyZ2luOiBudWxsO1xuICAgICRwYWRkaW5nOiBudWxsO1xuICAgICRwYWRkaW5nLXg6IG51bGw7XG5cbiAgICBAaWYgJHRoaXMgPiAwIHtcbiAgICAgICR0aGlzOiBtYXAtbWVyZ2UoJGJsZWVkLCAoc3BhbjogJHRoaXMpKTtcbiAgICAgICRtYXJnaW46IHNwYW4oJHRoaXMpO1xuICAgICAgJHBhZGRpbmc6ICRtYXJnaW47XG4gICAgICAkcGFkZGluZy14OiAkcGFkZGluZztcbiAgICB9XG5cbiAgICBAaWYgJG1hcmdpbiBhbmQgJG1hcmdpbiA+IDAge1xuICAgICAgJG1hcmdpbjogLSAkbWFyZ2luO1xuXG4gICAgICBAaWYgaXMtaW5zaWRlKCR0aGlzKSB7XG4gICAgICAgICRndXR0ZXI6IGd1dHRlcigkdGhpcyk7XG4gICAgICAgICRqb2luOiBpZigkZ3V0dGVyIGFuZCBjb21wYXJhYmxlKCRwYWRkaW5nLCAkZ3V0dGVyKSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAkcGFkZGluZy14OiBpZigkam9pbiBhbmQgJHBhZGRpbmcgPiAwLCAkcGFkZGluZyArICRndXR0ZXIsICRwYWRkaW5nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaWYgJGkgPT0gMSB7XG4gICAgICAkbmV3OiAoXG4gICAgICAgIG1hcmdpbi10b3A6ICRtYXJnaW4sXG4gICAgICAgIHBhZGRpbmctdG9wOiAkcGFkZGluZyxcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAkbWFyZ2luLFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkcGFkZGluZy14LFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAkbWFyZ2luLFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogJHBhZGRpbmcsXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAkbWFyZ2luLFxuICAgICAgICBwYWRkaW5nLWxlZnQ6ICRwYWRkaW5nLXgsXG4gICAgICApO1xuICAgIH0gQGVsc2UgaWYgJGkgPT0gMiB7XG4gICAgICAkbmV3OiAoXG4gICAgICAgIG1hcmdpbi1yaWdodDogJG1hcmdpbixcbiAgICAgICAgcGFkZGluZy1yaWdodDogJHBhZGRpbmcteCxcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICRtYXJnaW4sXG4gICAgICAgIHBhZGRpbmctbGVmdDogJHBhZGRpbmcteCxcbiAgICAgICk7XG4gICAgfSBAZWxzZSBpZiAkaSA9PSAzIHtcbiAgICAgICRuZXc6IChcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJG1hcmdpbixcbiAgICAgICAgcGFkZGluZy1ib3R0b206ICRwYWRkaW5nLFxuICAgICAgKTtcbiAgICB9IEBlbHNlIGlmICRpID09IDQge1xuICAgICAgJG5ldzogKFxuICAgICAgICBtYXJnaW4tbGVmdDogJG1hcmdpbixcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAkcGFkZGluZy14LFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAkb3V0cHV0OiBtYXAtbWVyZ2UoJG91dHB1dCwgJG5ldyk7XG4gIH1cblxuICBAZWFjaCAkcHJvcCwgJHZhbHVlIGluICRvdXRwdXQge1xuICAgICRvdXRwdXQ6IGlmKCR2YWx1ZSA9PSAwLCBtYXAtbWVyZ2UoJG91dHB1dCwgKCRwcm9wOiBudWxsKSksICRvdXRwdXQpO1xuICB9XG5cbiAgQHJldHVybiBibGVlZC1zaG9ydGhhbmQoJG91dHB1dCk7XG59XG5cbi8vIEJsZWVkIFNob3J0aGFuZFxuLy8gLS0tLS0tLS0tLS0tLS0tXG4vLyBDb252ZXJ0IGJsZWVkIG91dHB1dCBpbnRvIHNob3J0aGFuZCB3aGVuIHBvc3NpYmxlLlxuLy8gLSAkYmxlZWQ6IDxvdXRwdXQgbWFwPlxuQGZ1bmN0aW9uIGJsZWVkLXNob3J0aGFuZChcbiAgJGJsZWVkXG4pIHtcbiAgJG1hcmdpbjogKCk7XG4gICRwYWRkaW5nOiAoKTtcbiAgJHJldHVybjogKCk7XG5cbiAgQGVhY2ggJGtleSwgJHZhbHVlIGluICRibGVlZCB7XG4gICAgQGlmIHN0ci1pbmRleCgka2V5LCBtYXJnaW4pIHtcbiAgICAgICRtYXJnaW46IG1hcC1tZXJnZSgkbWFyZ2luLCAoJGtleTogJHZhbHVlKSk7XG4gICAgfSBAZWxzZSBpZiBzdHItaW5kZXgoJGtleSwgcGFkZGluZykgPiAwIHtcbiAgICAgICRwYWRkaW5nOiBtYXAtbWVyZ2UoJHBhZGRpbmcsICgka2V5OiAkdmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICAkcHJvcHM6IChcbiAgICBtYXJnaW46ICRtYXJnaW4sXG4gICAgcGFkZGluZzogJHBhZGRpbmcsXG4gICk7XG5cbiAgQGVhY2ggJG5hbWUsICRtYXAgaW4gJHByb3BzIHtcbiAgICAkZm91cjogaWYobGVuZ3RoKG1hcC1rZXlzKCRtYXApKSA9PSA0LCB0cnVlLCBmYWxzZSk7XG4gICAgJG51bGw6IGlmKGluZGV4KG1hcC12YWx1ZXMoJG1hcCksIG51bGwpLCB0cnVlLCBmYWxzZSk7XG5cbiAgICBAaWYgJGZvdXIgYW5kIG5vdCgkbnVsbCkge1xuICAgICAgJHRvcDogbWFwLWdldCgkbWFwLCAnI3skbmFtZX0tdG9wJyk7XG4gICAgICAkcmlnaHQ6IG1hcC1nZXQoJG1hcCwgJyN7JG5hbWV9LXJpZ2h0Jyk7XG4gICAgICAkYm90dG9tOiBtYXAtZ2V0KCRtYXAsICcjeyRuYW1lfS1ib3R0b20nKTtcbiAgICAgICRsZWZ0OiBtYXAtZ2V0KCRtYXAsICcjeyRuYW1lfS1sZWZ0Jyk7XG5cbiAgICAgICR0YjogaWYoJHRvcCA9PSAkYm90dG9tLCAkdG9wLCBudWxsKTtcbiAgICAgICRybDogaWYoJHJpZ2h0ID09ICRsZWZ0LCAkcmlnaHQsIG51bGwpO1xuICAgICAgJGFsbDogaWYoJHRiID09ICRybCwgJHRiLCBudWxsKTtcblxuICAgICAgJG5ldzogaWYoJGFsbCwgJGFsbCwgbnVsbCk7XG5cbiAgICAgIEBpZiBub3QoJG5ldykge1xuICAgICAgICBAaWYgJHRiIGFuZCAkcmwge1xuICAgICAgICAgICRuZXc6ICR0YiAkcmw7XG4gICAgICAgIH0gQGVsc2UgaWYgJHJsIHtcbiAgICAgICAgICAkbmV3OiAkdG9wICRybCAkYm90dG9tO1xuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICAkbmV3OiAkdG9wICRyaWdodCAkYm90dG9tICRsZWZ0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICRyZXR1cm46IG1hcC1tZXJnZSgkcmV0dXJuLCAoJG5hbWU6ICRuZXcpKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRyZXR1cm46IG1hcC1tZXJnZSgkcmV0dXJuLCAkbWFwKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRyZXR1cm47XG59XG4iLCIvLyBCcmVha3BvaW50IEludGVncmF0aW9uXG4vLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiRzdXN5LW1lZGlhOiAoKSAhZGVmYXVsdDtcbiRzdXN5LW1lZGlhLWZhbGxiYWNrOiBmYWxzZSAhZGVmYXVsdDtcblxuJF9zdXN5LW1lZGlhLWNvbnRleHQ6ICgpO1xuXG5cbi8vIFN1c3kgQnJlYWtwb2ludFxuLy8gLS0tLS0tLS0tLS0tLS0tXG4vLyBDaGFuZ2UgZ3JpZHMgYXQgZGlmZmVyZW50IG1lZGlhIHF1ZXJ5IGJyZWFrcG9pbnRzLlxuLy8gLSAkcXVlcnkgICAgIDogPG1pbi13aWR0aD4gWzxtYXgtd2lkdGg+XSB8IDxwcm9wZXJ0eT4gPHZhbHVlPiB8IDxtYXA+XG4vLyAtICRsYXlvdXQgICAgOiA8c2V0dGluZ3M+XG4vLyAtICRuby1xdWVyeSAgOiA8Ym9vbGVhbj4gfCA8c2VsZWN0b3I+XG5AbWl4aW4gc3VzeS1icmVha3BvaW50KFxuICAkcXVlcnksXG4gICRsYXlvdXQ6IGZhbHNlLFxuICAkbm8tcXVlcnk6ICRzdXN5LW1lZGlhLWZhbGxiYWNrXG4pIHtcbiAgQGluY2x1ZGUgc3VzeS1tZWRpYS1yb3V0ZXIoJHF1ZXJ5LCAkbm8tcXVlcnkpIHtcbiAgICBAaWYgJGxheW91dCB7XG4gICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkbGF5b3V0KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgICAgfVxuICAgIH0gQGVsc2Uge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cblxuLy8gU3VzeSBNZWRpYVxuLy8gLS0tLS0tLS0tLVxuLy8gLSAkcXVlcnk6IDxtaW4td2lkdGg+IFs8bWF4LXdpZHRoPl0gfCA8cHJvcGVydHk+IDx2YWx1ZT5cbi8vIC0gJG5vLXF1ZXJ5OiA8Ym9vbGVhbj4gfCA8c2VsZWN0b3I+XG5AbWl4aW4gc3VzeS1tZWRpYShcbiAgJHF1ZXJ5LFxuICAkbm8tcXVlcnk6ICRzdXN5LW1lZGlhLWZhbGxiYWNrXG4pIHtcbiAgJG9sZC1jb250ZXh0OiAkX3N1c3ktbWVkaWEtY29udGV4dDtcbiAgJG5hbWU6IGlmKG1hcC1oYXMta2V5KCRzdXN5LW1lZGlhLCAkcXVlcnkpLCAkcXVlcnksIG51bGwpO1xuICAkcXVlcnk6IHN1c3ktZ2V0LW1lZGlhKCRxdWVyeSk7XG4gICRxdWVyeTogc3VzeS1wYXJzZS1tZWRpYSgkcXVlcnkpO1xuXG4gIEBpbmNsdWRlIHN1c3ktbWVkaWEtY29udGV4dCgkcXVlcnksICRuYW1lKTtcblxuICBAaWYgJG5vLXF1ZXJ5IGFuZCB0eXBlLW9mKCRuby1xdWVyeSkgIT0gc3RyaW5nIHtcbiAgICBAY29udGVudDtcbiAgfSBAZWxzZSB7XG4gICAgQG1lZGlhICN7c3VzeS1yZW5kZXItbWVkaWEoJHF1ZXJ5KX0ge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgQGlmIHR5cGUtb2YoJG5vLXF1ZXJ5KSA9PSBzdHJpbmcge1xuICAgICAgI3skbm8tcXVlcnl9ICYge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaW5jbHVkZSBzdXN5LW1lZGlhLWNvbnRleHQoJG9sZC1jb250ZXh0LCAkY2xlYW46IHRydWUpO1xufVxuXG5cbi8vIE1lZGlhIFJvdXRlclxuLy8gLS0tLS0tLS0tLS0tXG4vLyBSb3V0IG1lZGlhIGFyZ3VtZW50cyB0byB0aGUgY29ycmVjdCBtaXhpbi5cbkBtaXhpbiBzdXN5LW1lZGlhLXJvdXRlcihcbiAgJHF1ZXJ5LFxuICAkbm8tcXVlcnk6ICRzdXN5LW1lZGlhLWZhbGxiYWNrXG4pIHtcbiAgQGlmIHN1c3ktc3VwcG9ydChicmVha3BvaW50LCAobWl4aW46IGJyZWFrcG9pbnQpLCAkd2FybjogZmFsc2UpIHtcbiAgICBAaW5jbHVkZSBicmVha3BvaW50KCRxdWVyeSwgJG5vLXF1ZXJ5KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIHN1c3ktbWVkaWEoJHF1ZXJ5LCAkbm8tcXVlcnkpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG5cbi8vIFVwZGF0ZSBDb250ZXh0XG4vLyAtLS0tLS0tLS0tLS0tXG4vLyBTZXQgdGhlIG5ldyBtZWRpYSBjb250ZXh0XG5AbWl4aW4gc3VzeS1tZWRpYS1jb250ZXh0KFxuICAkcXVlcnksXG4gICRuYW1lOiBudWxsLFxuICAkY2xlYW46IGZhbHNlXG4pIHtcbiAgJHF1ZXJ5OiBtYXAtbWVyZ2UoKG5hbWU6ICRuYW1lKSwgJHF1ZXJ5KTtcblxuICBAaWYgJGNsZWFuIHtcbiAgICAkX3N1c3ktbWVkaWEtY29udGV4dDogJHF1ZXJ5ICFnbG9iYWw7XG4gIH0gQGVsc2Uge1xuICAgICRfc3VzeS1tZWRpYS1jb250ZXh0OiBtYXAtbWVyZ2UoJF9zdXN5LW1lZGlhLWNvbnRleHQsICRxdWVyeSkgIWdsb2JhbDtcbiAgfVxufVxuXG5cbi8vIE1lZGlhIENvbnRleHRcbi8vIC0tLS0tLS0tLS0tLS1cbi8vIFJldHVybiB0aGUgZnVsbCBtZWRpYSBjb250ZXh0LCBvciBhIHNpbmdsZSBtZWRpYSBwcm9wZXJ0eSAoZS5nLiBtaW4td2lkdGgpXG5AZnVuY3Rpb24gc3VzeS1tZWRpYS1jb250ZXh0KFxuICAkcHJvcGVydHk6IGZhbHNlXG4pIHtcbiAgQGlmICRwcm9wZXJ0eSB7XG4gICAgQHJldHVybiBtYXAtZ2V0KCRfc3VzeS1tZWRpYS1jb250ZXh0LCAkcHJvcGVydHkpO1xuICB9IEBlbHNlIHtcbiAgICBAcmV0dXJuICRfc3VzeS1tZWRpYS1jb250ZXh0O1xuICB9XG59XG5cblxuLy8gR2V0IE1lZGlhXG4vLyAtLS0tLS0tLS1cbi8vIFJldHVybiBhIG5hbWVkIG1lZGlhLXF1ZXJ5IGZyb20gJHN1c3ktbWVkaWEuXG4vLyAtICRuYW1lOiA8a2V5PlxuQGZ1bmN0aW9uIHN1c3ktZ2V0LW1lZGlhKFxuICAkbmFtZVxuKSB7XG4gIEBpZiBtYXAtaGFzLWtleSgkc3VzeS1tZWRpYSwgJG5hbWUpIHtcbiAgICAkbWFwLXZhbHVlOiBtYXAtZ2V0KCRzdXN5LW1lZGlhLCAkbmFtZSk7XG4gICAgQGlmICgkbmFtZSA9PSAkbWFwLXZhbHVlKSB7XG4gICAgICAkbmFtZTogJG1hcC12YWx1ZTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRuYW1lOiBzdXN5LWdldC1tZWRpYSgkbWFwLXZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRuYW1lO1xufVxuXG5cbi8vIFJlbmRlciBNZWRpYVxuLy8gLS0tLS0tLS0tLS0tXG4vLyBCdWlsZCBhIG1lZGlhLXF1ZXJ5IHN0cmluZyBmcm9tIHZhcmlvdXMgbWVkaWEgc2V0dGluZ3NcbkBmdW5jdGlvbiBzdXN5LXJlbmRlci1tZWRpYShcbiAgJHF1ZXJ5XG4pIHtcbiAgJG91dHB1dDogbnVsbDtcbiAgQGVhY2ggJHByb3BlcnR5LCAkdmFsdWUgaW4gJHF1ZXJ5IHtcbiAgICAkc3RyaW5nOiBudWxsO1xuXG4gICAgQGlmICRwcm9wZXJ0eSA9PSBtZWRpYSB7XG4gICAgICAkc3RyaW5nOiAkdmFsdWU7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkc3RyaW5nOiAnKCN7JHByb3BlcnR5fTogI3skdmFsdWV9KSc7XG4gICAgfVxuXG4gICAgJG91dHB1dDogaWYoJG91dHB1dCwgJyN7JG91dHB1dH0gYW5kICN7JHN0cmluZ30nLCAkc3RyaW5nKTtcbiAgfVxuXG4gIEByZXR1cm4gJG91dHB1dDtcbn1cblxuXG4vLyBQYXJzZSBNZWRpYVxuLy8gLS0tLS0tLS0tLS1cbi8vIFJldHVybiBwYXJzZWQgbWVkaWEtcXVlcnkgc2V0dGluZ3MgYmFzZWQgb24gc2hvcnRoYW5kXG5AZnVuY3Rpb24gc3VzeS1wYXJzZS1tZWRpYShcbiAgJHF1ZXJ5XG4pIHtcbiAgJG1xOiBudWxsO1xuICBAaWYgdHlwZS1vZigkcXVlcnkpID09IG1hcCB7XG4gICAgJG1xOiAkcXVlcnk7XG4gIH0gQGVsc2UgaWYgdHlwZS1vZigkcXVlcnkpID09IG51bWJlciB7XG4gICAgJG1xOiAobWluLXdpZHRoOiAkcXVlcnkpO1xuICB9IEBlbHNlIGlmIHR5cGUtb2YoJHF1ZXJ5KSA9PSBsaXN0IGFuZCBsZW5ndGgoJHF1ZXJ5KSA9PSAyIHtcbiAgICBAaWYgdHlwZS1vZihudGgoJHF1ZXJ5LCAxKSkgPT0gbnVtYmVyIHtcbiAgICAgICRtcTogKFxuICAgICAgICBtaW4td2lkdGg6IG1pbigkcXVlcnkuLi4pLFxuICAgICAgICBtYXgtd2lkdGg6IG1heCgkcXVlcnkuLi4pLFxuICAgICAgKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRtcTogKG50aCgkcXVlcnksIDEpOiBudGgoJHF1ZXJ5LCAyKSk7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICAkbXE6IChtZWRpYTogJyN7JHF1ZXJ5fScpO1xuICB9XG5cbiAgQHJldHVybiAkbXE7XG59XG4iLCIvLyBNYXBweSBicmVha3BvaW50c1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBPdXRwdXQgbWVkaWEgcXVlcnkgd2l0aCBmb2N1cyBvbiBtaW4td2lkdGgsIG1heC13aWR0aCwgbWluLWhlaWdodCBhbmQgbWF4LWhlaWdodC5cclxuLy8gT3RoZXIgbWVkaWEgcnVsZXMgYXJlIHBhc3NlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IGluIGEgbWFwXHJcbi8vXHJcbi8vIEBhdXRob3IgWmVsbCBMaWV3XHJcbi8vID09PT09PT09PT09PT09PT09XHJcbiRicmVha3BvaW50czogKCkgIWRlZmF1bHQ7XHJcbiRtYXBweS1xdWVyaWVzOiAoKSAhZGVmYXVsdDtcclxuXHJcbi8vIE1hcHB5IEJQIFtNaXhpbl1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtICRxdWVyaWVzICAgICAgICAgOiA8c3RyaW5nPiBvciA8bnVtYmVyPiBpbiB0aGUgZm9ybWF0OlxyXG4vLyAgICAgICAgICAgICAgICAgICAgICA8bWluLXdpZHRoPiA8bWF4LXdpZHRoPiBoIDxtaW4taGVpZ2h0PiA8bWF4LWhlaWdodD4gPGtleT4gPHZhbHVlPlxyXG4vLyAtICR0eXBlICAgICAgICAgICAgOiA8bWVkaWEtdHlwZT5cclxuLy8gLSAkcXVlcnktZmFsbGJhY2sgIDogPHN0cmluZz4gc2VsZWN0b3IgY2xhc3NcclxuLy8gLSAkYnJlYWtwb2ludHMgICAgIDogPG1hcD5cclxuQG1peGluIG1hcHB5LWJwKCRxdWVyaWVzLCAkdHlwZTogYWxsLCAkcXVlcnktZmFsbGJhY2s6IG51bGwsICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzKSB7XHJcblxyXG4gIC8vIEdldHMgbWFwcHkgbWFwIHRocm91Z2ggbWFwcHktYnAgZm5cclxuICAkbWFwcHktbWFwOiBtYXBweS1icCgkcXVlcmllcywgJHR5cGUsICRxdWVyeS1mYWxsYmFjaywgJGJyZWFrcG9pbnRzKTtcclxuXHJcbiAgLy8gT3V0cHV0cyBtZWRpYSBzdHJpbmdcclxuICBAbWVkaWEgI3ttYXAtZ2V0KCRtYXBweS1tYXAsIHR5cGUpfSBhbmQgI3ttYXAtZ2V0KCRtYXBweS1tYXAsIG1lZGlhLXN0cmluZyl9IHtcclxuICAgIEBjb250ZW50O1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgYSBxdWVyeSBmYWxsYmFjayBpcyBwcm92aWRlZFxyXG4gIEBpZiAkcXVlcnktZmFsbGJhY2sge1xyXG4gICAgI3skcXVlcnktZmFsbGJhY2t9ICYge1xyXG4gICAgICBAY29udGVudDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIE1hcHB5IFF1ZXJ5IFtNaXhpbl1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBPdXRwdXQgcXVlcnkgZnJvbSAkbWFwcHktcXVlcmllcyBtYXAuXHJcbi8vICRxdWVyeSA6IDxzdHJpbmc+IGZyb20gJG1hcHB5LXF1ZXJpZXMga2V5XHJcbkBtaXhpbiBtYXBweS1xdWVyeSgkcXVlcnksICRtYXBweS1xdWVyaWVzOiAkbWFwcHktcXVlcmllcykge1xyXG4gIEBpZiBub3QgbWFwLWhhcy1rZXkoJG1hcHB5LXF1ZXJpZXMsICRxdWVyeSkge1xyXG4gICAgQGVycm9yIFwiI3skbWFwcHktcXVlcmllc30gZG9lcyBub3QgY29udGFpbiAjeyRxdWVyeX1cIjtcclxuICB9XHJcblxyXG4gICRtYXBweS1tYXA6IG1hcC1nZXQoJG1hcHB5LXF1ZXJpZXMsICRxdWVyeSk7XHJcblxyXG4gIEBtZWRpYSAje21hcC1nZXQoJG1hcHB5LW1hcCwgdHlwZSl9IGFuZCAje21hcC1nZXQoJG1hcHB5LW1hcCwgbWVkaWEtc3RyaW5nKX0ge1xyXG4gICAgQGNvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICAvLyBJZiBhIHF1ZXJ5IGZhbGxiYWNrIGlzIHByb3ZpZGVkXHJcbiAgQGlmIG1hcC1nZXQoJG1hcHB5LW1hcCwgcXVlcnktZmFsbGJhY2spIHtcclxuICAgICN7bWFwLWdldCgkbWFwcHktbWFwLCBxdWVyeS1mYWxsYmFjayl9ICYge1xyXG4gICAgICBAY29udGVudDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIE1hcHB5IEJQIFtGdW5jdGlvbl1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBSZXR1cm5zIGEgbWFwIHdpdGggMyBrZXlzXHJcbi8vIC0gdHlwZSAgICAgICAgICAgOiBNZWRpYSB0eXBlXHJcbi8vIC0gbWVkaWEtc3RyaW5nICAgOiBtZWRpYSBxdWVyeSBzdHJpbmdcclxuLy8gLSBxdWVyeS1mYWxsYmFjayA6IHF1ZXJ5IGZhbGxiYWNrIChpZiBhbnkpXHJcbkBmdW5jdGlvbiBtYXBweS1icCgkcXVlcmllcywgJHR5cGU6IGFsbCwgJHF1ZXJ5LWZhbGxiYWNrOiBudWxsLCAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cykge1xyXG4gICRtZWRpYS1zdHJpbmc6ICgpO1xyXG4gICRfcmV0dXJuOiAoKTtcclxuICAkbWVkaWEtbWFwOiBwYXJzZS1icCgkcXVlcmllcywgJGJyZWFrcG9pbnRzKTtcclxuXHJcbiAgQGVhY2ggJGtleSwgJHZhbHVlIGluICRtZWRpYS1tYXAge1xyXG4gICAgQGlmICR2YWx1ZSBhbmQgJHZhbHVlICE9IDAge1xyXG4gICAgICBAaWYgJG1lZGlhLXN0cmluZyA9PSAoKCkpIHtcclxuICAgICAgICAkbWVkaWEtc3RyaW5nOiBhcHBlbmQoJG1lZGlhLXN0cmluZywgdW5xdW90ZShcIigjeyRrZXl9OiAjeyR2YWx1ZX0pXCIpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgQGVsc2Uge1xyXG4gICAgICAgICRtZWRpYS1zdHJpbmc6IGFwcGVuZCgkbWVkaWEtc3RyaW5nLCB1bnF1b3RlKFwiYW5kICgjeyRrZXl9OiAjeyR2YWx1ZX0pXCIpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAkX3JldHVybjogKFxyXG4gICAgdHlwZTogJHR5cGUsXHJcbiAgICBtZWRpYS1zdHJpbmc6IGltcGxvZGUoJG1lZGlhLXN0cmluZyksXHJcbiAgICBxdWVyeS1mYWxsYmFjazogJHF1ZXJ5LWZhbGxiYWNrXHJcbiAgKTtcclxuXHJcbiAgQHJldHVybiAkX3JldHVybjtcclxufVxyXG5cclxuLy8gQlAgW01peGluXVxyXG4vLyAtLS0tLS0tLS0tXHJcbi8vIENvbnZlbmllbmNlIG1peGluIGZvciBNYXBweSBCcmVha3BvaW50c1xyXG5AbWl4aW4gYnAoJHF1ZXJpZXMsICR0eXBlOiBhbGwsICRxdWVyeS1mYWxsYmFjazogbnVsbCwgJGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHMpIHtcclxuICBAaW5jbHVkZSBtYXBweS1icCgkcXVlcmllcywgJHR5cGUsICRxdWVyeS1mYWxsYmFjaywgJGJyZWFrcG9pbnRzKSB7XHJcbiAgICBAY29udGVudDtcclxuICB9XHJcbn1cclxuXHJcbi8vIFBhcnNlIEJQIFtmdW5jdGlvbl1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBQYXJzZXMgYXJndW1lbnRzIGFuZCByZXR1cm5zIGEgbWFwIHdpdGggNCBrZXlzXHJcbkBmdW5jdGlvbiBwYXJzZS1icCgkcXVlcmllcywgJGJyZWFrcG9pbnRzKSB7XHJcbiAgJF9yZXR1cm46ICgpO1xyXG4gICRfaTogMTtcclxuICAkX21pbnc6IG51bGw7XHJcbiAgJF9tYXh3OiBudWxsO1xyXG4gICRfbWluaDogbnVsbDtcclxuICAkX21heGg6IG51bGw7XHJcbiAgJF9sZW5ndGg6IGxlbmd0aCgkcXVlcmllcyk7XHJcblxyXG4gIC8vIENoZWNrcyBmb3Igd2lkdGggcXVlcmllc1xyXG4gICRfbWludzogbnRoKCRxdWVyaWVzLCAxKTtcclxuICAkX21pbnc6IG1hcHB5LXZhbGlkYXRlKCRfbWludywgJGJyZWFrcG9pbnRzKTtcclxuXHJcbiAgLy8gQ2hlY2sgZm9yIHdpZHRoIHF1ZXJpZXNcclxuICBAaWYgJF9taW53IHtcclxuICAgICRfbWludzogbWFwcHktY29udmVydC10by1lbSgkX21pbncpO1xyXG4gICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKG1pbi13aWR0aDogJF9taW53KSk7XHJcbiAgICAkcXVlcmllczogc2V0LW50aCgkcXVlcmllcywgMSwgbnVsbCk7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVja3MgaWYgdGhlcmUgaXMgYSBtYXggd2lkdGggcXVlcnlcclxuICBAaWYgJF9taW53IGFuZCAkX2xlbmd0aCA+PSAyIHtcclxuICAgICRfbWF4dzogbnRoKCRxdWVyaWVzLCAyKTtcclxuICAgICRfbWF4dzogbWFwcHktdmFsaWRhdGUoJF9tYXh3LCAkYnJlYWtwb2ludHMpO1xyXG4gIH1cclxuXHJcbiAgQGlmICRfbWF4dyB7XHJcbiAgICAkX21heHc6IG1hcHB5LWNvbnZlcnQtdG8tZW0oJF9tYXh3IC0gMXB4KTtcclxuICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sIChtYXgtd2lkdGg6ICRfbWF4dykpO1xyXG4gICAgJHF1ZXJpZXM6IHNldC1udGgoJHF1ZXJpZXMsIDIsIG51bGwpO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2tzIGZvciBoZWlnaHQgcXVlcmllc1xyXG4gICRfaDogaW5kZXgoJHF1ZXJpZXMsIGgpIG9yIGluZGV4KCRxdWVyaWVzLCBoZWlnaHQpO1xyXG5cclxuICBAaWYgJF9oIHtcclxuICAgICRfbWluaDogbnRoKCRxdWVyaWVzLCAkX2ggKyAxKTtcclxuICAgICRfbWluaDogbWFwcHktdmFsaWRhdGUoJF9taW5oLCAkYnJlYWtwb2ludHMpO1xyXG5cclxuICAgIEBpZiAkX21pbmgge1xyXG4gICAgICAkX21pbmg6IG1hcHB5LWNvbnZlcnQtdG8tZW0oJF9taW5oKTtcclxuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKG1pbi1oZWlnaHQ6ICRfbWluaCkpO1xyXG4gICAgICAkcXVlcmllczogc2V0LW50aCgkcXVlcmllcywgJF9oICsgMSwgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2tzIGlmIHRoZXJlIGlzIGEgbWF4IGhlaWdodCBxdWVyeVxyXG4gICAgQGlmICRfbGVuZ3RoIC0gJF9oID49IDIge1xyXG4gICAgICAkX21heGg6IG50aCgkcXVlcmllcywgJF9oICsgMik7XHJcbiAgICAgICRfbWF4aDogbWFwcHktdmFsaWRhdGUoJF9tYXhoLCAkYnJlYWtwb2ludHMpO1xyXG4gICAgfVxyXG5cclxuICAgIEBpZiAkX21heGgge1xyXG4gICAgICAkX21heGg6IG1hcHB5LWNvbnZlcnQtdG8tZW0oJF9tYXhoIC0gMXB4KTtcclxuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKG1heC1oZWlnaHQ6ICRfbWF4aCkpO1xyXG4gICAgICAkcXVlcmllczogc2V0LW50aCgkcXVlcmllcywgJF9oICsgMiwgbnVsbCk7XHJcbiAgICB9XHJcbiAgICAvLyBSZXNldCBoIG1hcmtlclxyXG4gICAgJHF1ZXJpZXM6IHNldC1udGgoJHF1ZXJpZXMsICRfaCwgbnVsbCk7XHJcbiAgfVxyXG5cclxuICAvLyBDaGVja3MgZm9yIG90aGVyIHF1ZXJpZXNcclxuICBAd2hpbGUgJF9pIDw9IGxlbmd0aCgkcXVlcmllcykge1xyXG4gICAgJF9rZXk6IG50aCgkcXVlcmllcywgJF9pKTtcclxuXHJcbiAgICBAaWYgJF9rZXkgYW5kICRfbGVuZ3RoIC0gJF9pID49IDEge1xyXG4gICAgICAkX3ZhbDogbnRoKCRxdWVyaWVzLCAkX2kgKyAxKTtcclxuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKCN7JF9rZXl9OiAkX3ZhbCkpO1xyXG4gICAgICAkcXVlcmllczogc2V0LW50aCgkcXVlcmllcywgJF9pLCBudWxsKTtcclxuICAgICAgJHF1ZXJpZXM6IHNldC1udGgoJHF1ZXJpZXMsICRfaSArIDEsIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIEBlbHNlIGlmICRfa2V5IHtcclxuICAgICAgQHdhcm4gdW5xdW90ZSgnXCJNYXBweSBCcmVha3BvaW50cyBpcyBtaXNzaW5nIHZhbHVlIGZvciBtZWRpYSBmZWF0dXJlIFwiI3skX2tleX1cIlwiJyk7XHJcbiAgICB9XHJcbiAgICAkX2k6ICRfaSArIDE7XHJcbiAgfVxyXG4gIEByZXR1cm4gJF9yZXR1cm47XHJcbn1cclxuXHJcbi8vIE1hcHB5IFZhbGlkYXRlIFtGdW5jdGlvbl1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBDaGVja3MgaWYgJHF1ZXJ5IGdpdmVuIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxyXG4vLyAxKSBJcyBhICRrZXkgaW4gdGhlICRicmVha3BvaW50cyBtYXBcclxuLy8gMikgSXMgYSBudW1iZXJcclxuLy8gMykgSXMgYSBcIm1heFwiLCBcIm1heC13aWR0aFwiIG9yIFwibWF4LWhlaWdodFwiIHN0cmluZ1xyXG5AZnVuY3Rpb24gbWFwcHktdmFsaWRhdGUoJHF1ZXJ5LCAkYnJlYWtwb2ludHMpIHtcclxuICAkX3JldHVybjogbnVsbDtcclxuXHJcbiAgQGlmIG1hcC1oYXMta2V5KCRicmVha3BvaW50cywgJHF1ZXJ5KSB7XHJcbiAgICAkX3JldHVybjogbWFwLWdldCgkYnJlYWtwb2ludHMsICRxdWVyeSk7XHJcbiAgfVxyXG5cclxuICBAZWxzZSBpZiB0eXBlLW9mKCRxdWVyeSkgPT0gbnVtYmVyIHtcclxuICAgICRfcmV0dXJuOiAkcXVlcnk7XHJcbiAgfVxyXG5cclxuICBAZWxzZSBpZiAkcXVlcnkgPT0gXCJtYXhcIiBvciAkcXVlcnkgPT0gXCJtYXgtaGVpZ2h0XCIgb3IgJHF1ZXJ5ID09IFwibWF4LXdpZHRoXCIge1xyXG4gICAgJF9yZXR1cm46IDA7XHJcbiAgfVxyXG5cclxuICBAZWxzZSB7XHJcbiAgICAkX3JldHVybjogbnVsbDtcclxuICB9XHJcbiAgQHJldHVybiAkX3JldHVybjtcclxufVxyXG5cclxuLy8gTWFwcHkgQ29udmVydCBUbyBFbSBbRnVuY3Rpb25dXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQ2hlY2tzIGFuZCBjb252ZXJ0cyBweCB2YWx1ZXMgdG8gZW0uIExlYXZlIG90aGVyIHVuaXRzIHVudG91Y2hlZC5cclxuXHJcbkBmdW5jdGlvbiBtYXBweS1jb252ZXJ0LXRvLWVtKCR2YWwpIHtcclxuICBAaWYgdW5pdCgkdmFsKSA9PSBcInB4XCIgb3IgJHZhbCA9PSAwIHtcclxuICAgIEByZXR1cm4gbWFwcHktZW0oJHZhbCk7XHJcbiAgfSBAZWxzZSBpZiB1bml0KCR2YWwpID09IFwiZW1cIiB7XHJcbiAgICBAcmV0dXJuICR2YWw7XHJcbiAgfSBAZWxzZSBpZiB1bml0KCR2YWwpID09IFwicmVtXCIge1xyXG4gICAgQHJldHVybiBtYXBweS1zdHJpcC11bml0KCR2YWwpICogMWVtO1xyXG4gIH0gQGVsc2Uge1xyXG4gICAgQGVycm9yIHVucXVvdGUoXCJCcmVha3BvaW50IHZhbHVlIG11c3QgaGF2ZSBhIHVuaXQgaWYgaXQncyBhIG51bWJlclwiKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIE1hcHB5IEVtIFtGdW5jdGlvbl1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gQ29udmVydHMgcGl4ZWxzIHRvIGVtIHdpdGggJGJhc2UtZm9udC1zaXplXHJcbi8vIC0gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vaWp5LzE0NDE5NjdcclxuQGZ1bmN0aW9uIG1hcHB5LWVtKCR0YXJnZXQsICRjb250ZXh0OiAxNnB4KSB7XHJcbiAgQGlmICR0YXJnZXQgPT0gMCB7XHJcbiAgICBAcmV0dXJuIDA7XHJcbiAgfVxyXG4gIEByZXR1cm4gJHRhcmdldCAvICRjb250ZXh0ICogMWVtO1xyXG59XHJcblxyXG5AZnVuY3Rpb24gbWFwcHktc3RyaXAtdW5pdCgkbnVtKSB7XHJcbiAgQHJldHVybiAkbnVtIC8gKCRudW0gKiAwICsgMSk7XHJcbn1cclxuXHJcbi8vIEltcGxvZGUgW0Z1bmN0aW9uXVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBJbXBsb2RlIGEgbGlzdCBpbnRvIGEgc3RyaW5nXHJcbkBmdW5jdGlvbiBpbXBsb2RlKCRsaXN0LCAkZ2x1ZTogJyAnKSB7XHJcbiAgJHJlczogbnVsbDtcclxuICAkbGVuOiBsZW5ndGgoJGxpc3QpO1xyXG5cclxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRsZW4ge1xyXG4gICAgJGU6IG50aCgkbGlzdCwgJGkpO1xyXG4gICAgQGlmICRpID09ICRsZW4ge1xyXG4gICAgICAkcmVzOiB1bnF1b3RlKFwiI3skcmVzfSN7JGV9XCIpO1xyXG4gICAgfVxyXG4gICAgQGVsc2Uge1xyXG4gICAgICAkcmVzOiB1bnF1b3RlKFwiI3skcmVzfSN7JGV9I3skZ2x1ZX1cIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICRyZXM7XHJcbn0iLCJcbkBpbXBvcnQgJ3ByaXZhdGUnO1xuQGltcG9ydCAncHVibGljJztcblxuLy8vL1xuLy8vIEBhdXRob3IgWmVsbCBMaWV3XG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAZ3JvdXAgY29uZmlnXG4vLy8vXG5cbi8vIEJyZWFrcG9pbnRzIE1hcFxuLy8gLS0tLS0tLS0tLVxuLy8vIENvbnRhaW5zIGFsbCBicmVha3BvaW50cyBUeXBpIHVzZXMgd2hlbmV2ZXIgd3JpdGVzIG1lZGlhIHF1ZXJpZXMuXG4vLy8gUG9zc2libGUgdG8gb3V0cHV0IG1lZGlhIHF1ZXJpZXMgaW4gZW0gKGV2ZW4gd2hlbiB5b3Ugd3JpdGUgaW4gcGl4ZWxzKVxuLy8vIEBleGFtcGxlXG4vLy8gICAkYnJlYWtwb2ludHM6IChcbi8vLyAgICAgc21hbGw6IDQwMHB4LFxuLy8vICAgICBtZWQ6ICAgNjAwcHgsXG4vLy8gICAgIGxhcmdlOiA4MDBweFxuLy8vICAgKTtcbi8vLyBAc2VlIHR5cGktYnJlYWtwb2ludFxuJGJyZWFrcG9pbnRzOiAoKSAhZGVmYXVsdDtcblxuLy8gVHlwZWZhY2VzIE1hcFxuLy8gLS0tLS0tLS0tLVxuLy8vIENvbnRhaW5zIHR5cGVmYWNlcyB0aGF0IFR5cGkgdXNlcy5cbi8vLyBAcHJvcCB7TnVtYmVyfSBmb250LXNpemUtcmF0aW8gWzFdIC0gcmF0aW8gb2YgZm9udC1zaXplIHRvIHByaW1hcnkgZm9udC1zaXplXG4vLy8gQHByb3Age01hcH0gc3RhY2sgLSBmb250IHN0YWNrXG4vLy8gQHByb3Age01hcH0gd2VpZ2h0cyAtIGZvbnQgd2VpZ2h0c1xuLy8vIEBleGFtcGxlXG4vLy8gICAkdHlwZWZhY2VzOiAoXG4vLy8gICAgIHByaW1hcnk6IChcbi8vLyAgICAgICBmb250LXNpemUtcmF0aW86IDEsXG4vLy8gICAgICAgc3RhY2s6IChIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmKSxcbi8vLyAgICAgICB3ZWlnaHRzOiAoXG4vLy8gICAgICAgICBsaWdodDogMzAwLFxuLy8vICAgICAgICAgbm9ybWFsOiA0MDAsXG4vLy8gICAgICAgICBib2xkOiA3MDBcbi8vLyAgICAgICApLFxuLy8vICAgICApXG4vLy8gICApO1xuJHR5cGVmYWNlczogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIFR5cGlcbi8vIC0tLS0tLS0tLS1cbi8vLyBDb250YWlucyBmb250LW1hcCwgd2hpY2ggaW4gdHVybiBjb250YWlucyBmb250LXNpemUgYW5kXG4vLy8gbGluZS1oZWlnaHQgcHJvcGVydGllcyB1c2VkIGF0IGFsbCBicmVha3BvaW50cy5cbi8vL1xuLy8vIC0gKipGaXJzdCB2YWx1ZSoqIC0gZm9udC1zaXplIChzZWUgYmVsb3cpXG4vLy8gLSAqKnNlY29uZCB2YWx1ZSoqIC0gbGluZS1oZWlnaHQgKG11c3QgYmUgdW5pdGxlc3MpXG4vLy9cbi8vLyAqKkZvbnQtc2l6ZSoqXG4vLy9cbi8vLyBGb250LXNpemUgY2FuIGVpdGhlciBiZSBlaXRoZXIgb2YgdGhlc2UgdmFsdWVzLiBUaGV5IHdpbGxcbi8vLyBhdXRvbWF0aWNhbGx5IGJlIGNvbnZlcnRlZCBpbnRvIGByZW1gIG9yIGBlbWBcbi8vL1xuLy8vIC0gYHB4YCAtIGJhc2UgZm9udC1zaXplcyBtdXN0IGJlIHdyaXR0ZW4gaW4gcGl4ZWxzXG4vLy8gLSBgZW1gXG4vLy8gLSB1bml0bGVzcyAocmVxdWlyZXMgdHlwaS1tcylcbi8vL1xuLy8vIEBwcm9wIHtNYXB9ICRmb250LW1hcCAtIEZvbnQgbWFwIHRoYXQgaG9sZHMgYnJlYWtwb2ludCBrZXlcbi8vLyBAcHJvcCB7c3RyaW5nfSAkYnJlYWtwb2ludCAtIGhvbGRzIGZvbnQtc2l6ZSBhbmQgbGluZS1oZWlnaHQgbGlzdFxuLy8vXG4vLy8gQGV4YW1wbGVcbi8vLyAgICR0eXBpOiAoXG4vLy8gICAgIGJhc2U6IChcbi8vLyAgICAgICBudWxsOiAoMThweCwgMS41KSxcbi8vLyAgICAgICBzbWFsbDogMjBweCxcbi8vLyAgICAgICBtZWQ6IDIycHgsXG4vLy8gICAgICAgbGFyZ2U6ICgyNHB4LCAxLjYpXG4vLy8gICAgICksXG4vLy8gICAgIGgxOiAoXG4vLy8gICAgICAgbnVsbDogKDI0cHgsIDEuMyksXG4vLy8gICAgICAgbWVkOiAyZW0sXG4vLy8gICAgICAgbGFyZ2U6IDNlbVxuLy8vICAgICApXG4vLy8gICApO1xuLy8vIEBzZWUgdHlwaS1tc1xuLy8vIEByZXF1aXJlcyAkYnJlYWtwb2ludHNcbiR0eXBpOiAoXG4gIGJhc2U6IChcbiAgICBudWxsOiAoMTZweCwgMS41KVxuICApXG4pICFkZWZhdWx0O1xuXG4vLyBUeXBpLW1zXG4vLyAtLS0tLS0tLS0tXG4vLy8gQ29udGFpbnMgbW9kdWxhciBzY2FsZSBiYXNlIGFuZCByYXRpb3MgZm9yXG4vLy8geW91IHRvIGNoYW5nZSByYXRpb3MgYW5kIGJhc2VzIGF0IGRpZmZlcmVudFxuLy8vIGJyZWFrcG9pbnRzLlxuLy8vXG4vLy8gKipNYWtlIHN1cmUqKiAkdHlwaS1tcywgJHR5cGkgYW5kICRicmVha3BvaW50cyAqKmNvbnRhaW5cbi8vLyBhbGwgYnJlYWtwb2ludHMqKiAoZXhjZXB0IG51bGwpIGlmIHlvdSB1c2UgdGhpcyBmdW5jdGlvbmFsaXR5XG4vLy9cbi8vLyBAcmVxdWlyZXMgJHR5cGlcbi8vLyBAcmVxdWlyZXMgJGJyZWFrcG9pbnRzXG4vLy9cbi8vLyBAZXhhbXBsZVxuLy8vICAgJHR5cGktbXM6IChcbi8vLyAgICAgbnVsbDogMS4yLCAvLyBvbmUgcmF0aW86IDEuMlxuLy8vICAgICBzbWFsbDogMS4yLFxuLy8vICAgICBtZWQ6ICgxLjIgMS41KSwgLy8gdHdvIHJhdGlvczogMS4yLCAxLjVcbi8vLyAgICAgbGFyZ2U6ICgxZW0gMmVtIDEuMiksIC8vIHR3byBiYXNlczogMWVtLCAyZW0gfCBvbmUgcmF0aW86IDEuMlxuLy8vICAgICBodWdlOiAoMS41ZW0gMS4yIDEuNSkgLy8gb25lIGJhc2U6IDEuNWVtIHwgdHdvIHJhdGlvczogMS4yLCAxLjVcbi8vLyAgICk7XG4kdHlwaS1tczogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIFR5cGktYnJlYWtwb2ludFxuLy8gLS0tLS0tLS0tLVxuLy8vIEludGVncmF0ZXMgVHlwaSB3aXRoIE1hcHB5IEJyZWFrcG9pbnRzIG9yIEJyZWFrcG9pbnQtc2Fzc1xuLy8vIEBleGFtcGxlXG4vLy8gICAkdHlwaS1icmVha3BvaW50OiAnbWFwcHktYnAnOyAvLyB1c2VzIG1hcHB5LWJyZWFrcG9pbnQgdG8gY3JlYXRlIG1lZGlhIHF1ZXJpZXNcbi8vLyAgICR0eXBpLWJyZWthcG9pbnQ6ICdicmVha3BvaW50JzsgLy8gdXNlcyBicmVha3BvaW50LXNhc3MgdG8gY3JlYXRlIG1lZGlhIHF1ZXJpZXNcbi8vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vemVsbHdrL21hcHB5LWJyZWFrcG9pbnRzIE1hcHB5LWJyZWFrcG9pbnRzXG4vLy8gQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2F0LWltcG9ydC9icmVha3BvaW50IEJyZWFrcG9pbnQgU2Fzc1xuJHR5cGktYnJlYWtwb2ludDogbnVsbCAhZGVmYXVsdDtcbiIsIkBpbXBvcnQgJ3ByaXZhdGUvYmFzZWxpbmUvYmFzZWxpbmUnO1xuQGltcG9ydCAncHJpdmF0ZS9icmVha3BvaW50cy9icmVha3BvaW50cyc7XG5AaW1wb3J0ICdwcml2YXRlL2NhbGMvY2FsYyc7XG5AaW1wb3J0ICdwcml2YXRlL3R5cGVmYWNlcy90eXBlZmFjZXMnO1xuQGltcG9ydCAncHJpdmF0ZS91dGlscy91dGlscyc7XG5AaW1wb3J0ICdwcml2YXRlL3dyaXRlL3dyaXRlJztcbiIsIi8vIFJlcXVpcmVzXG4vLyB0eXBlZmFjZVxuLy8gdHlwZWZhY2VzXG4vLyB0YXJnZXQgbWFwXG4vLyBiYXNlIG1hcFxuQG1peGluIF90eS13cml0ZS1iYXNlbGluZS1wdXNoIChcbiAgJGZvbnQtc2l6ZTogJGZvbnQtc2l6ZSxcbiAgJGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQsXG4gICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgJF9tYXA6ICRfbWFwXG4pIHtcbiAgJHR5cGVmYWNlOiBtYXAtZ2V0KCRfbWFwLCB0eXBlZmFjZSk7XG4gICR0eXBlZmFjZXM6IG1hcC1nZXQoJF9tYXAsIHR5cGVmYWNlcyk7XG5cbiAgJGxpbmUtaGVpZ2h0OiBfdHktZ2V0LWxpbmUtaGVpZ2h0LWZvci1iYXNlbGluZS1wdXNoKFxuICAgICRsaW5lLWhlaWdodCxcbiAgICAkYnJlYWtwb2ludCxcbiAgICAkX21hcFxuICApO1xuXG4gICRwdXNoLWFtdDogX3R5LWdldC1iYXNlbGluZS1wdXNoLWFtdChcbiAgICAkZm9udC1zaXplOiAkZm9udC1zaXplLFxuICAgICRsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LFxuICAgICR0eXBlZmFjZTogJHR5cGVmYWNlLFxuICAgICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbiAgKTtcblxuICAvLyBXcml0ZSBvdXRwdXRcbiAgcGFkZGluZy10b3A6ICRwdXNoLWFtdDtcbiAgbWFyZ2luLWJvdHRvbTogJHB1c2gtYW10ICogLTE7XG59XG5cbi8vIF90eS1nZXQtYmFzZWxpbmUtcHVzaC1hbXRcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgYW1vdW50IHRvIHB1c2ggYmFzZWxpbmUgYnlcbi8vID09PT09PT09PT1cbkBmdW5jdGlvbiBfdHktZ2V0LWJhc2VsaW5lLXB1c2gtYW10KFxuICAkZm9udC1zaXplOiAkZm9udC1zaXplLFxuICAkbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodCxcbiAgJHR5cGVmYWNlOiBudWxsLFxuICAkdHlwZWZhY2VzOiAkdHlwZWZhY2VzXG4pIHtcbiAgJGNhcC1oZWlnaHQ6IDE7XG4gIEBpZiB1bml0KCRmb250LXNpemUpICE9ICdlbScge1xuICAgIEBlcnJvciAnJGZvbnQtc2l6ZSBtdXN0IGJlIGluIGVtJztcbiAgfVxuICBAaWYgbm90IHVuaXRsZXNzKCRsaW5lLWhlaWdodCkge1xuICAgIEBlcnJvciAnJGxpbmUtaGVpZ2h0IG11c3QgYmUgdW5pdGxlc3MnO1xuICB9XG4gIEBpZiAkdHlwZWZhY2Uge1xuICAgICRjYXAtaGVpZ2h0OiBfdHktcGFyc2UtY2FwLWhlaWdodCgkdHlwZWZhY2UsICR0eXBlZmFjZXMpO1xuICB9XG4gIEByZXR1cm4gJGZvbnQtc2l6ZSAqICgkbGluZS1oZWlnaHQgLSAkY2FwLWhlaWdodCkgKiAwLjU7XG59XG5cbi8vIF90eS1nZXQtbGluZS1oZWlnaHQtZm9yLWJhc2VsaW5lLXB1c2hcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgbGluZS1oZWlnaHQgdmFsdWUgdXNlZCB0byBjYWxjIGJhc2VsaW5lLXB1c2ggYW10XG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWdldC1saW5lLWhlaWdodC1mb3ItYmFzZWxpbmUtcHVzaChcbiAgJGxpbmUtaGVpZ2h0LFxuICAkYnJlYWtwb2ludDogbnVsbCxcbiAgJF9tYXA6IG51bGxcbikge1xuICAvLyBzaG91bGQgdXNlIG93biBsaW5lLWhlaWdodCBpZiBwcmVzZW50XG4gIEBpZiAkbGluZS1oZWlnaHQge1xuICAgIEByZXR1cm4gJGxpbmUtaGVpZ2h0O1xuICB9XG5cbiAgQGlmIG5vdCAkX21hcCB7IEBlcnJvciBcIiRfbWFwIG5vdCBmb3VuZFwiOyB9XG5cbiAgLy8gRmFsbHMgYmFjayB0byBvd24gbGluZS1oZWlnaHQgZnJvbSBwcmV2aW91cyBicmVha3BvaW50XG4gICR0YXJnZXQtbWFwOiBtYXAtZ2V0KCRfbWFwLCB0YXJnZXQtbWFwKTtcbiAgJF9saW5lLWhlaWdodDogX3R5LWdldC1jbG9zZXN0LWxpbmUtaGVpZ2h0KCR0YXJnZXQtbWFwLCAkYnJlYWtwb2ludCk7XG5cbiAgQGlmICRfbGluZS1oZWlnaHQge1xuICAgIEByZXR1cm4gJF9saW5lLWhlaWdodDtcbiAgfVxuXG4gIC8vIEZhbGxzIGJhY2sgdG8gbGluZS1oZWlnaHQgZnJvbSBiYXNlIG1hcCwgc2FtZSBicmVha3BvaW50XG4gICRfYmFzZS1tYXA6IG1hcC1nZXQoJF9tYXAsIGJhc2VtYXApO1xuICAkX3RhcmdldC1icmVha3BvaW50LW1hcDogbWFwLWdldCgkX2Jhc2UtbWFwLCAkYnJlYWtwb2ludCk7XG4gICRfbGluZS1oZWlnaHQ6IF90eS1nZXQtbGluZS1oZWlnaHQoJF90YXJnZXQtYnJlYWtwb2ludC1tYXApO1xuXG4gIEBpZiAkX2xpbmUtaGVpZ2h0IHtcbiAgICBAcmV0dXJuICRfbGluZS1oZWlnaHQ7XG4gIH1cblxuICAvLyBGYWxscyBiYWNrIHRvIGxpbmUtaGVpZ2h0IGZyb20gYmFzZSBtYXAsIHByZXZpb3VzIGJyZWFrcG9pbnRcbiAgJF9saW5lLWhlaWdodDogX3R5LWdldC1jbG9zZXN0LWxpbmUtaGVpZ2h0KCRfYmFzZS1tYXAsICRicmVha3BvaW50KTtcblxuICBAaWYgJF9saW5lLWhlaWdodCB7XG4gICAgQHJldHVybiAkX2xpbmUtaGVpZ2h0O1xuICB9XG5cbiAgQHJldHVybiAxO1xufVxuXG4vLyBfdHktZ2V0LWNsb3Nlc3QtbGluZS1oZWlnaHRcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgY2xvc2VzdCBsaW5lLWhlaWdodCB2YWx1ZSBmb3IgYmFzZWxpbmUgcHVzaCBjYWxjXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWdldC1jbG9zZXN0LWxpbmUtaGVpZ2h0KFxuICAkX3RhcmdldC1tYXAsXG4gICRicmVha3BvaW50XG4pIHtcbiAgJF9tYXAta2V5czogbWFwLWtleXMoJF90YXJnZXQtbWFwKTtcbiAgJF9jdXJyZW50LWJwLWluZGV4OiBpbmRleCgkX21hcC1rZXlzLCAkYnJlYWtwb2ludCk7XG4gICRfY2xvc2VzdC1saDogbnVsbDtcblxuICBAd2hpbGUgJF9jdXJyZW50LWJwLWluZGV4ID4gMSB7XG4gIC8vIEB3aGlsZSBub3QgJF9jbG9zZXN0LWxoIHtcbiAgICAkX2Nsb3Nlc3QtaW5kZXg6ICRfY3VycmVudC1icC1pbmRleCAtIDE7XG4gICAgJF9wcmV2LWJyZWFrcG9pbnQta2V5OiBudGgoJF9tYXAta2V5cywgJF9jbG9zZXN0LWluZGV4KTtcbiAgICAkX3ByZXYtZm9udC1tYXAtYnA6IG1hcC1nZXQoJF90YXJnZXQtbWFwLCAkX3ByZXYtYnJlYWtwb2ludC1rZXkpO1xuICAgICRfbGluZS1oZWlnaHQ6IF90eS1nZXQtbGluZS1oZWlnaHQoJF9wcmV2LWZvbnQtbWFwLWJwKTtcblxuICAgIC8vIEJyZWFrcyBsb29wXG4gICAgQGlmICRfbGluZS1oZWlnaHQge1xuICAgICAgJF9jbG9zZXN0LWxoOiAkX2xpbmUtaGVpZ2h0O1xuICAgICAgJF9jdXJyZW50LWJwLWluZGV4OiAxO1xuICAgICAgQHJldHVybiAkX2Nsb3Nlc3QtbGg7XG4gICAgfVxuXG4gICAgQGVsc2Uge1xuICAgICAgJF9jdXJyZW50LWJwLWluZGV4OiAkX2Nsb3Nlc3QtaW5kZXg7XG5cbiAgICAgIC8vIENvbXBsZXRlZCBvd24gbWFwLCBidXQgY291bGRuJ3QgZmluZCBpbmRleC5cbiAgICAgIC8vIEJyZWFrcyBsb29wLiBGYWxsIGJhY2sgb24gbmV4dC5cbiAgICAgIEBpZiAoJF9jbG9zZXN0LWluZGV4ID09IDEpIHtcbiAgICAgICAgJF9jbG9zZXN0LWxoOiB0cnVlO1xuICAgICAgICBAcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gZmFsc2U7XG59XG5cbi8vIF90eS1wYXJzZS1jYXAtaGVpZ2h0XG4vLyAtLS0tLS0tLS0tXG4vLyBHZXRzIGFuZCBlbnN1cmVzIGNhcC1oZWlnaHQgaXMgcHJlc2VudFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1wYXJzZS1jYXAtaGVpZ2h0KFxuICAkdHlwZWZhY2UsXG4gICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbikge1xuICAkdHlwZWZhY2UtbWFwOiBfdHktZ2V0LXR5cGVmYWNlLW1hcCgkdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xuICBAaWYgbWFwLWhhcy1rZXkoJHR5cGVmYWNlLW1hcCwgY2FwLWhlaWdodCkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkdHlwZWZhY2UtbWFwLCBjYXAtaGVpZ2h0KTtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yICdjYXAtaGVpZ2h0IG5vdCBmb3VuZCBpbiAjeyR0eXBlZmFjZS1tYXB9JztcbiAgfVxufVxuIiwiQGltcG9ydCAndXRpbHMnO1xuXG4vLyBfdHktd3JpdGUtYnJlYWtwb2ludHNcbi8vIC0tLS0tLS0tLS1cbi8vIC0gd3JpdGVzIHByb3BzIGZvciBldmVyeSB2YWxpZCBicmVha3BvaW50XG4vLyA9PT09PT09PT09XG5AbWl4aW4gX3R5LXdyaXRlLWJyZWFrcG9pbnRzIChcbiAgJF9tYXBcbikge1xuICAkdGFyZ2V0OiBtYXAtZ2V0KCRfbWFwLCB0YXJnZXQpO1xuICAkYnJlYWtwb2ludHM6IG1hcC1nZXQoJF9tYXAsIGJyZWFrcG9pbnRzKTtcbiAgJHR5cGk6IG1hcC1nZXQoJF9tYXAsIHR5cGkpO1xuICAkcmVtOiBtYXAtZ2V0KCRfbWFwLCByZW0pO1xuICAkYnJlYWtwb2ludC1saWI6IG1hcC1nZXQoJF9tYXAsIGJyZWFrcG9pbnQtbGliKTtcblxuICAkYmFzZW1hcDogbnVsbDtcbiAgJHRhcmdldC1tYXA6IG51bGw7XG5cbiAgLy8gRW5zdXJlcyB0YXJnZXQgbWFwIGlzIHByZXNlbnRcbiAgQGlmIG5vdCBtYXAtaGFzLWtleSgkdHlwaSwgJHRhcmdldCkge1xuICAgIEBlcnJvciBcIiN7JHRhcmdldH0gbm90IGZvdW5kIGluICR0eXBpIG1hcFwiO1xuICB9XG5cbiAgJHRhcmdldC1tYXA6IG1hcC1nZXQoJHR5cGksICR0YXJnZXQpO1xuXG4gIC8vIEVuc3VyZXMgYmFzZSBtYXAgaXMgcHJlc2VudFxuICBAaWYgbm90IG1hcC1oYXMta2V5KCR0eXBpLCBiYXNlKSB7XG4gICAgQGVycm9yIFwiYmFzZSBrZXkgaXMgbWlzc2luZyBmcm9tICR0eXBpIG1hcFwiO1xuICB9XG5cbiAgJGJhc2VtYXA6IG1hcC1nZXQoJHR5cGksIGJhc2UpO1xuXG4gICRfbWFwOiBtYXAtbWVyZ2UoJF9tYXAsIChcbiAgICBiYXNlbWFwOiAkYmFzZW1hcCxcbiAgICB0YXJnZXQtbWFwOiAkdGFyZ2V0LW1hcFxuICApKTtcblxuICBAZWFjaCAkYnJlYWtwb2ludCwgJHRhcmdldC12YWx1ZSBpbiAkdGFyZ2V0LW1hcCB7XG4gICAgQGlmICRicmVha3BvaW50ID09IG51bGwge1xuICAgICAgQGluY2x1ZGUgX3R5LW91dHB1dC1wcm9wcyhcbiAgICAgICAgJF9tYXA6ICRfbWFwLFxuICAgICAgICAkYnJlYWtwb2ludDogJGJyZWFrcG9pbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgQGVsc2Uge1xuICAgICAgQGluY2x1ZGUgX3R5LW91dHB1dC13aXRoLWJyZWFrcG9pbnQtbGlicmFyeShcbiAgICAgICAgJGJyZWFrcG9pbnQtbGliLFxuICAgICAgICAkYnJlYWtwb2ludDogJGJyZWFrcG9pbnQsXG4gICAgICAgICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzXG4gICAgICApIHtcbiAgICAgICAgQGluY2x1ZGUgX3R5LW91dHB1dC1wcm9wcyhcbiAgICAgICAgICAkX21hcDogJF9tYXAsXG4gICAgICAgICAgJGJyZWFrcG9pbnQ6ICRicmVha3BvaW50XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIF90eS1vdXRwdXQtd2l0aC1icmVha3BvaW50LWxpYnJhcnlcbi8vIC0tLS0tLS0tLS1cbi8vIE91dHB1dHMgd2l0aCBicmVha3BvaW50IGxpYnJhcnlcbi8vID09PT09PT09PT1cbkBtaXhpbiBfdHktb3V0cHV0LXdpdGgtYnJlYWtwb2ludC1saWJyYXJ5IChcbiAgJGxpYnJhcnk6IGZhbHNlLFxuICAkYnJlYWtwb2ludDogbnVsbCxcbiAgJGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHNcbikge1xuICAkbGliOiBudWxsO1xuXG4gIC8vIFBhcnNlcyBsaWJyYXJ5XG4gIEBpZiAkbGlicmFyeSB7XG4gICAgJGxpYjogX3R5LXBhcnNlLWJyZWFrcG9pbnQtbGliKCRsaWJyYXJ5KTtcbiAgICBAaWYgbm90ICRsaWIge1xuICAgICAgQGVycm9yIFwiI3skbGlifSBtaXhpbiBub3QgZm91bmRcIjtcbiAgICB9XG4gIH1cblxuXG4gIEBpZiAkbGliID09ICdicmVha3BvaW50JyB7XG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludC1zZXQoJ3RvIGVtcycsIHRydWUpO1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQobWFwLWdldCgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRsaWIgPT0gJ21hcHB5LWJwJyB7XG4gICAgQGluY2x1ZGUgbWFwcHktYnAobWFwLWdldCgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAje21hcC1nZXQoJGJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludCl9KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn0iLCIvLyBfdHktaGFzLWJyZWFrcG9pbnRcbi8vIC0tLS0tLS0tLS1cbi8vIC0gRW5zdXJlcyAkYnJlYWtwb2ludHMgYW5kICR0eXBpIGhhcyBicmVha3BvaW50XG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWhhcy1icmVha3BvaW50IChcbiAgJHRhcmdldDogbnVsbCxcbiAgJGJyZWFrcG9pbnQ6ICRicmVha3BvaW50LFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cyxcbiAgJGJhc2VtYXA6ICRiYXNlbWFwXG4gICkge1xuXG4gIEBpZiAkdGFyZ2V0ID09ICdiYXNlJyB7XG4gICAgQHJldHVybiB0cnVlO1xuICB9XG5cbiAgQGlmIG5vdCBtYXAtaGFzLWtleSgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSB7XG4gICAgQGVycm9yIFwiJGJyZWFrcG9pbnRzIG1hcCBpcyBtaXNzaW5nICN7JGJyZWFrcG9pbnR9IGtleVwiO1xuICB9XG5cbiAgLy8gQGlmIG5vdCBtYXAtaGFzLWtleSgkYmFzZW1hcCwgJGJyZWFrcG9pbnQpIHtcbiAgLy8gICBAZXJyb3IgXCIkdHlwaSBiYXNlIGtleSBpcyBtaXNzaW5nICN7JGJyZWFrcG9pbnR9IGtleVwiO1xuICAvLyB9XG5cbiAgQHJldHVybiB0cnVlO1xufVxuXG4vLyBfaGFzLWJyZWFrcG9pbnQtbGlicmFyeVxuLy8gLSBDaGVja3MgaWYgYnJlYWtwb2ludCBsaWJyYXJ5IGlzIGluc3RhbGxlZFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1oYXMtYnJlYWtwb2ludC1saWJyYXJ5KCRsaWIpIHtcbiAgLy8gQWN0aXZhdGVzIGlmICR0eXBpLWJyZWFrcG9pbnQgPSBtZW50aW9uZWQgYnJlYWtwb2ludFxuICBAaWYgJHR5cGktYnJlYWtwb2ludCA9PSAkbGliIHtcbiAgICBAaWYgbWl4aW4tZXhpc3RzKCRsaWIpIHsgQHJldHVybiB0cnVlOyB9XG4gICAgQGVsc2UgeyBAZXJyb3IgXCIjeyRsaWJ9IG5vdCBmb3VuZFwiOyB9XG4gIH1cbiAgLy8gRWxzZSB1c2UgZGVmYXVsdCBicmVha3BvaW50IGJ1aWx0IGluIHR5cGlcbiAgQGVsc2Uge1xuICAgIEByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gX3R5LXBhcnNlLWJyZWFrcG9pbnQtbGliXG4vLyAtLS0tLS0tLS0tXG4vLyBDaGVja3MgaWYgYnJlYWtwb2ludCBsaWJyYXJ5IGlzIHN1cHBvcnRlZFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1wYXJzZS1icmVha3BvaW50LWxpYigkbGliKSB7XG4gIEBpZiBtaXhpbi1leGlzdHMoJGxpYikge1xuICAgIEByZXR1cm4gJGxpYjtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufSIsIkBpbXBvcnQgJ2NhbGMtZm9udC1zaXplJztcbkBpbXBvcnQgJ2NhbGMtbXMtc2l6ZSc7XG4iLCIvLyBDYWxjdWxhdGVzIGZvbnQgc2l6ZSB0byByZXR1cm4gdG8gdHlwaVxuLy8gLS0tLS0tLS0tLVxuLy8gLSByZXR1cm4gZm9udC1zaXplIGluIHJlbSBvciBlbVxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1jYWxjLWZvbnQtc2l6ZSAoXG4gICRmb250LXNpemU6ICRmb250LXNpemUsXG4gICRiYXNlbWFwOiAkYmFzZW1hcCxcbiAgJHJlbTogJHJlbSxcbiAgJGJyZWFrcG9pbnQ6IG51bGwsXG4gICR0eXBlZmFjZS1tdWx0aXBsaWVyOiAxXG4pIHtcbiAgLy8gVXNpbmcgdHlwaS1tcyBpZiBmb250LXNpemUgaXMgdW5pdGxlc3NcbiAgQGlmIHVuaXRsZXNzKCRmb250LXNpemUpIHtcbiAgICAkc3RlcDogJGZvbnQtc2l6ZTtcbiAgICBAaWYgJHJlbSB7XG4gICAgICBAcmV0dXJuIF90eS1tcy10by1yZW0oJHN0ZXAsICRicmVha3BvaW50KSAqICR0eXBlZmFjZS1tdWx0aXBsaWVyO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQHJldHVybiBfdHktbXMtdG8tZW0oJHN0ZXAsICRicmVha3BvaW50KSAqICR0eXBlZmFjZS1tdWx0aXBsaWVyO1xuICAgIH1cbiAgfVxuXG4gICRiYXNlLW51bGw6IG51bGw7XG4gICRiYXNlLWZvbnQtc2l6ZTogbnVsbDtcblxuICAvLyBDYWxjdWxhdGlvbiB1c2VzIGJhc2UtbnVsbCBiZWNhc2UgZXZlcnl0aGluZ1xuICAvLyBpcyByZWxhdGl2ZSB0byB0aGUgYmFzZSBmb250LXNpemUuXG4gIEBpZiBtYXAtaGFzLWtleSgkYmFzZW1hcCwgbnVsbCkge1xuICAgICRiYXNlLW51bGw6IG1hcC1nZXQoJGJhc2VtYXAsIG51bGwpO1xuICAgICRiYXNlLWZvbnQtc2l6ZTogbnRoKCRiYXNlLW51bGwsIDEpO1xuICB9IEBlbHNlIHtcbiAgICBAZXJyb3IgJ0Jhc2UgbWFwIG11c3QgaGF2ZSBudWxsIGtleSdcbiAgfVxuXG4gIC8vIENvbnZlcnRzIHRvIHJlbVxuICBAaWYgJHJlbSB7XG4gICAgQGlmIHVuaXQoJGZvbnQtc2l6ZSkgPT0gJ3B4JyB7XG4gICAgICBAcmV0dXJuIF90eS10by1yZW0oJGZvbnQtc2l6ZSwgJGJhc2UtZm9udC1zaXplKSAqICR0eXBlZmFjZS1tdWx0aXBsaWVyO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQHJldHVybiBfdHktdG8tcmVtKCRmb250LXNpemUpICogJHR5cGVmYWNlLW11bHRpcGxpZXI7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29udmVydHMgdG8gZW1cbiAgQGVsc2Uge1xuICAgIEBpZiB1bml0KCRmb250LXNpemUpID09ICdweCcge1xuICAgICAgQHJldHVybiBfdHktdG8tZW0oJGZvbnQtc2l6ZSwgJGJhc2UtZm9udC1zaXplKSAqICR0eXBlZmFjZS1tdWx0aXBsaWVyO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQHJldHVybiBfdHktdG8tZW0oJGZvbnQtc2l6ZSkgKiAkdHlwZWZhY2UtbXVsdGlwbGllcjtcbiAgICB9XG4gIH1cbn0iLCIvLyBfdHktY2FsYy1tc1xuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1jYWxjLW1zKFxuICAkc3RlcCxcbiAgJGJyZWFrcG9pbnQ6IG51bGwsXG4gICR0eXBpLW1zOiAkdHlwaS1tc1xuKSB7XG4gICRtcy1zZXR0aW5nOiBudWxsO1xuICAkdHktbXMtYmFzZTogKCk7XG4gICR0eS1tcy1yYXRpbzogKCk7XG5cbiAgQGlmIHR5cGUtb2YoJHR5cGktbXMpICE9ICdtYXAnIHtcbiAgICBAZXJyb3IgXCIkdHlwaS1tcyBtYXAgbm90IGZvdW5kXCI7XG4gIH1cblxuICBAaWYgbWFwLWhhcy1rZXkoJHR5cGktbXMsICRicmVha3BvaW50KSB7XG4gICAgJG1zLXNldHRpbmc6IG1hcC1nZXQoJHR5cGktbXMsICRicmVha3BvaW50KTtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yIFwiJHR5cGktbXMgZG9lcyBub3QgY29udGFpbiAjeyRicmVha3BvaW50fVwiO1xuICB9XG5cbiAgQGlmIGxlbmd0aCgkbXMtc2V0dGluZykgPT0gMCB7XG4gICAgQGVycm9yIFwiJHR5cGktbXMgYXQgI3skYnJlYWtwb2ludH0gbXVzdCBub3QgYmUgZW1wdHlcIjtcbiAgfVxuXG4gIC8vIE9ubHkgcmF0aW8gaWYgbGVuZ3RoID09IDFcbiAgQGlmIGxlbmd0aCgkbXMtc2V0dGluZykgPT0gMSB7XG4gICAgJF9pcy1yYXRpbzogX3R5LWlzLXJhdGlvKCRtcy1zZXR0aW5nKTtcblxuICAgIEBpZiAkX2lzLXJhdGlvIHtcbiAgICAgIEByZXR1cm4gbXMoJHN0ZXAsIDFlbSwgJG1zLXNldHRpbmcpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQGVycm9yIFwiJHR5cGktbXMgcmF0aW8gYXQgI3skYnJlYWtwb2ludH0gbXVzdCBiZSB1bml0bGVzc1wiO1xuICAgIH1cbiAgfVxuXG4gIC8vIFR3byBvciBtb3JlIHZhbHVlcy5cbiAgLy8gQWxsIHZhbHVlcyB3aXRoIGVtIHVuaXRzIGFyZSBmb250LXNpemVzLlxuICAvLyBBbGwgdW5pdGxlc3MgdmFsdWVzIGFyZSByYXRpb3MuXG4gIEBlbHNlIHtcbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkbXMtc2V0dGluZykge1xuICAgICAgJF9jdXJyZW50OiBudGgoJG1zLXNldHRpbmcsICRpKTtcbiAgICAgICRfaXMtYmFzZTogX3R5LWlzLWJhc2UoJF9jdXJyZW50KTtcbiAgICAgICRfaXMtcmF0aW86IF90eS1pcy1yYXRpbygkX2N1cnJlbnQpO1xuXG4gICAgICBAaWYgJF9pcy1iYXNlIHtcbiAgICAgICAgJHR5LW1zLWJhc2U6IF90eS1hcHBlbmQoJHR5LW1zLWJhc2UsICRfY3VycmVudClcbiAgICAgIH1cblxuICAgICAgQGlmICRfaXMtcmF0aW8ge1xuICAgICAgICAkdHktbXMtcmF0aW86IF90eS1hcHBlbmQoJHR5LW1zLXJhdGlvLCAkX2N1cnJlbnQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0cyBiYXNlIHRvIDFlbSBpZiB0aGVyZSdzIG5vIGJhc2VcbiAgICBAaWYgbGVuZ3RoKCR0eS1tcy1iYXNlKSA9PSAwIHtcbiAgICAgICR0eS1tcy1iYXNlOiAxZW07XG4gICAgfVxuXG4gICAgQGlmIGxlbmd0aCgkdHktbXMtcmF0aW8pID09IDAge1xuICAgICAgQGVycm9yIFwiJHR5cGktbXMgYXQgI3skYnJlYWtwb2ludH0gbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSByYXRpb1wiO1xuICAgIH1cblxuICAgIEByZXR1cm4gbXMoJHN0ZXAsICR0eS1tcy1iYXNlLCAkdHktbXMtcmF0aW8pO1xuICB9XG59XG5cbi8vIENoZWNrcyBpZiAkbnVtIGlzIGJhc2UgZm9yIG1zIGNhbGNcbi8vID09PT09PT09PT1cbkBmdW5jdGlvbiBfdHktaXMtYmFzZSgkbnVtKSB7XG4gIEBpZiB1bml0KCRudW0pID09ICdlbScge1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfSBAZWxzZSBpZiB1bml0bGVzcygkbnVtKSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yICckdHlwaS1tcyBvbmx5IGFjY2VwdHMgZW0gYmFzZSB2YWx1ZXMnO1xuICB9XG59XG5cbi8vIENoZWNrcyBpZiAkbnVtIGlzIHJhdGlvIGZvciBtcyBjYWxjXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWlzLXJhdGlvKCRudW0pIHtcbiAgQGlmIHVuaXRsZXNzKCRudW0pIHtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsIi8vIF90eS1wYXJzZS10eXBlZmFjZVxuLy8gLS0tLS0tLS0tLVxuLy8gRW5zdXJlcyB0eXBlZmFjZSBrZXkgcHJlc2VudCBpbiAkdHlwZWZhY2VzLlxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1wYXJzZS10eXBlZmFjZShcbiAgJHR5cGVmYWNlLFxuICAkdHlwZWZhY2VzXG4pIHtcbiAgQGlmIG1hcC1oYXMta2V5KCR0eXBlZmFjZXMsICR0eXBlZmFjZSkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xuICB9IEBlbHNlIHtcbiAgICBAZXJyb3IgXCIkdHlwZWZhY2VzIGRvZXMgbm90IGhhdmUgI3skdHlwZWZhY2V9IHR5cGVmYWNlXCI7XG4gIH1cbn1cblxuQGZ1bmN0aW9uIF90eS1nZXQtdHlwZWZhY2UtbWFwKFxuICAkdHlwZWZhY2VzLFxuICAkdHlwZWZhY2Vcbikge1xuICAvLyBSZXR1cm5zIGZhbHNlIGlmIHR5cGVmYWNlIG1hcCBpcyBub3QgdXNlZCxcbiAgLy8gc28gY2FsbGVyIGNhbiBoYW5kbGUgdGhlaXIgb3duLlxuICBAaWYgdHlwZS1vZigkdHlwZWZhY2VzKSAhPSAnbWFwJyB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxuICBAaWYgbm90IG1hcC1oYXMta2V5KCR0eXBlZmFjZXMsICR0eXBlZmFjZSkge1xuICAgIEBlcnJvciAnI3skdHlwZWZhY2V9JyBub3QgZm91bmQgaW4gJHR5cGVmYWNlc1xuICB9XG4gIEByZXR1cm4gbWFwLWdldCgkdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xufVxuXG5AaW1wb3J0ICdtdWx0aXBsaWVyJzsiLCIvLyAtdHlfZ2V0LXR5cGVmYWNlLW11bHRpcGxpZXJcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgdHlwZWZhY2UgbXVsdGlwbGllclxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1nZXQtdHlwZWZhY2UtbXVsdGlwbGllcihcbiAgJHR5cGVmYWNlLFxuICAkdHlwZWZhY2VzXG4pIHtcbiAgJF9mb250LXNpemUtcmF0aW86IG51bGw7XG4gICRfdHlwZWZhY2UtbWFwOiBfdHktZ2V0LXR5cGVmYWNlLW1hcCgkdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xuXG4gIEBpZiAkX3R5cGVmYWNlLW1hcCB7XG4gICAgJF9mb250LXNpemUtcmF0aW86IG1hcC1nZXQoJF90eXBlZmFjZS1tYXAsIGZvbnQtc2l6ZS1yYXRpbyk7XG4gIH1cblxuICBAaWYgJF9mb250LXNpemUtcmF0aW8ge1xuICAgIEByZXR1cm4gMSAvICRfZm9udC1zaXplLXJhdGlvO1xuICB9IEBlbHNlIHtcbiAgICBAcmV0dXJuIDE7XG4gIH1cbn1cbiIsIkBpbXBvcnQgJ2NvbnZlcnRlcnMnO1xuQGltcG9ydCAnYmFzZXMnO1xuQGltcG9ydCAnbWFwcyc7XG5AaW1wb3J0ICdsaXN0cyc7XG5AaW1wb3J0ICdleHRlbmRlcic7IiwiLy8gX3R5LXN0cmlwLXVuaXRcbi8vID09PT09PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LXN0cmlwLXVuaXQoJG51bSkge1xuICBAcmV0dXJuICRudW0gLyAoJG51bSAqIDAgKyAxKTtcbn1cblxuXG4vLyBfdHktdG8tcGVyY2VudGFnZVxuLy8gPT09PT09PT1cbkBmdW5jdGlvbiBfdHktdG8tcGVyY2VudGFnZSgkZm9udC1zaXplKSB7XG4gIEBpZiB1bml0KCRmb250LXNpemUpICE9ICdweCcge1xuICAgIEBlcnJvciBcIl90eS10by1wZXJjZW50YWdlKCkgb25seSBhY2NlcHRzIHBpeGVsIHNpemVzXCJcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiAkZm9udC1zaXplIC8gMTZweCAqIDEwMCU7XG4gIH1cbn1cblxuLy8gX3R5LXRvLWVtXG4vLyA9PT09PT09PVxuQGZ1bmN0aW9uIF90eS10by1lbSgkZm9udC1zaXplLCAkcmVmLXNpemU6IG51bGwpIHtcbiAgQGlmIHVuaXQoJGZvbnQtc2l6ZSkgPT0gXCJweFwiIHtcbiAgICBAaWYgbm90ICRyZWYtc2l6ZSB7XG4gICAgICBAZXJyb3IgXCIkcmVmLXNpemUgbXVzdCBiZSBwcmVzZW50IGZvciBweCAtPiBlbSBjb252ZXJzaW9uXCI7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAcmV0dXJuIF90eS1zdHJpcC11bml0KCRmb250LXNpemUpIC8gX3R5LXN0cmlwLXVuaXQoJHJlZi1zaXplKSAqIDFlbTtcbiAgICB9XG4gIH1cblxuICBAZWxzZSBpZiB1bml0KCRmb250LXNpemUpID09ICdlbScge1xuICAgIEBpZiAkcmVmLXNpemUge1xuICAgICAgQHJldHVybiBfdHktc3RyaXAtdW5pdCgkZm9udC1zaXplKSAvIF90eS1zdHJpcC11bml0KCRyZWYtc2l6ZSkgKiAxZW07XG4gICAgfSBAZWxzZSB7XG4gICAgICBAcmV0dXJuIF90eS1zdHJpcC11bml0KCRmb250LXNpemUpICogMWVtO1xuICAgIH1cbiAgfVxuXG4gIEBlbHNlIGlmIHVuaXQoJGZvbnQtc2l6ZSkgPT0gXCJyZW1cIiB7XG4gICAgQHJldHVybiBfdHktc3RyaXAtdW5pdCgkZm9udC1zaXplKSAqIDFlbTtcbiAgfVxuXG4gIEBlbHNlIHtcbiAgICBAZXJyb3IgXCJfdHktdG8tZW0oKSBvbmx5IHN1cHBvcnRzIHB4IC0+IGVtLCBlbSAtPiBlbSBhbmQgcmVtIC0+IGVtIGNvbnZlcnNpb25cIjtcbiAgfVxufVxuXG4vLyBfdHktdG8tcmVtXG4vLyA9PT09PT09PT1cbkBmdW5jdGlvbiBfdHktdG8tcmVtKCRmb250LXNpemUsICRyZWYtc2l6ZTogbnVsbCkge1xuICBAaWYgdW5pdCgkZm9udC1zaXplKSA9PSBcInB4XCIge1xuICAgIEBpZiBub3QgJHJlZi1zaXplIHtcbiAgICAgIEBlcnJvciBcIiRyZWYtc2l6ZSBtdXN0IGJlIHByZXNlbnQgZm9yIHB4IC0+IHJlbSBjb252ZXJzaW9uXCI7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAcmV0dXJuIF90eS1zdHJpcC11bml0KCRmb250LXNpemUpIC8gX3R5LXN0cmlwLXVuaXQoJHJlZi1zaXplKSAqIDFyZW07XG4gICAgfVxuICB9XG5cbiAgQGVsc2UgaWYgdW5pdCgkZm9udC1zaXplKSA9PSBcImVtXCIge1xuICAgIEByZXR1cm4gX3R5LXN0cmlwLXVuaXQoJGZvbnQtc2l6ZSkgKiAxcmVtO1xuICB9XG5cbiAgQGVsc2Uge1xuICAgIEBlcnJvciBcIl90eS10by1yZW0oKSBvbmx5IHN1cHBvcnRzIHB4IC0+IHJlbSBhbmQgZW0gLT4gcmVtIGNvbnZlcnNpb25cIjtcbiAgfVxufVxuXG4vLyBfdHktbXMtdG8tcmVtXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LW1zLXRvLXJlbSgkc3RlcCwgJGJyZWFrcG9pbnQpIHtcbiAgQGlmIG5vdCB1bml0bGVzcygkc3RlcCkge1xuICAgIEBlcnJvciBcInN0ZXBzIG11c3QgYmUgdW5pdGxlc3Mgd2hlbiB5b3UncmUgdXNpbmcgVHlwaS1tc1wiO1xuICB9XG5cbiAgJGZvbnQtc2l6ZTogX3R5LWNhbGMtbXMoJHN0ZXAsICRicmVha3BvaW50KTtcbiAgQHJldHVybiBfdHktdG8tcmVtKCRmb250LXNpemUpO1xufVxuXG5AZnVuY3Rpb24gX3R5LW1zLXRvLWVtKCRzdGVwLCAkYnJlYWtwb2ludCkge1xuICBAaWYgbm90IHVuaXRsZXNzKCRzdGVwKSB7XG4gICAgQGVycm9yIFwic3RlcHMgbXVzdCBiZSB1bml0bGVzcyB3aGVuIHlvdSdyZSB1c2luZyBUeXBpLW1zXCI7XG4gIH1cblxuICBAcmV0dXJuIF90eS1jYWxjLW1zKCRzdGVwLCAkYnJlYWtwb2ludCk7XG59IiwiLy8gX3R5LWdldC1mb250LXNpemVcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgZm9udC1zaXplIGZyb20gZm9udC1tYXAtYnJlYWtwb2ludFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1nZXQtZm9udC1zaXplICgkZm9udC1tYXAtYnJlYWtwb2ludCkge1xuICBAaWYgdHlwZS1vZigkZm9udC1tYXAtYnJlYWtwb2ludCkgPT0gJ251bWJlcicge1xuICAgIEByZXR1cm4gJGZvbnQtbWFwLWJyZWFrcG9pbnQ7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gbnRoKCRmb250LW1hcC1icmVha3BvaW50LCAxKTtcbiAgfVxufVxuXG4vLyBfdHktZ2V0LWxpbmUtaGVpZ2h0XG4vLyAtLS0tLS0tLS0tXG4vLyBHZXRzIGxpbmUtaGVpZ2h0IGZyb20gZm9udC1tYXAtYnJlYWtwb2ludFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1nZXQtbGluZS1oZWlnaHQgKCRmb250LW1hcC1icmVha3BvaW50KSB7XG4gIEBpZiB0eXBlLW9mKCRmb250LW1hcC1icmVha3BvaW50KSA9PSAnbGlzdCcge1xuICAgIEByZXR1cm4gbnRoKCRmb250LW1hcC1icmVha3BvaW50LCAyKTtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBfdHktZ2V0LWJhc2UtZm9udC1zaXplXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWdldC1iYXNlLWZvbnQtc2l6ZSgkYmFzZW1hcCkge1xuICAkYmFzZS1udWxsOiBtYXAtZ2V0KCRiYXNlbWFwLCBudWxsKTtcbiAgQHJldHVybiBfdHktZ2V0LWZvbnQtc2l6ZSgkYmFzZS1udWxsKTtcbn1cblxuLy8gX3R5LWdldC1iYXNlLWxpbmUtaGVpZ2h0XG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWdldC1iYXNlLWxpbmUtaGVpZ2h0KCRiYXNlbWFwKSB7XG4gICRiYXNlLW51bGw6IG1hcC1nZXQoJGJhc2VtYXAsIG51bGwpO1xuICAkYmFzZS1saW5lLWhlaWdodDogX3R5LWdldC1saW5lLWhlaWdodCgkYmFzZS1udWxsKTtcblxuICBAaWYgbm90ICRiYXNlLWxpbmUtaGVpZ2h0IHtcbiAgICBAZXJyb3IgXCJUeXBpIGJhc2UgbWFwIHJlcXVpcmVzIGxpbmUtaGVpZ2h0IG11bHRpcGxlIGluIG51bGwga2V5XCJcbiAgfVxuXG4gIEBpZiBub3QgdW5pdGxlc3MoJGJhc2UtbGluZS1oZWlnaHQpIHtcbiAgICBAZXJyb3IgXCJMaW5lLWhlaWdodCBpbiAkdHlwaSBiYXNlIG1hcCBzaG91bGQgYmUgdW5pdGxlc3NcIlxuICB9XG5cbiAgQHJldHVybiAkYmFzZS1saW5lLWhlaWdodDtcbn1cblxuLy8gX3R5LWdldC1iYXNlLW1hcFxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIF90eS1nZXQtYmFzZS1tYXAoJHR5cGk6ICR0eXBpKSB7XG4gIEBpZiBtYXAtaGFzLWtleSgkdHlwaSwgYmFzZSkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkdHlwaSwgYmFzZSk7XG4gIH0gQGVsc2Uge1xuICAgIEBlcnJvciBcIkJhc2Uga2V5IG5vdCBmb3VuZCBpbiAkdHlwaVwiO1xuICB9XG59IiwiLy8gTWFwLWZldGNoXG4vLyAtLS0tLS0tLS0tXG4vLy8gQW4gZWFzeSB3YXkgdG8gZmV0Y2ggYSBkZWVwIHZhbHVlIGluIGEgbXVsdGktbGV2ZWwgbWFwLlxuLy8vICAgV29ya3MgbXVjaCBsaWtlIG1hcC1nZXQoKSBleGNlcHQgdGhhdCB5b3UgcGFzcyBtdWx0aXBsZVxuLy8vICAga2V5cyBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBnbyBkb3duIG11bHRpcGxlIGxldmVsc1xuLy8vICAgaW4gdGhlIG5lc3RlZCBtYXAuXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAcGFyYW0ge01hcH0gJG1hcCAtIE1hcFxuLy8vIEBwYXJhbSB7TGlzdH0gJGtleXMgLSBLZXkgY2hhaW4uXG4vLy8gQHJldHVybiB7Kn0gLSBEZXNpcmVkIHZhbHVlXG4vLy8gQGxpbmsgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamxvbmcvODc2MDI3NVxuLy8vIEBncm91cCB1dGlsc1xuQGZ1bmN0aW9uIG1hcC1mZXRjaCgkbWFwLCAka2V5cykge1xuICAka2V5OiBudGgoJGtleXMsIDEpO1xuICAkbGVuZ3RoOiBsZW5ndGgoJGtleXMpO1xuICAkdmFsdWU6IG1hcC1nZXQoJG1hcCwgJGtleSk7XG4gIEBpZiAkbGVuZ3RoID4gMSB7XG4gICAgJHJlc3Q6ICgpO1xuICAgIEBmb3IgJGkgZnJvbSAyIHRocm91Z2ggJGxlbmd0aCB7XG4gICAgICAkcmVzdDogYXBwZW5kKCRyZXN0LCBudGgoJGtleXMsICRpKSk7XG4gICAgfVxuICAgIEByZXR1cm4gbWFwLWZldGNoKCR2YWx1ZSwgJHJlc3QpO1xuICB9IEBlbHNlIHtcbiAgICBAcmV0dXJuICR2YWx1ZTtcbiAgfVxufVxuXG4vLy8gTWFwIGRlZXAgZ2V0XG4vLy8gQGF1dGhvciBIdWdvIEdpcmF1ZGVsXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAcGFyYW0ge01hcH0gJG1hcCAtIE1hcFxuLy8vIEBwYXJhbSB7QXJnbGlzdH0gJGtleXMgLSBLZXkgY2hhaW5cbi8vLyBAcmV0dXJuIHsqfSAtIERlc2lyZWQgdmFsdWVcbi8vLyBAZ3JvdXAgdXRpbHNcbkBmdW5jdGlvbiBtYXAtZGVlcC1nZXQoJG1hcCwgJGtleXMuLi4pIHtcbiAgICBAZWFjaCAka2V5IGluICRrZXlzIHtcbiAgICAgICAgJG1hcDogbWFwLWdldCgkbWFwLCAka2V5KTtcbiAgICB9XG4gICAgQHJldHVybiAkbWFwO1xufVxuXG5cbi8vLyBEZWVwIHNldCBmdW5jdGlvbiB0byBzZXQgYSB2YWx1ZSBpbiBuZXN0ZWQgbWFwc1xuLy8vIEBhdXRob3IgSHVnbyBHaXJhdWRlbFxuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8gQHBhcmFtIHtNYXB9ICRtYXAgLSBNYXBcbi8vLyBAcGFyYW0ge0xpc3R9ICRrZXlzIC0gIEtleSBjaGFpbmVcbi8vLyBAcGFyYW0geyp9ICR2YWx1ZSAtIFZhbHVlIHRvIGFzc2lnblxuLy8vIEByZXR1cm4ge01hcH1cbi8vLyBAZ3JvdXAgdXRpbHNcbkBmdW5jdGlvbiBtYXAtZGVlcC1zZXQoJG1hcCwgJGtleXMsICR2YWx1ZSkge1xuICAkbWFwczogKCRtYXAsKTtcbiAgJHJlc3VsdDogbnVsbDtcblxuICAvLyBJZiB0aGUgbGFzdCBrZXkgaXMgYSBtYXAgYWxyZWFkeVxuICAvLyBXYXJuIHRoZSB1c2VyIHdlIHdpbGwgYmUgb3ZlcnJpZGluZyBpdCB3aXRoICR2YWx1ZVxuICBAaWYgdHlwZS1vZihudGgoJGtleXMsIC0xKSkgPT0gXCJtYXBcIiB7XG4gICAgQHdhcm4gXCJUaGUgbGFzdCBrZXkgeW91IHNwZWNpZmllZCBpcyBhIG1hcDsgaXQgd2lsbCBiZSBvdmVycmlkZWQgd2l0aCBgI3skdmFsdWV9YC5cIjtcbiAgfVxuXG4gIC8vIElmICRrZXlzIGlzIGEgc2luZ2xlIGtleVxuICAvLyBKdXN0IG1lcmdlIGFuZCByZXR1cm5cbiAgQGlmIGxlbmd0aCgka2V5cykgPT0gMSB7XG4gICAgQHJldHVybiBtYXAtbWVyZ2UoJG1hcCwgKCRrZXlzOiAkdmFsdWUpKTtcbiAgfVxuXG4gIC8vIExvb3AgZnJvbSB0aGUgZmlyc3QgdG8gdGhlIHNlY29uZCB0byBsYXN0IGtleSBmcm9tICRrZXlzXG4gIC8vIFN0b3JlIHRoZSBhc3NvY2lhdGVkIG1hcCB0byB0aGlzIGtleSBpbiB0aGUgJG1hcHMgbGlzdFxuICAvLyBJZiB0aGUga2V5IGRvZXNuJ3QgZXhpc3QsIHRocm93IGFuIGVycm9yXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRrZXlzKSAtIDEge1xuICAgICRjdXJyZW50LWtleTogbnRoKCRrZXlzLCAkaSk7XG4gICAgJGN1cnJlbnQtbWFwOiBudGgoJG1hcHMsIC0xKTtcbiAgICAkY3VycmVudC1nZXQ6IG1hcC1nZXQoJGN1cnJlbnQtbWFwLCAkY3VycmVudC1rZXkpO1xuICAgIEBpZiAkY3VycmVudC1nZXQgPT0gbnVsbCB7XG4gICAgICBAZXJyb3IgXCJLZXkgYCN7JGtleX1gIGRvZXNuJ3QgZXhpc3QgYXQgY3VycmVudCBsZXZlbCBpbiBtYXAuXCI7XG4gICAgfVxuICAgICRtYXBzOiBhcHBlbmQoJG1hcHMsICRjdXJyZW50LWdldCk7XG4gIH1cblxuICAvLyBMb29wIGZyb20gdGhlIGxhc3QgbWFwIHRvIHRoZSBmaXJzdCBvbmVcbiAgLy8gTWVyZ2UgaXQgd2l0aCB0aGUgcHJldmlvdXMgb25lXG4gIEBmb3IgJGkgZnJvbSBsZW5ndGgoJG1hcHMpIHRocm91Z2ggMSB7XG4gICAgJGN1cnJlbnQtbWFwOiBudGgoJG1hcHMsICRpKTtcbiAgICAkY3VycmVudC1rZXk6IG50aCgka2V5cywgJGkpO1xuICAgICRjdXJyZW50LXZhbDogaWYoJGkgPT0gbGVuZ3RoKCRtYXBzKSwgJHZhbHVlLCAkcmVzdWx0KTtcbiAgICAkcmVzdWx0OiBtYXAtbWVyZ2UoJGN1cnJlbnQtbWFwLCAoJGN1cnJlbnQta2V5OiAkY3VycmVudC12YWwpKTtcbiAgfVxuXG4gIC8vIFJldHVybiByZXN1bHRcbiAgQHJldHVybiAkcmVzdWx0O1xufSIsIi8vIF90eS1hcHBlbmRcbi8vIC0tLS0tLS0tLS1cbi8vIEFwcGVuZGluZyB0byBlbXB0eSBsaXN0IGlzIHdvbmt5LiBUaGlzIGZ1bmN0aW9uIGZpeGVzXG4vLyBhcHBlbmQgYnkgc2V0dGluZyBmaXJzdCBpdGVtIHRvIGJlIGFwcGVuZGVkIGFzIGEgbGlzdCBpdGVtXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWFwcGVuZCgkbGlzdCwgJHZhbHVlKSB7XG4gIEBpZiBsZW5ndGgoJGxpc3QpID09IDAge1xuICAgIEByZXR1cm4gKCR2YWx1ZSk7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gYXBwZW5kKCRsaXN0LCAkdmFsdWUpO1xuICB9XG59XG5cbi8vIF90eS1pbnNlcnQtbnRoXG4vLyAtLS0tLS0tLS0tXG4vLyBJbnNlcnRpbmcgdmFsdWUgYXQgaW5kZXggblxuLy8gaHR0cDovL2h1Z29naXJhdWRlbC5jb20vMjAxMy8wOC8wOC9hZHZhbmNlZC1zYXNzLWxpc3QtZnVuY3Rpb25zLyNhZGRpbmctdmFsdWVzLXRvLWEtbGlzdFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1pbnNlcnQtbnRoKCRsaXN0LCAkaW5kZXgsICR2YWx1ZSkge1xuICAkcmVzdWx0OiBudWxsO1xuXG4gIEBpZiB0eXBlLW9mKCRpbmRleCkgIT0gbnVtYmVyIHtcbiAgICBAd2FybiBcIiRpbmRleDogI3txdW90ZSgkaW5kZXgpfSBpcyBub3QgYSBudW1iZXIgZm9yIGBpbnNlcnQtbnRoYC5cIjtcbiAgfVxuXG4gIEBlbHNlIGlmICRpbmRleCA8IDEge1xuICAgIEB3YXJuIFwiTGlzdCBpbmRleCAwIG11c3QgYmUgYSBub24temVybyBpbnRlZ2VyIGZvciBgaW5zZXJ0LW50aGBcIjtcbiAgfVxuXG4gIEBlbHNlIGlmICRpbmRleCA+IGxlbmd0aCgkbGlzdCkge1xuICAgIEB3YXJuIFwiTGlzdCBpbmRleCBpcyAjeyRpbmRleH0gYnV0IGxpc3QgaXMgb25seSAje2xlbmd0aCgkbGlzdCl9IGl0ZW0gbG9uZyBmb3IgYGluc2VydC1udGgnLlwiO1xuICB9XG5cbiAgQGVsc2Uge1xuICAgICRyZXN1bHQ6ICgpO1xuXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJGxpc3QpIHtcbiAgICAgIEBpZiAkaSA9PSAkaW5kZXgge1xuICAgICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgJHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsIG50aCgkbGlzdCwgJGkpKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRyZXN1bHQ7XG59XG5cbi8vIF90eS1yZW1vdmVcbi8vIC0tLS0tLS0tLS1cbi8vIC0gUmVtb3ZlcyBpdGVtIGZyb20gbGlzdFxuLy8gaHR0cDovL2h1Z29naXJhdWRlbC5jb20vMjAxMy8wOC8wOC9hZHZhbmNlZC1zYXNzLWxpc3QtZnVuY3Rpb25zLyNyZW1vdmluZy12YWx1ZXMtZnJvbS1saXN0XG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LXJlbW92ZSgkbGlzdCwgJHZhbHVlLCAkcmVjdXJzaXZlOiBmYWxzZSkge1xuICAkcmVzdWx0OiAoKTtcblxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkbGlzdCkge1xuICAgIEBpZiB0eXBlLW9mKG50aCgkbGlzdCwgJGkpKSA9PSBsaXN0IGFuZCAkcmVjdXJzaXZlIHtcbiAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCByZW1vdmUobnRoKCRsaXN0LCAkaSksICR2YWx1ZSwgJHJlY3Vyc2l2ZSkpO1xuICAgIH1cblxuICAgIEBlbHNlIGlmIG50aCgkbGlzdCwgJGkpICE9ICR2YWx1ZSB7XG4gICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgbnRoKCRsaXN0LCAkaSkpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJHJlc3VsdDtcbn0iLCIvLyBfdHktbWFwLWV4dGVuZGVyXG4vLyAtLS0tLS0tLS0tXG4vLyAtIEV4dGVuZHMgJHR5cGktbXMgYW5kIGFsbCB0YXJnZXQgbWFwc1xuLy8gICB0byBpbmNsdWRlIGJyZWFrcG9pbnRzIGZyb20gYnJlYWtwb2ludHMgbWFwXG4vLyBUT0RPOiBVcGRhdGUgd2hlbiBsaWJzYXNzIHYzLjRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZWxsd2svdHlwaS9pc3N1ZXMvMTdcbi8vID09PT09PT09PT1cblxuQGZ1bmN0aW9uIF90eS1tYXAtZXh0ZW5kZXIoXG4gICR0YXJnZXQ6IG51bGwsXG4gICR0eXBpOiAkdHlwaSxcbiAgJHR5cGktbXM6ICR0eXBpLW1zLFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50c1xuKSB7XG4gICRfbzogbnVsbDtcblxuICAvLyBFeHRlbmRzICR0eXBpIG1hcFxuICBAaWYgJHRhcmdldCB7XG4gICAgJF9vOiBfdHktZXh0ZW5kLXR5cGkoJHRhcmdldCk7XG4gIH1cblxuICAvLyBFeHRlbmRzICR0eXBpLW1zXG4gIEBlbHNlIHtcbiAgICAkX286IF90eS1leHRlbmQtdHlwaS1tcygpXG4gIH1cblxuICBAcmV0dXJuICRfbztcbn1cblxuLy8gX3R5LWV4dGVuZC10eXBpXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWV4dGVuZC10eXBpKCR0YXJnZXQpIHtcbiAgJF9yZXR1cm46ICR0eXBpO1xuICAkX3RhcmdldC1tYXA6IG51bGw7XG4gICRfcHJldi1icmVha3BvaW50OiBudWxsO1xuICAkX292ZXJ3cml0ZS12YWx1ZTogbnVsbDtcblxuICAvLyBEb2VzIG5vdCBleHRlbmQgdHlwaSBiYXNlXG4gIEBpZiAkdGFyZ2V0ID09ICdiYXNlJyB7XG4gICAgQHJldHVybiAkX3JldHVybjtcbiAgfVxuXG4gIEBpZiBtYXAtaGFzLWtleSgkdHlwaSwgJHRhcmdldCkge1xuICAgICRfdGFyZ2V0LW1hcDogbWFwLWdldCgkdHlwaSwgJHRhcmdldCk7XG4gIH0gQGVsc2Uge1xuICAgIEBlcnJvciAnJHR5cGkgc2hvdWxkIGNvbnRhaW4gI3skdGFyZ2V0fSc7XG4gIH1cblxuICAvLyBJbml0aWFsaXplcyAkX292ZXJ3cml0ZS12YWx1ZVxuICBAaWYgbWFwLWhhcy1rZXkoJF90YXJnZXQtbWFwLCBudWxsKSB7XG4gICAgJF9vdmVyd3JpdGUtdmFsdWU6IG1hcC1nZXQoJF90YXJnZXQtbWFwLCBudWxsKTtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yIFwiI3skX3RhcmdldC1tYXB9IG11c3QgY29udGFpbiBhIG51bGwga2V5XCI7XG4gIH1cblxuICBAZWFjaCAkYnJlYWtwb2ludCwgJHZhbHVlIGluICRicmVha3BvaW50cyB7XG4gICAgLy8gVXBkYXRlcyBvdmVyd3JpdGUgdmFsdWUgaWYgaGFzIHRhcmdldCBtYXBcbiAgICBAaWYgbWFwLWhhcy1rZXkoJF90YXJnZXQtbWFwLCAkYnJlYWtwb2ludCkge1xuICAgICAgJF9vdmVyd3JpdGUtdmFsdWU6IG1hcC1nZXQoJF90YXJnZXQtbWFwLCAkYnJlYWtwb2ludCk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcndyaXRlcyByZWxldmFudCBtYXAgb3RoZXJ3aXNlXG4gICAgLy8gVE9ETzogTmVlZHMgdG8gZ2V0IG1hcCBhbmQgb3ZlcnJpZGUgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIE5lZWRzIExpYnNhc3MgdjMuNFxuICAgIC8vIFNlZSBtYW51YWwvdHlwaS1tcy5zY3NzIGZvciBkZXRhaWxzXG4gICAgQGVsc2Uge1xuICAgICAgJF9yZXR1cm46IG1hcC1kZWVwLXNldChcbiAgICAgICAgJF9yZXR1cm4sXG4gICAgICAgICR0YXJnZXQgJGJyZWFrcG9pbnQsXG4gICAgICAgICRfb3ZlcndyaXRlLXZhbHVlXG4gICAgICApO1xuICAgICAgJHR5cGk6IG1hcC1tZXJnZSgkdHlwaSwgJF9yZXR1cm4pICFnbG9iYWw7XG4gICAgfVxuXG4gICAgLy8gU2V0cyB2YWx1ZXMgZm9yIG5leHQgbG9vcFxuICAgICRfcHJldi1icmVha3BvaW50OiAkYnJlYWtwb2ludDtcbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cbi8vIF90eS1leHRlbmQtdHlwaS1tc1xuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1leHRlbmQtdHlwaS1tcygpIHtcbiAgJF9yZXR1cm46ICR0eXBpLW1zO1xuICAkX3ByZXYtYnJlYWtwb2ludDogJ251bGwnO1xuICAkX292ZXJ3cml0ZS12YWx1ZTogbnVsbDtcblxuICAvLyBUYXJnZXQgbWFwIG11c3QgYWx3YXlzIGhhdmUgYSBudWxsIGtleVxuICBAaWYgbm90IG1hcC1oYXMta2V5KCRfcmV0dXJuLCBudWxsKSB7XG4gICAgQGVycm9yIFwiJHR5cGktbXMgbXVzdCBjb250YWluIGEgbnVsbCBrZXlcIjtcbiAgfVxuXG4gIC8vIEluaXRpYWxpemVzICRfb3ZlcndyaXRlLXZhbHVlXG4gICRfb3ZlcndyaXRlLXZhbHVlOiBtYXAtZ2V0KCRfcmV0dXJuLCBudWxsKTtcblxuICBAZWFjaCAkYnJlYWtwb2ludCwgJHZhbHVlIGluICRicmVha3BvaW50cyB7XG4gICAgLy8gVXBkYXRlcyBvdmVyd3JpdGUgdmFsdWUgaWYgYWxyZWFkeSBpbiAkdHlwaS1tc1xuICAgIEBpZiBtYXAtaGFzLWtleSgkX3JldHVybiwgJGJyZWFrcG9pbnQpIHtcbiAgICAgICRfb3ZlcndyaXRlLXZhbHVlOiBtYXAtZ2V0KCRfcmV0dXJuLCAkYnJlYWtwb2ludCk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcndyaXRlcyByZWxldmFudCBtYXAgb3RoZXJ3aXNlXG4gICAgQGVsc2Uge1xuICAgICAgJF9yZXR1cm46IG1hcC1kZWVwLXNldChcbiAgICAgICAgJF9yZXR1cm4sXG4gICAgICAgICRicmVha3BvaW50LFxuICAgICAgICAkX292ZXJ3cml0ZS12YWx1ZVxuICAgICAgKTtcbiAgICAgICR0eXBpLW1zOiBtYXAtbWVyZ2UoJHR5cGktbXMsICRfcmV0dXJuKSAhZ2xvYmFsO1xuICAgIH1cblxuICAgIC8vIFNldHMgdmFsdWVzIGZvciBuZXh0IGxvb3BcbiAgICAkX3ByZXYtYnJlYWtwb2ludDogJGJyZWFrcG9pbnRcbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cbi8vIF90eS1jaGVjay1leHRlbmRlZC1tYXBcbi8vID09PT09PT09PT1cbkBtaXhpbiBfdHktY2hlY2stZXh0ZW5kZWQtbWFwKFxuICAkbWFwOiAndHlwaScsXG4gICR0eXBpOiAkdHlwaSxcbiAgJHR5cGktbXM6ICR0eXBpLW1zLFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50c1xuKSB7XG4gICRicmVha3BvaW50LWxpc3Q6IG1hcC1rZXlzKCRicmVha3BvaW50cyk7XG4gICRmb250LW1hcC1saXN0OiBtYXAta2V5cygkdHlwaSk7XG4gICRmb250LW1hcC1saXN0OiBfdHktcmVtb3ZlKCRmb250LW1hcC1saXN0LCAnYmFzZScpO1xuXG4gIC8vIExvb3BzIHRocm91Z2ggZXZlcnkgZm9udC1tYXAgdG8gZW5zdXJlIHRoYXRcbiAgLy8gZWFjaCBtYXAgY29udGFpbnMgYWxsIGJyZWFrcG9pbnQga2V5c1xuICBAZWFjaCAkbWFwLWtleSBpbiAkZm9udC1tYXAtbGlzdCB7XG4gICAgJGZvbnQtbWFwOiBtYXAtZ2V0KCR0eXBpLCAkbWFwLWtleSk7XG4gICAgQGVhY2ggJGJyZWFrcG9pbnQgaW4gJGJyZWFrcG9pbnQtbGlzdCB7XG4gICAgICBAaWYgbm90IG1hcC1oYXMta2V5KCRmb250LW1hcCwgJGJyZWFrcG9pbnQpIHtcbiAgICAgICAgQHdhcm4gXCIjeyRicmVha3BvaW50fSBicmVha3BvaW50IG5vdCBmb3VuZCBpbiAkdHlwaSdzICN7JG1hcC1rZXl9IGtleS4gTWFrZSBzdXJlIGV2ZXJ5IGJyZWFrcG9pbnQgaXMgcHJlc2VudCBpbiBldmVyeSBmb250LW1hcCB3aGVuIHVzaW5nICR0eXBpLW1zIVwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrcyAkdHlwaS1tc1xuICBAZWFjaCAkYnJlYWtwb2ludCBpbiAkYnJlYWtwb2ludC1saXN0IHtcbiAgICBAaWYgbm90IG1hcC1oYXMta2V5KCR0eXBpLW1zLCAkYnJlYWtwb2ludCkge1xuICAgICAgQHdhcm4gXCIjeyRicmVha3BvaW50fSBicmVha3BvaW50IG5vdCBmb3VuZCBpbiAkdHlwaS1tcy4gTWFrZSBzdXJlIGV2ZXJ5IGJyZWFrcG9pbnQgaXMgcHJlc2VudCBpbiBldmVyeSBmb250LW1hcCB3aGVuIHVzaW5nICR0eXBpLW1zIVwiO1xuICAgIH1cbiAgfVxufSIsIi8vIF90eS1vdXRwdXQtcHJvcHNcbi8vIC0tLS0tLS0tLS1cbi8vIERlY2lkZXMgbWl4aW5zIHVzZWQgdG8gd3JpdGUgcHJvcGVydGllc1xuLy8gPT09PT09PT09PVxuQG1peGluIF90eS1vdXRwdXQtcHJvcHMgKFxuICAkX21hcDogJF9tYXAsXG4gICRicmVha3BvaW50OiAkYnJlYWtwb2ludFxuKSB7XG4gICR0YXJnZXQ6IG1hcC1nZXQoJF9tYXAsIHRhcmdldCk7XG4gICR0YXJnZXQtbWFwOiBtYXAtZ2V0KCRfbWFwLCB0YXJnZXQtbWFwKTtcbiAgJG91dHB1dDogbWFwLWdldCgkX21hcCwgb3V0cHV0KTtcbiAgJGJhc2VsaW5lLXB1c2g6IG1hcC1nZXQoJF9tYXAsIGJhc2VsaW5lLXB1c2gpO1xuXG4gIC8vIEVuc3VyZXMgYnJlYWtwb2ludCBpcyBwcmVzZW50IGluIHRhcmdldFxuICBAaWYgbm90IG1hcC1oYXMta2V5KCR0YXJnZXQtbWFwLCAkYnJlYWtwb2ludCkge1xuICAgIEBlcnJvciBcIiN7JHRhcmdldH0gZG9lcyBub3QgaGF2ZSAjeyRicmVha3BvaW50fSBicmVha3BvaW50XCJcbiAgfVxuXG4gIEBpZiAkdGFyZ2V0ID09ICdiYXNlJyB7XG4gICAgQGluY2x1ZGUgX3R5LXdyaXRlLWJhc2UoJF9tYXAsICRicmVha3BvaW50KTtcbiAgICBAaWYgJGJhc2VsaW5lLXB1c2gge1xuICAgICAgQGVycm9yIFwiJGJhc2VsaW5lIG9wdGlvbiBub3QgYWxsb3dlZCBvbiBiYXNlIG1hcFwiO1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkb3V0cHV0ID09ICdwcm9wcycge1xuICAgIEBpbmNsdWRlIF90eS13cml0ZS1wcm9wcygkX21hcCwgJGJyZWFrcG9pbnQpO1xuICB9IEBlbHNlIGlmICRvdXRwdXQgPT0gJ3ZyJyB7XG4gICAgQGluY2x1ZGUgX3R5LXdyaXRlLXZyKCRfbWFwLCAkYnJlYWtwb2ludCk7XG4gIH1cbn1cblxuLy8gX3R5LXdyaXRlLWJhc2Vcbi8vIC0tLS0tLS0tLS1cbi8vIENyZWF0ZXMgZm9udC1zaXplIGFuZCBsaW5lLWhlaWdodCBmb3IgYmFzZSBtYXBcbi8vID09PT09PT09PT1cbkBtaXhpbiBfdHktd3JpdGUtYmFzZSAoJF9tYXAsICRicmVha3BvaW50KSB7XG4gICR0YXJnZXQtbWFwOiBtYXAtZ2V0KCRfbWFwLCB0YXJnZXQtbWFwKTtcbiAgJGZvbnQtbWFwLWJyZWFrcG9pbnQ6IG1hcC1nZXQoJHRhcmdldC1tYXAsICRicmVha3BvaW50KTtcbiAgJGZvbnQtc2l6ZTogX3R5LWdldC1mb250LXNpemUoJGZvbnQtbWFwLWJyZWFrcG9pbnQpO1xuICAkbGluZS1oZWlnaHQ6IF90eS1nZXQtbGluZS1oZWlnaHQoJGZvbnQtbWFwLWJyZWFrcG9pbnQpO1xuXG4gIGZvbnQtc2l6ZTogX3R5LXRvLXBlcmNlbnRhZ2UoJGZvbnQtc2l6ZSk7XG4gIEBpZiAkbGluZS1oZWlnaHQge1xuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQ7XG4gIH1cbn1cblxuLy8gX3R5LXdyaXRlLXByb3BzXG4vLyAtLS0tLS0tLS0tXG4vLyBDcmVhdGVzIGZvbnQtc2l6ZSBhbmQgbGluZS1oZWlnaHQgcHJvcGVydGllc1xuLy8gPT09PT09PT09PVxuQG1peGluIF90eS13cml0ZS1wcm9wcygkX21hcCwgJGJyZWFrcG9pbnQpIHtcbiAgJHRhcmdldC1tYXA6IG1hcC1nZXQoJF9tYXAsIHRhcmdldC1tYXApO1xuICAkZm9udC1tYXAtYnJlYWtwb2ludDogbWFwLWdldCgkdGFyZ2V0LW1hcCwgJGJyZWFrcG9pbnQpO1xuICAkYmFzZW1hcDogbWFwLWdldCgkX21hcCwgYmFzZW1hcCk7XG4gICRyZW06IG1hcC1nZXQoJF9tYXAsIHJlbSk7XG4gICR0eXBlZmFjZXM6IG1hcC1nZXQoJF9tYXAsIHR5cGVmYWNlcyk7XG4gICR0eXBlZmFjZTogbWFwLWdldCgkX21hcCwgdHlwZWZhY2UpO1xuICAkYmFzZWxpbmUtcHVzaDogbWFwLWdldCgkX21hcCwgYmFzZWxpbmUtcHVzaCk7XG5cbiAgJHR5cGVmYWNlLW11bHRpcGxpZXI6IF90eS1nZXQtdHlwZWZhY2UtbXVsdGlwbGllcigkdHlwZWZhY2UsICR0eXBlZmFjZXMpO1xuICAkb3JpZy1mb250LXNpemU6IF90eS1nZXQtZm9udC1zaXplKCRmb250LW1hcC1icmVha3BvaW50KTtcbiAgJF9saW5lLWhlaWdodDogX3R5LWdldC1saW5lLWhlaWdodCgkZm9udC1tYXAtYnJlYWtwb2ludCk7XG4gICRfZm9udC1zaXplOiBfdHktY2FsYy1mb250LXNpemUoXG4gICAgJGZvbnQtc2l6ZTogJG9yaWctZm9udC1zaXplLFxuICAgICRiYXNlbWFwOiAkYmFzZW1hcCxcbiAgICAkcmVtOiAkcmVtLFxuICAgICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgICAkdHlwZWZhY2UtbXVsdGlwbGllcjogJHR5cGVmYWNlLW11bHRpcGxpZXJcbiAgKTtcblxuICBmb250LXNpemU6ICRfZm9udC1zaXplO1xuICBAaWYgJF9saW5lLWhlaWdodCB7XG4gICAgbGluZS1oZWlnaHQ6ICRfbGluZS1oZWlnaHQ7XG4gIH1cblxuICBAaWYgJGJhc2VsaW5lLXB1c2gge1xuICAgICRfZm9udC1zaXplOiBfdHktY2FsYy1mb250LXNpemUoXG4gICAgICAkZm9udC1zaXplOiAkb3JpZy1mb250LXNpemUsXG4gICAgICAkYmFzZW1hcDogJGJhc2VtYXAsXG4gICAgICAkcmVtOiBmYWxzZSxcbiAgICAgICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgICAgICR0eXBlZmFjZS1tdWx0aXBsaWVyOiAkdHlwZWZhY2UtbXVsdGlwbGllclxuICAgICk7XG4gICAgQGluY2x1ZGUgX3R5LXdyaXRlLWJhc2VsaW5lLXB1c2goXG4gICAgICAkZm9udC1zaXplOiAkX2ZvbnQtc2l6ZSxcbiAgICAgICRsaW5lLWhlaWdodDogJF9saW5lLWhlaWdodCxcbiAgICAgICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgICAgICRfbWFwOiAkX21hcFxuICAgICk7XG4gIH1cbn1cblxuLy8gX3R5LXdyaXRlLXZyXG4vLyAtLS0tLS0tLS0tXG4vLyBDcmVhdGVzIHZhbHVlcyBmb3IgbXMtdnIgbWl4aW4uXG4vLyA9PT09PT09PT09XG5AbWl4aW4gX3R5LXdyaXRlLXZyKCRfbWFwLCAkYnJlYWtwb2ludCkge1xuICAkdnI6IG1hcC1nZXQoJF9tYXAsIHZyKTtcbiAgJHByb3BlcnRpZXM6IG1hcC1nZXQoJF9tYXAsIHByb3BlcnRpZXMpO1xuICAkdGFyZ2V0LW1hcDogbWFwLWdldCgkX21hcCwgdGFyZ2V0LW1hcCk7XG4gICRiYXNlbWFwOiBtYXAtZ2V0KCRfbWFwLCBiYXNlbWFwKTtcbiAgJHR5cGVmYWNlOiBtYXAtZ2V0KCRfbWFwLCB0eXBlZmFjZSk7XG4gICR0eXBlZmFjZXM6IG1hcC1nZXQoJF9tYXAsIHR5cGVmYWNlcyk7XG5cbiAgJGZvbnQtbWFwLWJyZWFrcG9pbnQ6IG1hcC1nZXQoJHRhcmdldC1tYXAsICRicmVha3BvaW50KTtcbiAgJHN0ZXA6IF90eS1nZXQtZm9udC1zaXplKCRmb250LW1hcC1icmVha3BvaW50KTtcblxuICBAaWYgbm90IHVuaXRsZXNzKCRzdGVwKSB7XG4gICAgJHRhcmdldDogbWFwLWdldCgkX21hcCwgdGFyZ2V0KTtcbiAgICBAZXJyb3IgJ1N0ZXAgI3skc3RlcH0gaW4gI3skdGFyZ2V0fSwgI3skYnJlYWtwb2ludH0gbXVzdCBiZSB1bml0bGVzcyc7XG4gIH1cblxuICAkZm9udC1zaXplOiBfdHktbXMtdG8tZW0oJHN0ZXAsICRicmVha3BvaW50KTtcbiAgJHJoeXRobTogdnIoJHZyLCAkZm9udC1zaXplLCAkdHlwZWZhY2UsICRiYXNlbWFwLCAkdHlwZWZhY2VzOiAkdHlwZWZhY2VzKTtcblxuICBAZWFjaCAkcHJvcGVydHkgaW4gJHByb3BlcnRpZXMge1xuICAgICN7JHByb3BlcnR5fTogJHJoeXRobTtcbiAgfVxufSIsIkBpbXBvcnQgJ3B1YmxpYy9yaHl0aG0vcmh5dGhtJztcbkBpbXBvcnQgJ3B1YmxpYy90eXBpL3R5cGknO1xuQGltcG9ydCAncHVibGljL3R5cGVmYWNlcy90eXBlZmFjZXMnOyIsIkBpbXBvcnQgJ2Jhc2VsaW5lJztcbi8vLy9cbi8vLyBAcGFyYW0ge01hcH0gJHR5cGVmYWNlcyBbJHR5cGVmYWNlc11cbi8vL1xuLy8vL1xuXG4vLyB2clxuLy8gLS0tLS0tLS0tLVxuLy8vIENhbGN1bGF0ZXMgVmVydGljYWwgUmh5dGhtLiBDYW4gb3V0cHV0IHVuaXRzIGVpdGhlciBpbiByZW0gb3IgZW1cbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdnIgLSBWZXJ0aWNhbCBSaHl0aG0gbXVsdGlwbGVcbi8vLyBAcGFyYW0ge051bWJlcn0gJGN1cnJlbnQtZm9udC1zaXplIFtudWxsXSAtIEN1cnJlbnQgZm9udC1zaXplIHZhbHVlLiBSZXF1aXJlZCB0byBvdXRwdXQgZW0uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR0eXBlZmFjZSBbbnVsbF0gLSBUeXBlZmFjZSBrZXkgaW4gJHR5cGVmYWNlcy4gUmVxdWlyZWQgdG8gYWRqdXN0IGVtIG91dHB1dCBhY2NvcmRpbmcgdG8gdHlwZWZhY2Ugc2l6ZVxuLy8vIEBzZWUgJHR5cGVmYWNlc1xuLy8vIEBncm91cCBjb3JlXG4vLy8gQGV4YW1wbGVcbi8vLyAgIC5zZWxlY3RvciB7XG4vLy8gICAgIG1hcmdpbi10b3A6IHZyKDMpO1xuLy8vICAgfVxuLy8vIEByZXR1cm4ge051bWJlcn0gLSBWYWx1ZSB0byBvdXRwdXQsIGVpdGhlciBpbiBgZW1gIG9yIGByZW1gXG5AZnVuY3Rpb24gdnIoXG4gICR2cixcbiAgJGN1cnJlbnQtZm9udC1zaXplOiBudWxsLFxuICAkdHlwZWZhY2U6IG51bGwsXG4gICRiYXNlbWFwOiBtYXAtZ2V0KCR0eXBpLCBiYXNlKSxcbiAgJHR5cGVmYWNlczogJHR5cGVmYWNlc1xuKSB7XG4gICRiYXNlLWZvbnQtc2l6ZTogX3R5LWdldC1iYXNlLWZvbnQtc2l6ZSgkYmFzZW1hcCk7XG4gICRiYXNlLWxpbmUtaGVpZ2h0OiBfdHktZ2V0LWJhc2UtbGluZS1oZWlnaHQoJGJhc2VtYXApO1xuICAkcmh5dGhtOiAkdnIgKiAkYmFzZS1saW5lLWhlaWdodDtcblxuICAvLyBSZXR1cm5zIHJlbSB2YWx1ZXNcbiAgQGlmIG5vdCAkY3VycmVudC1mb250LXNpemUge1xuICAgIEByZXR1cm4gX3R5LXRvLXJlbSgkcmh5dGhtICogMWVtKTtcbiAgfVxuXG4gIC8vIHJldHVybiBlbSB2YWx1ZXNcbiAgQGVsc2Uge1xuICAgICRfcmh5dGhtLW11bHRpcGxpZXI6IDE7XG4gICAgJF9yZXR1cm46IDE7XG4gICAgQGlmICR0eXBlZmFjZSB7XG4gICAgICAkX3JoeXRobS1tdWx0aXBsaWVyOiAxIC8gX3R5LWdldC10eXBlZmFjZS1tdWx0aXBsaWVyKCR0eXBlZmFjZSwgJHR5cGVmYWNlcyk7XG4gICAgfVxuXG4gICAgQGlmIHVuaXQoJGN1cnJlbnQtZm9udC1zaXplKSA9PSAncHgnIHtcbiAgICAgICRyaHl0aG0tcHg6ICRyaHl0aG0gKiAkYmFzZS1mb250LXNpemU7XG4gICAgICAkX3JldHVybjogX3R5LXRvLWVtKCRyaHl0aG0tcHgsICRjdXJyZW50LWZvbnQtc2l6ZSk7XG4gICAgfVxuICAgIEBlbHNlIGlmIHVuaXQoJGN1cnJlbnQtZm9udC1zaXplKSA9PSAnZW0nIHtcbiAgICAgICRfcmV0dXJuOiBfdHktdG8tZW0oJHJoeXRobSAqIDFlbSwgJGN1cnJlbnQtZm9udC1zaXplKTtcbiAgICB9XG5cblxuICAgIEByZXR1cm4gJF9yZXR1cm4gKiAkX3JoeXRobS1tdWx0aXBsaWVyO1xuICB9XG59XG5cbi8vIHZyLW1zXG4vLyAtLS0tLS0tLS0tXG4vLy8gVGhpcyBtaXhpbiBjb21lcyBpbiB3aGVuIHlvdSBuZWVkIHRvIHdyaXRlICoqcmh5dGhtcyoqIGluIGBlbWBcbi8vLyBhbmQgeW91J3JlICoqY2hhbmdpbmcgTW9kdWxhciBTY2FsZSByYXRpbyoqIGF0IGRpZmZlcmVudCBicmVha3BvaW50cy5cbi8vL1xuLy8vIElmIHlvdSBjaGFuZ2UgTW9kdWxhciBTY2FsZSByYXRpbyBhdCBkaWZmZXJlbnQgYnJlYWtwb2ludHMsXG4vLy8gZm9udC1zaXplcyB3aWxsIGJlIHJlY2FsY3VsYXRlZCwgd2hpY2ggbWVhbnMgdGhlcmUncyBubyB3YXlcbi8vLyB0byB0ZWxsIHdoYXQgZm9udC1zaXplIGlzIHByZXNlbnQgYXQgd2hpY2ggYnJlYWtwb2ludC4gVGhpc1xuLy8vIG1peGluIGhlbHBzIHRvIGNhbGN1bGF0ZSB0aGUgY3VycmVudCBmb250LXNpemUsIGFuZCBjcmVhdGVzXG4vLy8gdGhlIGNvcnJlc3BvbmRpbmcgcmh5dGhtIHZhbHVlLlxuLy8vXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vL1xuLy8vIEBwYXJhbSB7TGlzdH0gJHByb3BlcnRpZXMgLSBQcm9wZXJ0aWVzIHRvIG91dHB1dFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdnIgLSBWZXJ0aWNhbCBSaHl0aG0gbXVsdGlwbGVcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHRhcmdldCAtIEZvbnQgbWFwIHVzZWRcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHR5cGVmYWNlIFtmYWxzZV0gLSBUeXBlZmFjZSB1c2VkXG4vLy8gQHNlZSAkdHlwZWZhY2VzXG4vLy8gQHJlcXVpcmVzICR0eXBpLW1zXG4vLy8gQGdyb3VwIGNvcmVcbi8vLyBAZXhhbXBsZVxuLy8vICAgLnNlbGVjdG9yIHtcbi8vLyAgICAgQGluY2x1ZGUgbXMtdnIobWFyZ2luLXRvcCwgMiwgJ2gxJyk7XG4vLy8gICB9XG4vLy8gQG91dHB1dFxuLy8vICAgLnNlbGVjdG9yIHtcbi8vLyAgICAgbWFyZ2luLXRvcDogM2VtO1xuLy8vICAgfVxuQG1peGluIHZyLW1zKFxuICAkcHJvcGVydGllcyxcbiAgJHZyLFxuICAkdGFyZ2V0LFxuICAkdHlwZWZhY2U6IGZhbHNlLFxuICAkdHlwaTogJHR5cGksXG4gICR0eXBpLW1zOiAkdHlwaS1tcyxcbiAgJHR5cGVmYWNlczogJHR5cGVmYWNlcyxcbiAgJGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHNcbikge1xuICBAaW5jbHVkZSBfdHktd3JpdGUtYnJlYWtwb2ludHMoKFxuICAgIGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHMsXG4gICAgb3V0cHV0OiAndnInLFxuICAgIHByb3BlcnRpZXM6ICRwcm9wZXJ0aWVzLFxuICAgIHJlbTogdHJ1ZSxcbiAgICB0YXJnZXQ6ICR0YXJnZXQsXG4gICAgdHlwZWZhY2U6ICR0eXBlZmFjZSxcbiAgICB0eXBlZmFjZXM6ICR0eXBlZmFjZXMsXG4gICAgdHlwaS1tczogJHR5cGktbXMsXG4gICAgdHlwaTogJHR5cGksXG4gICAgdnI6ICR2clxuICApKVxufVxuIiwiLy8gQmFzZWxpbmUgZ3JpZFxuLy8gLS0tLS0tLS0tLVxuLy8vIENyZWF0ZXMgYmFzZWxpbmUgZ3JpZFxuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRvZmZzZXQgWzBdIC0gT2Zmc2V0cyBiYXNlbGluZSBncmlkLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkYmFzZWxpbmUgW251bGxdIC0gR2VuZXJhdGVzIGEgYmFzZWxpbmUgb2YgeW91ciBjaG9pY2UuXG4vLy8gQHBhcmFtIHtIZXh9ICRjb2xvciBbcmdiYShibHVlLCAwLjE1KV0gLSBDb2xvciBvZiBiYXNlbGluZVxuLy8vIEBwYXJhbSB7TWFwfSAkdHlwaSBbJHR5cGldIC0gJHR5cGkgbWFwLlxuQG1peGluIGJhc2VsaW5lLWdyaWQoXG4gICRvZmZzZXQ6IDAsXG4gICRiYXNlbGluZTogbnVsbCxcbiAgJGNvbG9yOiByZ2JhKGJsdWUsIDAuMjUpLFxuICAkdHlwaTogJHR5cGlcbikge1xuICAvLyBDcmVhdGVzIHVzZXIgcmVxdWVzdGVkIGJhc2VsaW5lXG4gIEBpZiAkYmFzZWxpbmUge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICRjb2xvciAxcHgsIHRyYW5zcGFyZW50IDAsIHRyYW5zcGFyZW50ICRiYXNlbGluZSk7XG4gICAgYmFja2dyb3VuZC1zaXplOiAxMDAlICRiYXNlbGluZTtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwICRvZmZzZXQ7XG4gIH1cblxuICAvLyBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlIGJhc2VsaW5lIGZyb20gJHR5cGkgYmFzZVxuICBAZWxzZSB7XG4gICAgJGJhc2UtbWFwOiBfdHktZ2V0LWJhc2UtbWFwKCR0eXBpKTtcbiAgICAkX2Jhc2UtZm9udC1zaXplOiBfdHktZ2V0LWJhc2UtZm9udC1zaXplKCRiYXNlLW1hcCk7XG4gICAgJF9iYXNlLWxpbmUtaGVpZ2h0OiBfdHktZ2V0LWJhc2UtbGluZS1oZWlnaHQoJGJhc2UtbWFwKTtcbiAgICAkX3ByZXYtYnAtbGluZS1oZWlnaHQ6ICRfYmFzZS1saW5lLWhlaWdodDtcbiAgICAkYmFzZWxpbmU6ICRfYmFzZV9mb250LXNpemUgKiAkX2Jhc2UtbGluZS1oZWlnaHQ7XG5cbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCAkY29sb3IgMXB4LCB0cmFuc3BhcmVudCAwLCB0cmFuc3BhcmVudCAkYmFzZWxpbmUpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAkYmFzZWxpbmU7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAkb2Zmc2V0O1xuXG4gICAgQGVhY2ggJGJyZWFrcG9pbnQsICRicmVha3BvaW50LXZhbHVlIGluICRicmVha3BvaW50cyB7XG4gICAgICBAaWYgbWFwLWhhcy1rZXkoJGJhc2UtbWFwLCAkYnJlYWtwb2ludCkge1xuICAgICAgICAkZm9udC1tYXAtYnJlYWtwb2ludDogbWFwLWZldGNoKCR0eXBpLCBiYXNlICRicmVha3BvaW50KTtcbiAgICAgICAgJF9icC1iYXNlLWZvbnQtc2l6ZTogX3R5LWdldC1mb250LXNpemUoJGZvbnQtbWFwLWJyZWFrcG9pbnQpO1xuICAgICAgICAkX2JwLWxpbmUtaGVpZ2h0OiBfdHktZ2V0LWxpbmUtaGVpZ2h0KCRmb250LW1hcC1icmVha3BvaW50KTtcblxuICAgICAgICBAaWYgbm90ICRfYnAtbGluZS1oZWlnaHQge1xuICAgICAgICAgICRfYnAtbGluZS1oZWlnaHQ6ICRfcHJldi1icC1saW5lLWhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgICRfYnAtYmFzZWxpbmU6ICRfYnAtYmFzZS1mb250LXNpemUgKiAkX2JwLWxpbmUtaGVpZ2h0O1xuICAgICAgICBAbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAjeyRicmVha3BvaW50LXZhbHVlfSkge1xuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICRjb2xvciAxcHgsIHRyYW5zcGFyZW50IDAsIHRyYW5zcGFyZW50ICRfYnAtYmFzZWxpbmUpO1xuICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAkX2JwLWJhc2VsaW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgJF9wcmV2LWJwLWxpbmUtaGVpZ2h0OiAkX2JwLWxpbmUtaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gYmFzZWxpbmUtcHVzaCAoXG4gICR0eXBlZmFjZTogJ3ByaW1hcnknLFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cyxcbiAgJHR5cGk6ICR0eXBpLFxuICAkdHlwaS1tczogJHR5cGktbXMsXG4gICR0eXBpLWJyZWFrcG9pbnQ6ICR0eXBpLWJyZWFrcG9pbnQsXG4gICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbikge1xuICAkYmFzZS1tYXA6IG1hcC1nZXQoJHR5cGksIGJhc2UpO1xuICBAaWYgbm90ICRiYXNlLW1hcCB7XG4gICAgQGVycm9yIFwiJHR5cGkgbmVlZHMgdG8gaGF2ZSBhIGJhc2UgbWFwXCI7XG4gIH1cblxuICAkYmFzZS1mb250LXNpemU6IF90eS1nZXQtYmFzZS1mb250LXNpemUoJGJhc2UtbWFwKTtcblxuICBAZWFjaCAkYnJlYWtwb2ludCwgJGJyZWFrcG9pbnQtdmFsdWUgaW4gJGJhc2UtbWFwIHtcbiAgICAkZm9udC1zaXplOiBfdHktdG8tZW0oX3R5LWdldC1mb250LXNpemUoJGJyZWFrcG9pbnQtdmFsdWUpLCAkYmFzZS1mb250LXNpemUpO1xuICAgICRsaW5lLWhlaWdodDogX3R5LWdldC1saW5lLWhlaWdodCgkYnJlYWtwb2ludC12YWx1ZSk7XG5cbiAgICAvLyBPdXRwdXQgd2l0aG91dCBicmVha3BvaW50c1xuICAgIEBpZiAkYnJlYWtwb2ludCA9PSBudWxsIHtcbiAgICAgICBAaW5jbHVkZSBfdHktd3JpdGUtYmFzZWxpbmUtcHVzaChcbiAgICAgICAgJGZvbnQtc2l6ZTogJGZvbnQtc2l6ZSxcbiAgICAgICAgJGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQsXG4gICAgICAgICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgICAgICAgJF9tYXA6IChcbiAgICAgICAgICB0YXJnZXQtbWFwOiAkYmFzZS1tYXAsXG4gICAgICAgICAgYmFzZW1hcDogJGJhc2UtbWFwLFxuICAgICAgICAgIGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHMsXG4gICAgICAgICAgdHlwZWZhY2U6ICR0eXBlZmFjZSxcbiAgICAgICAgICB0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH1cblxuICAgIC8vIE91dHB1dCB3aXRoIGJyZWFrcG9pbnRzXG4gICAgQGVsc2Uge1xuICAgICAgQGluY2x1ZGUgX3R5LW91dHB1dC13aXRoLWJyZWFrcG9pbnQtbGlicmFyeSB7XG4gICAgICAgIEBpbmNsdWRlIF90eS13cml0ZS1iYXNlbGluZS1wdXNoKFxuICAgICAgICAgICRmb250LXNpemU6ICRmb250LXNpemUsXG4gICAgICAgICAgJGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQsXG4gICAgICAgICAgJGJyZWFrcG9pbnQ6ICRicmVha3BvaW50LFxuICAgICAgICAgICRfbWFwOiAoXG4gICAgICAgICAgICB0YXJnZXQtbWFwOiAkYmFzZS1tYXAsXG4gICAgICAgICAgICBiYXNlbWFwOiAkYmFzZS1tYXAsXG4gICAgICAgICAgICBicmVha3BvaW50czogJGJyZWFrcG9pbnRzLFxuICAgICAgICAgICAgdHlwZWZhY2U6ICR0eXBlZmFjZSxcbiAgICAgICAgICAgIHR5cGVmYWNlczogJHR5cGVmYWNlc1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cblxuICAvLyBAaWYgJGJhc2VsaW5lLXB1c2gge1xuICAvLyAgICRiYXNsaW5lLXB1c2gtcHJvcDogbWFwLWdldCgkX21hcCwgYmFzZWxpbmUtcHVzaC1wcm9wKTtcbiAgLy8gICAkX2xpbmUtaGVpZ2h0OiBfdHktZ2V0LWxpbmUtaGVpZ2h0LWZvci1iYXNlbGluZS1wdXNoKFxuICAvLyAgICAgJF9saW5lLWhlaWdodCxcbiAgLy8gICAgICRicmVha3BvaW50LFxuICAvLyAgICAgJF9tYXBcbiAgLy8gICApO1xuICAvLyAgICRwdXNoLWFtdDogX3R5LWdldC1iYXNlbGluZS1wdXNoLWFtdChcbiAgLy8gICAgICRmb250LXNpemU6ICRfZm9udC1zaXplLFxuICAvLyAgICAgJGxpbmUtaGVpZ2h0OiAkX2xpbmUtaGVpZ2h0LFxuICAvLyAgICAgJHR5cGVmYWNlOiAkdHlwZWZhY2UsXG4gIC8vICAgICAkdHlwZWZhY2VzOiAkdHlwZWZhY2VzXG4gIC8vICAgKTtcblxuICAvLyAgIHBhZGRpbmctdG9wOiAkcHVzaC1hbXQ7XG4gIC8vICAgbWFyZ2luLWJvdHRvbTogJHB1c2gtYW10ICogLTE7XG4gIC8vIH0iLCJAaW1wb3J0ICdpbml0JztcbkBpbXBvcnQgJ2NyZWF0ZS1jbGFzcyc7XG5cbi8vLy9cbi8vLyBAYXV0aG9yIFplbGwgTGlld1xuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8gQHBhcmFtIHtNYXB9ICR0eXBpIFskdHlwaV0gLSAkdHlwaSBtYXBcbi8vLyBAcGFyYW0ge01hcH0gJHR5cGktbXMgWyR0eXBpLW1zXSAtICR0eXBpLW1zIG1hcFxuLy8vIEBwYXJhbSB7TWFwfSAkYnJlYWtwb2ludHMgWyRicmVha3BvaW50c10gLSAkYnJlYWtwb2ludHMgbWFwXG4vLy8gQGdyb3VwIENvcmVcbi8vLy9cblxuLy8gdHlwaVxuLy8gLS0tLS0tLS0tLVxuLy8vIENyZWF0ZXMgZm9udC1zaXplIGFuZCBsaW5lLWhlaWdodCBwcm9wZXJ0aWVzXG4vLy8gQGF1dGhvciBaZWxsIExpZXdcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdGFyZ2V0IC0gZm9udC1tYXAga2V5XG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR0eXBlZmFjZSBbJ3ByaW1hcnknXSAtIHR5cGVmYWNlIGtleVxuLy8vIEBwYXJhbSB7Qm9vbH0gJGJhc2VsaW5lIFtmYWxzZV0gLSBQdXNoZXMgdG8gYmFzZWxpbmUgd2l0aCBwYWRkaW5nLXRvcCBhbmQgbWFyZ2luLWJvdHRvbSBwcm9wc1xuLy8vIEBwYXJhbSB7Qm9vbH0gJHJlbSBbdHJ1ZV0gLSBPdXRwdXRzIHJlbSBvciBlbVxuLy8vIEBwYXJhbSB7TWFwfSAkdHlwaS1icmVha3BvaW50IFskdHlwaS1icmVha3BvaW50XSAtIEJyZWFrcG9pbnQgbGlicmFyeVxuLy8vIEBwYXJhbSB7TWFwfSAkdHlwZWZhY2VzIFskdHlwZWZhY2VzXSAtICR0eXBlZmFjZXMgbWFwXG5AbWl4aW4gdHlwaSAoXG4gICR0YXJnZXQsXG4gICR0eXBlZmFjZTogJ3ByaW1hcnknLFxuICAkYmFzZWxpbmU6IGZhbHNlLFxuICAkcmVtOiB0cnVlLFxuICAkdHlwaTogJHR5cGksXG4gICR0eXBpLW1zOiAkdHlwaS1tcyxcbiAgJHR5cGktYnJlYWtwb2ludDogJHR5cGktYnJlYWtwb2ludCxcbiAgJHR5cGVmYWNlczogJHR5cGVmYWNlcyxcbiAgJGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHNcbikge1xuICBAaW5jbHVkZSBfdHktd3JpdGUtYnJlYWtwb2ludHMoKFxuICAgIGJhc2VsaW5lLXB1c2g6ICRiYXNlbGluZSxcbiAgICBicmVha3BvaW50czogJGJyZWFrcG9pbnRzLFxuICAgIGJyZWFrcG9pbnQtbGliOiAkdHlwaS1icmVha3BvaW50LFxuICAgIG91dHB1dDogJ3Byb3BzJyxcbiAgICByZW06ICRyZW0sXG4gICAgdGFyZ2V0OiAkdGFyZ2V0LFxuICAgIHR5cGVmYWNlOiAkdHlwZWZhY2UsXG4gICAgdHlwZWZhY2VzOiAkdHlwZWZhY2VzLFxuICAgIHR5cGktbXM6ICR0eXBpLW1zLFxuICAgIHR5cGk6ICR0eXBpXG4gICkpXG59XG5cbi8vIFR5cGktYmFzZVxuLy8gLS0tLS0tLS0tLVxuLy8vIENyZWF0ZXMgc3R5bGVzIGZvciByb290IHNlbGVjdG9yIChkZWZhdWx0cyB0byBIVE1MKVxuLy8vIEBhdXRob3IgWmVsbCBMaWV3XG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHNlbGVjdG9yIFtodG1sXSAtIERlZmF1bHQgc2VsZWN0b3IgZm9yIHJvb3QgZm9udC1zaXplIGFuZCBsaW5lLWhlaWdodFxuQG1peGluIHR5cGktYmFzZShcbiAgJHNlbGVjdG9yOiAnaHRtbCcsXG4gICR0eXBpOiAkdHlwaSxcbiAgJHR5cGktbXM6ICR0eXBpLW1zLFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50c1xuKSB7XG4gICN7JHNlbGVjdG9yfSB7XG4gICAgQGluY2x1ZGUgdHlwaShcbiAgICAgICR0YXJnZXQ6IGJhc2UsXG4gICAgICAkdHlwaTogJHR5cGksXG4gICAgICAkdHlwaS1tczogJHR5cGktbXMsXG4gICAgICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cyxcbiAgICAgICRyZW06IGZhbHNlXG4gICAgKVxuICB9XG59XG5cbiIsIi8vIFR5cGkgSW5pdGlhbGl6ZXJcbi8vIC0tLS0tLS0tLS1cbi8vIC0gQ3JlYXRlcyBiYXNlIG1hcFxuLy8gLSBDYWxscyBleHRlbmRlciAoaWYgdHlwaS1tcyBpcyB1c2VkKVxuLy8gPT09PT09PT09PVxuXG5AbWl4aW4gdHlwaS1pbml0KFxuICAkdHlwaTogJHR5cGksXG4gICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzLFxuICAkdHlwaS1tczogJHR5cGktbXMsXG4gICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbikge1xuICAkX3VwZGF0ZWQtdHlwaTogJHR5cGk7XG4gICRfdXBkYXRlZC10eXBpLW1zOiAkdHlwaS1tcztcblxuICAvLyBVbmNvbW1lbnQgd2hlbiBleHRlbmRlciBpcyBjb21wbGV0ZWQgKFJlcXVpcmVzIGxpYnNhc3MjMy40KVxuICAvLyBPbmx5IGludm9rdmUgZXh0ZW5kZXIgaWYgJHR5cGktbXMgaXMgcHJlc2VudFxuICAvLyAkdHlwaS1tcyBhbmQgJHR5cGkgbWFwIG11c3QgYmUgdGhlaXIgb3JpZ2luYWwgbmFtZXNcbiAgLy8gQGlmIHR5cGUtb2YoJHR5cGktbXMpID09ICdtYXAnIHtcbiAgLy8gICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJHR5cGktbXMge1xuICAvLyAgICAgJF91cGRhdGVkLXR5cGktbXM6IF90eS1tYXAtZXh0ZW5kZXIoJHR5cGktbXM6ICR0eXBpLW1zKTtcbiAgLy8gICB9XG4gIC8vICAgQGVhY2ggJGtleSwgJHZhbHVlIGluICR0eXBpIHtcbiAgLy8gICAgICRfdXBkYXRlZC10eXBpOiBfdHktbWFwLWV4dGVuZGVyKCRrZXkpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIEBpZiB0eXBlLW9mKCR0eXBpLW1zKSA9PSAnbWFwJyB7XG4gICAgQGluY2x1ZGUgX3R5LWNoZWNrLWV4dGVuZGVkLW1hcDtcbiAgfVxuXG4gIC8vIElzIHRoZXJlIGEgbmVlZCBmb3IgcHJpbWFyeSB0eXBlZmFjZT8gQ29tbWVudGVkIHVudGlsIHRoZXJlIHJlYWxseSBpcy5cbiAgLy8gQGlmIHR5cGUtb2YoJHR5cGVmYWNlcykgPT0gJ21hcCcge1xuICAvLyAgICRfaGFzLXByaW1hcnktdHlwZWZhY2U6IF90eS1oYXMtdHlwZWZhY2UoJ3ByaW1hcnknLCAkdHlwZWZhY2VzKTtcbiAgLy8gfVxuXG4gIEBpbmNsdWRlIHR5cGktYmFzZShcbiAgICAkdHlwaTogJF91cGRhdGVkLXR5cGksXG4gICAgJHR5cGktbXM6ICRfdXBkYXRlZC10eXBpLW1zLFxuICAgICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzXG4gIClcbn1cblxuIiwiLy8gdHlwaS1jcmVhdGVzLWNsYXNzZXNcbi8vIC0tLS0tLS0tLS1cbi8vLyBUeXBpIGhlbHBzIGNyZWF0ZSBjbGFzc2VzIGFjY29yZGluZyB0byBmb250LW1hcCBrZXlzXG4vLy8gQGF1dGhvciBaZWxsIExpZXdcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vIEBwYXJhbSB7TWFwfSAkdHlwaSBbJHR5cGldIC0gJHR5cGkgbWFwXG5AbWl4aW4gdHlwaS1jcmVhdGUtY2xhc3NlcygkdHlwaTogJHR5cGkpIHtcbiAgQGVhY2ggJG1hcCwgJHZhbHVlcyBpbiAkdHlwaSB7XG4gICAgLiN7JG1hcH0ge1xuICAgICAgQGluY2x1ZGUgdHlwaSgkbWFwKTtcbiAgICB9XG4gIH1cbn1cblxuIiwiLy8vL1xuLy8vIEBhdXRob3IgWmVsbCBMaWV3XG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAZ3JvdXAgaGVscGVycy10eXBlZmFjZXNcbi8vLyBAcmVxdWlyZXMgJHR5cGVmYWNlc1xuLy8vIEBwYXJhbSB7TWFwfSAkdHlwZWZhY2VzIFskdHlwZWZhY2VzXSAtICR0eXBlZmFjZXMgbWFwXG4vLy8vXG5cbi8vIGZ3XG4vLyAtLS0tLS0tLS0tXG4vLy8gQ3JlYXRlcyBmb250IHdlaWdodCBwcm9wZXJ0eSBmcm9tICR0eXBlZmFjZXMgbWFwLlxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdHlwZWZhY2UgLSB0eXBlZmFjZSBrZXlcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHdlaWdodCAtIGtleSBvZiB3ZWlnaHRcbi8vLyBAb3V0cHV0IGZvbnQtd2VpZ2h0OiAzMDA7XG5AbWl4aW4gZncoXG4gICR0eXBlZmFjZSxcbiAgJHdlaWdodCxcbiAgJHR5cGVmYWNlczogJHR5cGVmYWNlc1xuKSB7XG4gIEBpZiB0eXBlLW9mKCR0eXBlZmFjZXMpICE9ICdtYXAnIHtcbiAgICBAZXJyb3IgXCJDYW5ub3QgZmluZCAjeyR0eXBlZmFjZXN9IG1hcCBmb3VuZFwiO1xuICB9XG5cbiAgZm9udC13ZWlnaHQ6IG1hcC1mZXRjaCgkdHlwZWZhY2VzLCAkdHlwZWZhY2Ugd2VpZ2h0cyAkd2VpZ2h0KTtcbn1cblxuLy8gZmZcbi8vIC0tLS0tLS0tLS1cbi8vLyBDcmVhdGVzIGZvbnQgZmFtaWx5IHByb3BlcnR5IGZyb20gJHR5cGVmYWNlcyBtYXAuXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR0eXBlZmFjZSAtIHR5cGVmYWNlIGtleVxuLy8vIEBvdXRwdXQgZm9udC1mYW1pbHk6ICdmb250LXN0YWNrJ1xuQG1peGluIGZmKFxuICAkdHlwZWZhY2UsXG4gICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbikge1xuICBAaWYgdHlwZS1vZigkdHlwZWZhY2VzKSAhPSAnbWFwJyB7XG4gICAgQGVycm9yIFwiQ2Fubm90IGZpbmQgI3skdHlwZWZhY2VzfSBtYXAgZm91bmRcIjtcbiAgfVxuXG4gIGZvbnQtZmFtaWx5Om1hcC1mZXRjaCgkdHlwZWZhY2VzLCAkdHlwZWZhY2Ugc3RhY2spO1xufSIsIi8vID09PT09PT09PT1cclxuLy8gVG9vbHNcclxuLy8gPT09PT09PT09PVxyXG5cclxuLy8gTWl4aW5zXHJcbkBtaXhpbiBjZiB7XHJcbiAgJjpiZWZvcmUge1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIGRpc3BsYXk6IHRhYmxlO1xyXG4gIH1cclxuXHJcbiAgJjphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgZGlzcGxheTogdGFibGU7XHJcbiAgICBjbGVhcjogYm90aDtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiBjZW50ZXIge1xyXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gIG1hcmdpbi1yaWdodDogYXV0bztcclxufVxyXG5cclxuQG1peGluIGFic29sdXRlLWNlbnRlciB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogNTAlO1xyXG4gIGxlZnQ6IDUwJTtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcclxufVxyXG5cclxuQG1peGluIHotaW5kZXgoJGxheWVyLCAkcG9zaXRpb246cmVsYXRpdmUpIHtcclxuICBwb3NpdGlvbjogJHBvc2l0aW9uO1xyXG4gIHotaW5kZXg6IGxheWVyLWluZGV4KCRsYXllcik7XHJcbn1cclxuXHJcbkBtaXhpbiB2ZXJ0aWNhbC1hbGlnbigkcG9zaXRpb246IHJlbGF0aXZlKSB7XHJcbiAgcG9zaXRpb246ICRwb3NpdGlvbjtcclxuICB0b3A6IDUwJTtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbn1cclxuXHJcbkBtaXhpbiBpbWFnZS0yeCgkaW1hZ2UpIHtcclxuICBAbWVkaWEgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMS4zKSxcclxuICAgICAgICAgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIuNi8yKSxcclxuICAgICAgICAgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMS4zKSxcclxuICAgICAgICAgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDEuMyksXHJcbiAgICAgICAgIChtaW4tcmVzb2x1dGlvbjogMS4zZHBweCkge1xyXG4gICAgLyogb24gcmV0aW5hLCB1c2UgaW1hZ2UgdGhhdCdzIHNjYWxlZCBieSAyICovXHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJGltYWdlKTtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiByZXNwb25zaXZlLWJnLWltYWdlKCRpbWFnZS13aWR0aCwgJGltYWdlLWhlaWdodCkge1xyXG4gIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcclxuICBoZWlnaHQ6IDA7XHJcbiAgcGFkZGluZy1ib3R0b206IHBlcmNlbnRhZ2UoJGltYWdlLWhlaWdodCAvICRpbWFnZS13aWR0aCk7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi8vIEZ1bmN0aW9uc1xyXG5AZnVuY3Rpb24gbGF5ZXItaW5kZXgoJGxheWVyKSB7XHJcbiAgQHJldHVybiBpbmRleCgkbGF5ZXJzLCAkbGF5ZXIpO1xyXG59IiwiLy8gPT09PT09PT09PVxyXG4vLyBCYXNlXHJcbi8vID09PT09PT09PT1cclxuXHJcbi8vIEZvcm1cclxuJHNhc3N5LWJhc2UtY29sb3I6IGRhcmtlbigjZWFlYmVjLCAxMCUpO1xyXG4kc2Fzc3ktYWNjZW50LWNvbG9yOiAjNzRkM2RlO1xyXG5cclxuQGltcG9ydCBcIm5vZGVfbW9kdWxlcy9zYXNzeS1pbnB1dHMvc2Fzcy9tYWluXCI7XHJcblxyXG5odG1sIHtcclxuICAgIEBpbmNsdWRlIHR5cGktYmFzZSgpO1xyXG5cclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbn1cclxuXHJcbioge1xyXG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcclxuXHJcbiAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgYm94LXNpemluZzogaW5oZXJpdDtcclxuICAgIH1cclxuXHJcbiAgICAmOmFmdGVyIHtcclxuICAgICAgICBib3gtc2l6aW5nOiBpbmhlcml0O1xyXG4gICAgfVxyXG59XHJcblxyXG5ib2R5IHtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7ICAgIFxyXG4gICAgY29sb3I6ICRkYXJrLWdyZXk7XHJcbiAgICBmb250LWZhbWlseTogJHNhbnMtc2VyaWY7XHJcbn1cclxuXHJcbi8vIEVsZW1lbnRzXHJcbmgxIHtcclxuICAgIEBpbmNsdWRlIHR5cGkoaDEtbWFwKTtcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbn1cclxuXHJcbmgyIHtcclxuICAgIEBpbmNsdWRlIHR5cGkoaDItbWFwKTtcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbn1cclxuXHJcbmgzIHtcclxuICAgIEBpbmNsdWRlIHR5cGkoaDMtbWFwKTtcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbn1cclxuXHJcbmg0IHtcclxuICAgIEBpbmNsdWRlIHR5cGkoaDQtbWFwKTtcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbn1cclxuXHJcbmg1IHtcclxuICAgIEBpbmNsdWRlIHR5cGkoaDUtbWFwKTtcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbn1cclxuXHJcbmg2IHtcclxuICAgIEBpbmNsdWRlIHR5cGkoaDYtbWFwKTtcclxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XHJcbn1cclxuXHJcbnNtYWxsIHtcclxuICAgIEBpbmNsdWRlIHR5cGkoc21hbGwtbWFwKTtcclxufVxyXG5cclxucCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG59XHJcblxyXG5hIHtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgICBjb2xvcjogJGJsdWU7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcblxyXG4gICAgJjpmb2N1cyB7XHJcbiAgICAgICAgb3V0bGluZTogMDtcclxuICAgIH1cclxufVxyXG5cclxuc3Ryb25nIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG51bCwgb2wge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xyXG59XHJcblxyXG5ociB7XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgICBoZWlnaHQ6IDFweDtcclxuICAgIGJhY2tncm91bmQ6IGRhcmtlbigkZ3JleSwgNSUpO1xyXG59XHJcblxyXG5pbnB1dFt0eXBlPXN1Ym1pdF0sXHJcbmlucHV0W3R5cGU9YnV0dG9uXSxcclxuYnV0dG9uIHtcclxuICAgIEBpbmNsdWRlIHNhc3N5LWJ1dHRvbjtcclxuXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkb3JhbmdlO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG5pbnB1dFt0eXBlPXRleHRdLFxyXG5pbnB1dFt0eXBlPXVybF0sXHJcbmlucHV0W3R5cGU9ZW1haWxdLFxyXG5pbnB1dFt0eXBlPXBhc3N3b3JkXSxcclxuaW5wdXRbdHlwZT1udW1iZXJdIHtcclxuICAgIEBpbmNsdWRlIHNhc3N5LXRleHQ7XHJcbn1cclxuXHJcbnRleHRhcmVhIHtcclxuICAgIEBpbmNsdWRlIHNhc3N5LXRleHRhcmVhO1xyXG59XHJcblxyXG4uby1zZWxlY3Qtd3JhcCB7XHJcbiAgICBAaW5jbHVkZSBzYXNzeS1zZWxlY3Q7XHJcblxyXG4gICAgc2VsZWN0IHtcclxuICAgICAgICBmb250LXNpemU6IDAuNzVyZW07XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDEuMTI1cmVtO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAwLjM4cmVtO1xyXG4gICAgfVxyXG59XHJcblxyXG4uby1zZWxlY3QtLWxhYmVsIHtcclxuICAgIGZvbnQtc2l6ZTogMC42MjVyZW07XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1hcmdpbi10b3A6IDAuM2VtO1xyXG4gICAgcGFkZGluZzogMCAwLjc1cmVtO1xyXG4gICAgei1pbmRleDogMTtcclxuICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDNweCk7XHJcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbn1cclxuXHJcbmlucHV0W3R5cGU9Y2hlY2tib3hdIHtcclxuICAgIEBpbmNsdWRlIHNhc3N5LWNoZWNrYm94O1xyXG4gICAgXHJcbiAgICArIGxhYmVsIHtcclxuICAgICAgICAmOjpiZWZvcmUge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGdyZXk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICY6Zm9jdXMge1xyXG4gICAgICAgICsgbGFiZWwge1xyXG4gICAgICAgICAgICAmOjpiZWZvcmUge1xyXG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAmOmNoZWNrZWQge1xyXG4gICAgICAgICsgbGFiZWwge1xyXG4gICAgICAgICAgICAmOjphZnRlciB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAn4pyTJztcclxuICAgICAgICAgICAgICAgIGJvcmRlcjogMDtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogbm9uZTtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJjo6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRibHVlO1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGRhcmstYmx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuaW5wdXRbdHlwZT1yYWRpb10ge1xyXG4gICAgQGluY2x1ZGUgc2Fzc3ktcmFkaW87XHJcbn1cclxuXHJcbm1haW4ge1xyXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICBwYWRkaW5nLXRvcDogMnJlbTtcclxuICAgIH1cclxuXHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgcGFkZGluZy10b3A6IDFyZW07XHJcbn1cclxuXHJcbi5pbWctcmVzcG9uc2l2ZSB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IGF1dG87XHJcbn0iLCIkc2Fzc3ktYmFzZS1jb2xvcjogIzc3NyAhZGVmYXVsdDtcbiRzYXNzeS1hY2NlbnQtY29sb3I6IGNvcmFsICFkZWZhdWx0O1xuJHNhc3N5LWRpc2FibGVkLWNvbG9yOiAjZWVlICFkZWZhdWx0O1xuXG5AaW1wb3J0IFwiaGVscGVycy9weC10by1yZW1cIjtcbkBpbXBvcnQgXCJoZWxwZXJzL2FwcGVhcmFuY2VcIjtcblxuQGltcG9ydCBcImlucHV0cy90ZXh0XCI7XG5AaW1wb3J0IFwiaW5wdXRzL2J1dHRvblwiO1xuQGltcG9ydCBcImlucHV0cy9yYWRpb1wiO1xuQGltcG9ydCBcImlucHV0cy9jaGVja2JveFwiO1xuQGltcG9ydCBcImlucHV0cy9zZWxlY3RcIjtcbiIsIkBmdW5jdGlvbiByZW0oJHB4dmFsKSB7XG4gICRiYXNlOiAxNjtcbiAgQHJldHVybiAoJHB4dmFsIC8gJGJhc2UpICogMXJlbTtcbn1cbiIsIkBtaXhpbiBhcHBlYXJhbmNlLW5vbmUge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbn1cbiIsIkBtaXhpbiBzYXNzeS10ZXh0IHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICBtaW4taGVpZ2h0OiByZW0oMzkpO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogcmVtKDEwKTtcbiAgbWFyZ2luLWJvdHRvbTogcmVtKDEwKTtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogcmVtKDE0KTtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcblxuICBib3JkZXI6IHJlbSgxKSBzb2xpZCBsaWdodGVuKCRzYXNzeS1iYXNlLWNvbG9yLCAxMCUpO1xuICBib3JkZXItcmFkaXVzOiByZW0oMyk7XG4gIG91dGxpbmU6IG5vbmU7XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG5cbiAgJjpmb2N1cyB7XG4gICAgYm9yZGVyLWNvbG9yOiAkc2Fzc3ktYWNjZW50LWNvbG9yO1xuICB9XG5cbiAgJjpkaXNhYmxlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHNhc3N5LWRpc2FibGVkLWNvbG9yO1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gIH1cbn1cblxuQG1peGluIHNhc3N5LXNlYXJjaCB7XG4gIEBpbmNsdWRlIHNhc3N5LXRleHQ7XG4gIEBpbmNsdWRlIGFwcGVhcmFuY2Utbm9uZTtcblxuICBwYWRkaW5nOiAwIHJlbSg0KTtcbn1cblxuQG1peGluIHNhc3N5LXRleHRhcmVhIHtcbiAgQGluY2x1ZGUgc2Fzc3ktdGV4dDtcblxuICBkaXNwbGF5OiBibG9jaztcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG4iLCJAbWl4aW4gc2Fzc3ktYnV0dG9uIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgbWluLWhlaWdodDogcmVtKDM5KTtcbiAgcGFkZGluZzogcmVtKDEyKSByZW0oMjQpO1xuICBtYXJnaW4tYm90dG9tOiByZW0oMTApO1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgZm9udC1zaXplOiByZW0oMTQpO1xuXG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogcmVtKDMpO1xuICBvdXRsaW5lOiBub25lO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogJHNhc3N5LWFjY2VudC1jb2xvcjtcblxuICAmOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICBib3JkZXI6IDA7IC8qIFJlbW92ZXMgZG90dGVkIGxpbmUgaW4gRmlyZWZveCAqL1xuICB9XG5cbiAgJjpob3ZlciwgJjpmb2N1cyB7XG4gICAgYm94LXNoYWRvdzogMCByZW0oMikgMCAkc2Fzc3ktYmFzZS1jb2xvcjtcbiAgfVxuXG4gICY6YWN0aXZlIHtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIHJlbSgyKSAwIGRhcmtlbigkc2Fzc3ktYWNjZW50LWNvbG9yLCAxMCUpO1xuICB9XG5cbiAgJjpkaXNhYmxlZCB7XG4gICAgY29sb3I6IGRhcmtlbigkc2Fzc3ktZGlzYWJsZWQtY29sb3IsIDMwJSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHNhc3N5LWRpc2FibGVkLWNvbG9yO1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG5cbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcbiAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgfVxuICB9XG59XG4iLCJAbWl4aW4gc2Fzc3ktcmFkaW8ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IC0xMDAwcmVtO1xuXG4gICsgbGFiZWwge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgbWFyZ2luLXJpZ2h0OiByZW0oMTUpO1xuICAgIHBhZGRpbmctbGVmdDogcmVtKDI1KTtcbiAgICBmb250LXNpemU6IHJlbSgxNCk7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgY29udGVudDogJyc7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgaGVpZ2h0OiByZW0oMTgpO1xuICAgICAgd2lkdGg6IHJlbSgxOCk7XG4gICAgICBib3JkZXItcmFkaXVzOiByZW0oOSk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Fzc3ktYmFzZS1jb2xvcjtcbiAgICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAgIH1cblxuICAgICY6OmFmdGVyIHtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjNzO1xuICAgIH1cbiAgfVxuXG4gICY6Y2hlY2tlZCArIGxhYmVsOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IHJlbSg1KTtcbiAgICB0b3A6IHJlbSgzKTtcbiAgICBoZWlnaHQ6IHJlbSg4KTtcbiAgICB3aWR0aDogcmVtKDgpO1xuICAgIGJvcmRlci1yYWRpdXM6IHJlbSgxNSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHNhc3N5LWFjY2VudC1jb2xvcjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIH1cblxuICAmOmZvY3VzICsgbGFiZWw6OmJlZm9yZSB7XG4gICAgYm94LXNoYWRvdzogMCByZW0oMSkgMCBkYXJrZW4oJHNhc3N5LWJhc2UtY29sb3IsIDMwJSk7XG4gIH1cblxuICAmOmRpc2FibGVkIHtcbiAgICArIGxhYmVsIHtcbiAgICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG5cbiAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRzYXNzeS1kaXNhYmxlZC1jb2xvcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmOmNoZWNrZWQgKyBsYWJlbDo6YWZ0ZXIge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCRzYXNzeS1kaXNhYmxlZC1jb2xvciwgMzAlKTtcbiAgICB9XG4gIH1cbn1cbiIsIkBtaXhpbiBzYXNzeS1jaGVja2JveCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogLTEwMDByZW07XG5cbiAgKyBsYWJlbCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBtYXJnaW4tcmlnaHQ6IHJlbSgxNSk7XG4gICAgcGFkZGluZy1sZWZ0OiByZW0oMjUpO1xuICAgIGZvbnQtc2l6ZTogcmVtKDE0KTtcblxuICAgICY6OmJlZm9yZSB7XG4gICAgICBjb250ZW50OiAnJztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgICBoZWlnaHQ6IHJlbSgxNik7XG4gICAgICB3aWR0aDogcmVtKDE2KTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IHJlbSgzKTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRzYXNzeS1iYXNlLWNvbG9yO1xuICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gICAgfVxuXG4gICAgJjo6YWZ0ZXIge1xuICAgICAgY29udGVudDogJyc7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xuICAgIH1cbiAgfVxuXG4gIC8qIE5vdCBkZXBlbmRpbmcgb24gdGhlIHVzZXIncyBmb250IGhlcmUgaW1wcm92ZXMgY29uc2lzdGVuY3kuICovXG4gICY6Y2hlY2tlZCArIGxhYmVsOjphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG9wYWNpdHk6IDE7XG4gICAgbGVmdDogcmVtKDUpO1xuICAgIHRvcDogMDtcbiAgICB3aWR0aDogIHJlbSgzKTtcbiAgICBoZWlnaHQ6IHJlbSgxMSk7XG4gICAgYm9yZGVyOiBzb2xpZCAkc2Fzc3ktYWNjZW50LWNvbG9yO1xuICAgIGJvcmRlci13aWR0aDogMCByZW0oMykgcmVtKDMpIDA7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuICAgIGxpbmUtaGVpZ2h0OiByZW0oMTYpO1xuICB9XG5cbiAgJjpmb2N1cyArIGxhYmVsOjpiZWZvcmUge1xuICAgIGJveC1zaGFkb3c6IDAgcmVtKDEpIDAgZGFya2VuKCRzYXNzeS1iYXNlLWNvbG9yLCAzMCUpO1xuICB9XG5cbiAgJjpkaXNhYmxlZCB7XG4gICAgKyBsYWJlbCB7XG4gICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuXG4gICAgICAmOjpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Fzc3ktZGlzYWJsZWQtY29sb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJjpjaGVja2VkICsgbGFiZWw6OmFmdGVyIHtcbiAgICAgIGJvcmRlci1jb2xvcjogZGFya2VuKCRzYXNzeS1kaXNhYmxlZC1jb2xvciwgMzAlKTtcbiAgICB9XG4gIH1cbn1cbiIsIkBtaXhpbiBzYXNzeS1zZWxlY3Qge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGNvbG9yOiBpbmhlcml0O1xuXG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnXFwyNUJFJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiByZW0oMTApO1xuICAgIHJpZ2h0OiByZW0oMTUpO1xuICAgIGNvbG9yOiAkc2Fzc3ktYmFzZS1jb2xvcjtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgfVxuXG4gIC8qIFRhcmdldCBJRTkgYW5kIElFMTAgKi9cbiAgc2VsZWN0OjotbXMtZXhwYW5ke1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cblxuICBzZWxlY3Qge1xuICAgIEBpbmNsdWRlIGFwcGVhcmFuY2Utbm9uZTtcblxuICAgIGhlaWdodDogcmVtKDM5KTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBwYWRkaW5nLWxlZnQ6IHJlbSgxMCk7XG4gICAgbWFyZ2luLWJvdHRvbTogcmVtKDEwKTtcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgICBmb250LXNpemU6IHJlbSgxNCk7XG5cbiAgICBib3JkZXI6IHJlbSgxKSBzb2xpZCBsaWdodGVuKCRzYXNzeS1iYXNlLWNvbG9yLCAxMCUpO1xuICAgIGJvcmRlci1yYWRpdXM6IHJlbSgzKTtcbiAgICBvdXRsaW5lOiBub25lO1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG5cbiAgICAmOmZvY3VzIHtcbiAgICAgIGJvcmRlci1jb2xvcjogJHNhc3N5LWFjY2VudC1jb2xvcjtcbiAgICB9XG5cbiAgICAmOmRpc2FibGVkIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRzYXNzeS1kaXNhYmxlZC1jb2xvcjtcbiAgICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBzYXNzeS1zZWxlY3QtbXVsdGlwbGUge1xuICBAaW5jbHVkZSBhcHBlYXJhbmNlLW5vbmU7XG5cbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDAgcmVtKDEwKTtcbiAgbWFyZ2luLWJvdHRvbTogcmVtKDEwKTtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogcmVtKDE0KTtcblxuICBib3JkZXI6IHJlbSgxKSBzb2xpZCBsaWdodGVuKCRzYXNzeS1iYXNlLWNvbG9yLCAxMCUpO1xuICBib3JkZXItcmFkaXVzOiByZW0oMyk7XG4gIG91dGxpbmU6IG5vbmU7XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG5cbiAgJjpmb2N1cyB7XG4gICAgYm9yZGVyLWNvbG9yOiAkc2Fzc3ktYWNjZW50LWNvbG9yO1xuICB9XG5cbiAgJjpkaXNhYmxlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHNhc3N5LWRpc2FibGVkLWNvbG9yO1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gIH1cbn1cbiIsIi8vID09PT09PT09PT1cclxuLy8gT2JqZWN0c1xyXG4vLyA9PT09PT09PT09XHJcblxyXG4uby1jb250YWluZXIge1xyXG4gICAgQGluY2x1ZGUgY2Y7XHJcblxyXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICB3aWR0aDogNzUwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgQGluY2x1ZGUgbWFwcHktYnAoeGxhcmdlKSB7XHJcbiAgICAgICAgd2lkdGg6IDk3MHB4O1xyXG4gICAgfVxyXG5cclxuICAgIEBpbmNsdWRlIG1hcHB5LWJwKHh4bCkge1xyXG4gICAgICAgIHdpZHRoOiAxMTcwcHg7XHJcbiAgICB9XHJcblxyXG4gICAgcGFkZGluZy1sZWZ0OiAwLjkzNzVyZW07XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjkzNzVyZW07XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcclxufVxyXG5cclxuLm8tY29udGFpbmVyLS1mbHVpZCB7XHJcbiAgICBAaW5jbHVkZSBjZjtcclxuXHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAwLjkzNzVyZW07XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDAuOTM3NXJlbTtcclxufVxyXG5cclxuLm8tcm93IHtcclxuICAgIEBpbmNsdWRlIGNmO1xyXG5cclxuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0wLjkzNzVyZW07XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAtMC45Mzc1cmVtO1xyXG4gICAgfVxyXG59XHJcblxyXG4uby1jb2wtLTEge1xyXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDEgb2YgMTIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuIFxyXG4gICAgQGluY2x1ZGUgc3BhbigxMiBvZiAxMik7XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oMSBvZiAxMiBsYXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS0yIHtcclxuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigyIG9mIDEyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiBcclxuICAgIEBpbmNsdWRlIHNwYW4oMTIgb2YgMTIpO1xyXG4gXHJcbiAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XHJcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDIgb2YgMTIgbGFzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi5vLWNvbC0tMyB7XHJcbiAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xyXG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oMyBvZiAxMik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gXHJcbiAgICBAaW5jbHVkZSBzcGFuKDEyIG9mIDEyKTtcclxuIFxyXG4gICAgJjpsYXN0LWNoaWxkIHtcclxuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigzIG9mIDEyIGxhc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICY6bnRoLWNoaWxkKDRuKSB7ICBcclxuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigzIG9mIDEyIGxhc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgXHJcbiAgICB9XHJcbn1cclxuXHJcbi5vLWNvbC0tNCB7XHJcbiAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xyXG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oNCBvZiAxMik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gXHJcbiAgICBAaW5jbHVkZSBzcGFuKDEyIG9mIDEyKTtcclxuIFxyXG4gICAgJjpsYXN0LWNoaWxkIHtcclxuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig0IG9mIDEyIGxhc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4uby1jb2wtLTUge1xyXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDUgb2YgMTIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuIFxyXG4gICAgQGluY2x1ZGUgc3BhbigxMiBvZiAxMik7XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oNSBvZiAxMiBsYXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS02IHtcclxuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig2IG9mIDEyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiBcclxuICAgIEBpbmNsdWRlIHNwYW4oMTIgb2YgMTIpO1xyXG4gXHJcbiAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XHJcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDYgb2YgMTIgbGFzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi5vLWNvbC0tNyB7XHJcbiAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xyXG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oNyBvZiAxMik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gXHJcbiAgICBAaW5jbHVkZSBzcGFuKDEyIG9mIDEyKTtcclxuIFxyXG4gICAgJjpsYXN0LWNoaWxkIHtcclxuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig3IG9mIDEyIGxhc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4uby1jb2wtLTgge1xyXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDggb2YgMTIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuIFxyXG4gICAgQGluY2x1ZGUgc3BhbigxMiBvZiAxMik7XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oOCBvZiAxMiBsYXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS05IHtcclxuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig5IG9mIDEyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiBcclxuICAgIEBpbmNsdWRlIHNwYW4oMTIgb2YgMTIpO1xyXG4gXHJcbiAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XHJcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDkgb2YgMTIgbGFzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi5vLWNvbC0tMTAge1xyXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDEwIG9mIDEyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiBcclxuICAgIEBpbmNsdWRlIHNwYW4oMTIgb2YgMTIpO1xyXG4gXHJcbiAgICAmOmxhc3QtY2hpbGQge1xyXG4gICAgICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XHJcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDEwIG9mIDEyIGxhc3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4uby1jb2wtLTExIHtcclxuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigxMSBvZiAxMik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gXHJcbiAgICBAaW5jbHVkZSBzcGFuKDEyIG9mIDEyKTtcclxuIFxyXG4gICAgJjpsYXN0LWNoaWxkIHtcclxuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigxMSBvZiAxMiBsYXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS0xX19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oMSBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigxIG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS0yX19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oMiBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigyIG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS0zX19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oMyBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigzIG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS00X19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oNCBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig0IG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS01X19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oNSBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig1IG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS02X19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oNiBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig2IG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS03X19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oNyBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig3IG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS04X19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oOCBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig4IG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS05X19zbSB7XHJcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgIEBpbmNsdWRlIHNwYW4oOSBvZiAxMik7XHJcbiAgICB9XHJcbiBcclxuICAgICY6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig5IG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS0xMF9fc20ge1xyXG4gICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICBAaW5jbHVkZSBzcGFuKDEwIG9mIDEyKTtcclxuICAgIH1cclxuIFxyXG4gICAgJjpsYXN0LWNoaWxkIHtcclxuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDEwIG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS0xMV9fc20ge1xyXG4gICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcclxuICAgICAgICBAaW5jbHVkZSBzcGFuKDExIG9mIDEyKTtcclxuICAgIH1cclxuIFxyXG4gICAgJjpsYXN0LWNoaWxkIHtcclxuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xyXG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDExIG9mIDEyIGxhc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLm8tY29sLS0xMiB7IFxyXG4gICAgQGluY2x1ZGUgc3BhbigxMiBvZiAxMik7XHJcbn1cclxuXHJcbi5vLWZsZXgge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XHJcblxyXG4gICAgPiBbY2xhc3NePVwiby1jb2wtLVwiXSB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbjtcclxuICAgIH1cclxufVxyXG5cclxuLm8tZm9ybS0tZ3JvdXAge1xyXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAzcmVtO1xyXG4gICAgfVxyXG5cclxuICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTtcclxufVxyXG5cclxuLm8tZmllbGQtLWdyb3VwIHtcclxuICAgIEBpbmNsdWRlIGNmO1xyXG59XHJcblxyXG4uby1oZWFkZXIge1xyXG4gICAgbWFyZ2luLXRvcDogMC42NXJlbTtcclxuICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbiAgICBjb2xvcjogIzMzMzMzMztcclxufVxyXG5cclxuLm8tZGl2aWRlciB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBmb250LXNpemU6IDAuNzVyZW07XHJcbiAgICBjb2xvcjogI2FmYTdhNTtcclxuXHJcbiAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgQGluY2x1ZGUgdmVydGljYWwtYWxpZ24oYWJzb2x1dGUpO1xyXG5cclxuICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogMnB4O1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGdyZXk7XHJcbiAgICAgICAgei1pbmRleDogLTE7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5vLWRpdmlkZXItLXR4dCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgIHBhZGRpbmc6IDAuMzEyNXJlbSAwLjYyNXJlbTtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxufVxyXG5cclxuLm8tZm9ybS1jaGVja2JveCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xyXG4gICAgbWFyZ2luLXRvcDogMXJlbTtcclxufSIsIi8vID09PT09PT09PT1cclxuLy8gVXRpbGl0aWVzXHJcbi8vID09PT09PT09PT1cclxuXHJcbi51LWNsZWFyZml4IHtcclxuICAgIEBpbmNsdWRlIGNmO1xyXG59XHJcblxyXG4udS1yZWxhdGl2ZSB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi51LW1ibiB7XHJcblx0bWFyZ2luLWJvdHRvbTogMDtcclxufVxyXG5cclxuLnUtdGV4dC0tbGVmdCB7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG59XHJcblxyXG4udS10ZXh0LS1yaWdodCB7XHJcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcclxufVxyXG5cclxuLnUtZmxvYXQtLWxlZnQge1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbn1cclxuXHJcbi51LWZsb2F0LS1yaWdodCB7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbn1cclxuXHJcbi51LXRleHQtLXdoaXRlIHtcclxuXHRjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbi51LWxvd2VyY2FzZSB7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xyXG59XHJcblxyXG4udS11cHBlcmNhc2Uge1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxufVxyXG5cclxuLnUtZmxleGJveCB7XHJcblx0ZGlzcGxheTogZmxleDtcclxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59IiwiLy8gPT09PT09PT09PT09PT09PT09PT09XHJcbi8vIENvbXBvbmVudCAtIEhlYWRlciBcclxuLy8gPT09PT09PT09PT09PT09PT09PT09XHJcbmhlYWRlciB7XHJcblx0QGluY2x1ZGUgY2Y7XHJcbn1cclxuXHJcbi5jLWxvZ28ge1xyXG5cdG1heC13aWR0aDogMTY1cHg7XHJcbn1cclxuXHJcbi5jLWxvZ28tLWltZyB7XHJcblx0YmFja2dyb3VuZDogdXJsKFwiLy92aWEucGxhY2Vob2xkZXIuY29tLzE2NXg0MD90ZXh0PUxPR08rQk9PU1RFRFwiKSAwIDAgbm8tcmVwZWF0O1xyXG5cdHRleHQtaW5kZW50OiAtOTk5OXB4O1xyXG5cclxuXHQvLyBzdWJzdGl0dXRlIGZvciB5b3VyIGltYWdlIGRpbWVuc2lvbnNcclxuICAgIEBpbmNsdWRlIHJlc3BvbnNpdmUtYmctaW1hZ2UoMTY1LCA0MCk7XHJcbn1cclxuXHJcbi5jLWJyZWFkY3J1bWItLWxpc3Qge1xyXG5cdEBpbmNsdWRlIGNmO1xyXG5cclxuXHRsaXN0LXN0eWxlOiBub25lO1xyXG5cdHBhZGRpbmctbGVmdDogMDtcclxuXHJcblx0bGkge1xyXG5cdFx0QGluY2x1ZGUgdHlwaSgnYnJlYWRjcnVtYi1tYXAnKTtcclxuXHJcblx0XHRmbG9hdDogbGVmdDtcclxuXHJcblx0XHQmOm5vdCg6Zmlyc3QtY2hpbGQpIHtcclxuXHRcdFx0JjpiZWZvcmUge1xyXG5cdFx0XHRcdGNvbnRlbnQ6IFwiPlwiO1xyXG5cdFx0XHRcdG1hcmdpbjogMCAwLjYyNXJlbTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLmMtcGF5bWVudC0tbGlzdCB7XHJcblx0QGluY2x1ZGUgY2Y7XHJcblxyXG5cdGxpc3Qtc3R5bGU6IG5vbmU7XHJcblx0cGFkZGluZy1sZWZ0OiAwO1xyXG5cclxuXHRsaSB7XHJcblx0XHRmbG9hdDogbGVmdDtcclxuXHJcblx0XHQmOm5vdCg6Zmlyc3QtY2hpbGQpIHtcclxuXHRcdFx0bWFyZ2luLWxlZnQ6IDAuMzEyNXJlbTtcclxuXHRcdH1cclxuXHR9XHJcbn0iLCIvLyA9PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQ29tcG9uZW50IC0gQ2FydCBcclxuLy8gPT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4uYy1jYXJ0LS1kZXRhaWxzIHtcclxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblx0cGFkZGluZy1sZWZ0OiAycmVtO1xyXG5cdHBhZGRpbmctcmlnaHQ6IDFyZW07XHJcblx0XHJcblx0JjpiZWZvcmUge1xyXG5cdFx0Y29udGVudDogXCJcIjtcclxuXHRcdGJhY2tncm91bmQtY29sb3I6ICRsaWdodC1ncmV5O1xyXG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xyXG5cdFx0dG9wOiAtMnJlbTtcclxuXHRcdGxlZnQ6IDA7XHJcblx0XHRoZWlnaHQ6IDEwMCU7XHJcblx0XHR3aWR0aDogNTAwJTtcclxuXHRcdGJvcmRlci1sZWZ0OiAxcHggc29saWQgZGFya2VuKCRncmV5LCAxNSUpO1xyXG5cdFx0ei1pbmRleDogLTE7XHJcblx0fVxyXG59XHJcblxyXG4uYy1jYXJ0LS1saXN0IHtcclxuXHRsaXN0LXN0eWxlOiBub25lO1xyXG5cdHBhZGRpbmctbGVmdDogMDtcclxuXHRwYWRkaW5nLWJvdHRvbTogMXJlbTtcclxuXHRib3JkZXItYm90dG9tOiAxcHggc29saWQgZGFya2VuKCRncmV5LCAxMCUpO1xyXG5cclxuXHRsaSB7XHJcblx0XHRAaW5jbHVkZSBjZjtcclxuXHJcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcblx0XHRkaXNwbGF5OiBmbGV4O1xyXG5cclxuXHRcdCY6bm90KDpmaXJzdC1jaGlsZCkge1xyXG5cdFx0XHRtYXJnaW4tdG9wOiAxcmVtO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLmMtY2FydC0tcHJvZHVjdCB7XHJcblx0QGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuXHRcdG1hcmdpbi1yaWdodDogMnJlbTtcclxuXHR9XHJcblxyXG5cdHdpZHRoOiA2MHB4O1xyXG5cdGhlaWdodDogNjBweDtcclxuXHRib3JkZXItcmFkaXVzOiA2cHg7XHJcblx0Ym9yZGVyOiAxcHggc29saWQgJGdyZXk7XHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdGZsb2F0OiBsZWZ0O1xyXG5cdG1hcmdpbi1yaWdodDogMXJlbTtcclxufVxyXG5cclxuLmMtY2FydC0tcHJvZHVjdF9faW1nIHtcclxuXHRib3JkZXItcmFkaXVzOiA2cHg7XHJcblx0cG9zaXRpb246IHJlbGF0aXZlO1xyXG5cdG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbi5jLWNhcnQtLXByb2R1Y3RfX3F1YW50aXR5IHtcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZW4oJGdyZXksIDEwJSk7XHJcblx0Y29sb3I6IHdoaXRlO1xyXG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuXHRyaWdodDogLTEwcHg7XHJcblx0dG9wOiAtMTBweDtcclxuXHRmb250LXNpemU6IDAuNzVyZW07XHJcblx0cGFkZGluZzogMC4zMTI1cmVtIDAuNTYyNXJlbTtcclxuXHRib3JkZXItcmFkaXVzOiA1MCU7IFxyXG59XHJcblxyXG4uYy1jYXJ0LS1wcm9kdWN0X19kZXRhaWxzIHtcclxuXHRAaW5jbHVkZSBjZjtcclxuXHJcblx0Zm9udC13ZWlnaHQ6IGJvbGQ7XHJcblx0Zm9udC1zaXplOiAwLjg3NXJlbTtcclxuXHRkaXNwbGF5OiBmbGV4O1xyXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG5cdGZsZXg6IDE7XHJcblxyXG5cdD4gZGl2IHtcclxuXHRcdGZsZXg6IDI7XHJcblxyXG5cdFx0Ji5jLWNhcnQtLXByb2R1Y3RfX3ByaWNlIHtcclxuXHRcdFx0ZmxleDogMTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi5jLWNhcnQtLXByb2R1Y3RfX2Rlc2Mge1xyXG5cdGNvbG9yOiBkYXJrZW4oJGdyZXksIDIwJSk7XHJcblx0Zm9udC1zaXplOiAwLjc1cmVtO1xyXG5cdGZvbnQtd2VpZ2h0OiBub3JtYWw7XHJcbn1cclxuXHJcbi5jLWNhcnQtLXByb2R1Y3RfX3ByaWNlIHtcclxuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XHJcblx0XHJcblx0c3RyaWtlIHtcclxuXHRcdGRpc3BsYXk6IGJsb2NrO1xyXG5cdFx0Y29sb3I6IGRhcmtlbigkZ3JleSwgMjAlKTtcclxuXHRcdGZvbnQtc2l6ZTogMC43NXJlbTtcclxuXHR9XHJcbn1cclxuXHJcbi5jLWNhcnQtLW5vdGljZSB7XHJcblx0QGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuXHRcdHBhZGRpbmc6IDAuNjI1cmVtO1xyXG5cdFx0Zm9udC1zaXplOiAwLjg3NXJlbTtcclxuXHR9XHJcblxyXG5cdGJvcmRlci1yYWRpdXM6IDZweDtcclxuXHRiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuXHRwYWRkaW5nOiAxcmVtO1xyXG5cdGZvbnQtc2l6ZTogMC43NXJlbTtcclxuXHJcblx0dWwge1xyXG5cdFx0bWFyZ2luLWxlZnQ6IDEuMjVyZW07XHJcblxyXG5cdFx0PiBsaSB7XHJcblx0XHRcdG1hcmdpbi1ib3R0b206IDAuNjI1cmVtO1xyXG5cdFx0fVxyXG5cdH1cclxufSIsIi8vID09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gQ29tcG9uZW50IC0gRm9vdGVyIFxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09XHJcbmZvb3RlciB7XHJcblx0QGluY2x1ZGUgdHlwaSgnZm9vdGVyLW1hcCcpO1xyXG5cclxuXHR1bCB7XHJcblx0XHRsaXN0LXN0eWxlOiBub25lO1xyXG5cdFx0cGFkZGluZy1sZWZ0OiAwO1xyXG5cclxuXHRcdGxpIHtcclxuXHRcdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG5cclxuXHRcdFx0Jjpub3QoOmZpcnN0LWNoaWxkKSB7XHJcblx0XHRcdFx0QGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuXHRcdFx0XHRcdG1hcmdpbi1sZWZ0OiAycmVtO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bWFyZ2luLWxlZnQ6IDFyZW07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbi5jLWZvcm0tLXJldHVybiB7XHJcblx0ZGlzcGxheTogYmxvY2s7XHJcblx0Zm9udC1zaXplOiAwLjg3NXJlbTtcclxuXHRmbG9hdDogbGVmdDtcclxufVxyXG5cclxuLmMtZm9ybS0tbmV4dCB7XHJcblx0QGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcclxuXHRcdGZsb2F0OiByaWdodDtcclxuXHR9XHJcblxyXG5cdGZsb2F0OiBub25lO1xyXG59Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUNJQSw0RUFBNEU7QUFFNUU7Z0ZBQ2dGO0FBRWhGOzs7O0dBSUc7QUFFSCxBQUFBLElBQUksQ0FBQztFQUNILFdBQVcsRUFBRSxJQUFJO0VBQ2pCLE9BQU87RUFDUCxvQkFBb0IsRUFBRSxJQUFJO0VBQzFCLE9BQU87RUFDUCx3QkFBd0IsRUFBRSxJQUFJO0VBQzlCLE9BQU8sRUFDUjs7QUFFRDtnRkFDZ0Y7QUFFaEY7O0dBRUc7QUFFSCxBQUFBLElBQUksQ0FBQztFQUNILE1BQU0sRUFBRSxDQUFDLEdBQ1Y7O0FBRUQ7O0dBRUc7QUFFSCxBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDO0VBQzNDLE9BQU8sRUFBRSxLQUFLLEdBQ2Y7O0FBRUQ7OztHQUdHO0FBRUgsQUFBQSxFQUFFLENBQUM7RUFDRCxTQUFTLEVBQUUsR0FBRztFQUNkLE1BQU0sRUFBRSxRQUFRLEdBQ2pCOztBQUVEO2dGQUNnRjtBQUVoRjs7O0dBR0c7QUFFSCxBQUFBLFVBQVUs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 */
