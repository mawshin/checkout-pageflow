/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/**
 * Add the correct display in IE 9-.
 */
article, aside, footer, header, nav, section {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption, figure, main {
  /* 1 */
  display: block; }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b, strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b, strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code, kbd, samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio, video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button, input, optgroup, select, textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button, input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button, select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button, html [type="button"], [type="reset"], [type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner, [type="button"]::-moz-focus-inner, [type="reset"]::-moz-focus-inner, [type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring, [type="button"]:-moz-focusring, [type="reset"]:-moz-focusring, [type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"], [type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button, [type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details, menu {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block; }

/**
 * Add the correct display in IE.
 */
template, [hidden] {
  display: none; }

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
html {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }
  html html {
    font-size: 100%;
    line-height: 1.4; }

* {
  -webkit-box-sizing: inherit;
          box-sizing: inherit; }
  *:before {
    -webkit-box-sizing: inherit;
            box-sizing: inherit; }
  *:after {
    -webkit-box-sizing: inherit;
            box-sizing: inherit; }

body {
  font-weight: 400;
  font-size: 16px;
  position: relative;
  color: #2a2d35;
  margin-top: 1rem;
  font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif; }
  @media all and (min-width: 48em) {
    body {
      margin-top: 2rem; } }

h1 {
  font-size: 2rem;
  line-height: 1.2;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h1 {
      font-size: 2.125rem;
      line-height: 1.2; } }

h2 {
  font-size: 1.725rem;
  line-height: 1.2;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h2 {
      font-size: 2rem;
      line-height: 1.2; } }

h3 {
  font-size: 1.25rem;
  line-height: 1.2;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h3 {
      font-size: 1.5rem;
      line-height: 1.2; } }

h4 {
  font-size: 1.25rem;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h4 {
      font-size: 1.5rem; } }

h5 {
  font-size: 1rem;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h5 {
      font-size: 1.25rem; } }

h6 {
  font-size: 1rem;
  margin-bottom: 1rem; }
  @media all and (min-width: 768px) {
    h6 {
      font-size: 1.125rem; } }

small {
  font-size: 0.75rem; }

p {
  margin-bottom: 0.5rem;
  margin-top: 0; }

a {
  font-weight: bold;
  outline: 0; }
  a:focus {
    outline: 0; }

strong {
  font-weight: bold; }

ul, ol {
  padding-left: 20px; }

hr {
  border: 0;
  height: 1px;
  background: #f1f2f3; }

.img-responsive {
  display: inline-block;
  max-width: 100%;
  height: auto; }

.o-container {
  padding-left: 0.9375rem;
  padding-right: 0.9375rem;
  margin-right: auto;
  margin-left: auto; }
  .o-container:before {
    content: "";
    display: table; }
  .o-container:after {
    content: "";
    display: table;
    clear: both; }
  @media all and (min-width: 48em) {
    .o-container {
      width: 750px; } }
  @media all and (min-width: 62em) {
    .o-container {
      width: 970px; } }
  @media all and (min-width: 75em) {
    .o-container {
      width: 1170px; } }
  @media all and (min-width: 90em) {
    .o-container {
      width: 1380px; } }

.o-container--fluid {
  padding-right: 0.9375rem;
  padding-left: 0.9375rem; }
  .o-container--fluid:before {
    content: "";
    display: table; }
  .o-container--fluid:after {
    content: "";
    display: table;
    clear: both; }

.o-row:before {
  content: "";
  display: table; }

.o-row:after {
  content: "";
  display: table;
  clear: both; }

@media all and (min-width: 48em) {
  .o-row {
    margin-left: -0.9375rem;
    margin-right: -0.9375rem; } }

.o-row [class^="o-col"] {
  margin-bottom: 0.9375rem; }

.o-col--1 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--1 {
      width: 7.32601%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--1:last-child {
      width: 7.32601%;
      float: right;
      margin-right: 0; } }

.o-col--2 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--2 {
      width: 15.75092%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--2:last-child {
      width: 15.75092%;
      float: right;
      margin-right: 0; } }

.o-col--3 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--3 {
      width: 24.17582%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--3:last-child {
      width: 24.17582%;
      float: right;
      margin-right: 0; } }
  @media all and (min-width: 48em) {
    .o-col--3:nth-child(4n) {
      width: 24.17582%;
      float: right;
      margin-right: 0; } }

.o-col--4 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--4 {
      width: 32.60073%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--4:last-child {
      width: 32.60073%;
      float: right;
      margin-right: 0; } }

.o-col--5 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--5 {
      width: 41.02564%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--5:last-child {
      width: 41.02564%;
      float: right;
      margin-right: 0; } }

.o-col--6 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--6 {
      width: 49.45055%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--6:last-child {
      width: 49.45055%;
      float: right;
      margin-right: 0; } }

.o-col--7 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--7 {
      width: 57.87546%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--7:last-child {
      width: 57.87546%;
      float: right;
      margin-right: 0; } }

.o-col--8 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--8 {
      width: 66.30037%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--8:last-child {
      width: 66.30037%;
      float: right;
      margin-right: 0; } }

.o-col--9 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--9 {
      width: 74.72527%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--9:last-child {
      width: 74.72527%;
      float: right;
      margin-right: 0; } }

.o-col--10 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--10 {
      width: 83.15018%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--10:last-child {
      width: 83.15018%;
      float: right;
      margin-right: 0; } }

.o-col--11 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }
  @media all and (min-width: 48em) {
    .o-col--11 {
      width: 91.57509%;
      float: left;
      margin-right: 1.0989%; } }
  @media all and (min-width: 48em) {
    .o-col--11:last-child {
      width: 91.57509%;
      float: right;
      margin-right: 0; } }

.o-col--1__sm {
  width: 7.32601%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--1__sm:last-child {
    width: 7.32601%;
    float: right;
    margin-right: 0; }

.o-col--2__sm {
  width: 15.75092%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--2__sm:last-child {
    width: 15.75092%;
    float: right;
    margin-right: 0; }

.o-col--3__sm {
  width: 24.17582%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--3__sm:last-child {
    width: 24.17582%;
    float: right;
    margin-right: 0; }

.o-col--4__sm {
  width: 32.60073%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--4__sm:last-child {
    width: 32.60073%;
    float: right;
    margin-right: 0; }

.o-col--5__sm {
  width: 41.02564%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--5__sm:last-child {
    width: 41.02564%;
    float: right;
    margin-right: 0; }

.o-col--6__sm {
  width: 49.45055%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--6__sm:last-child {
    width: 49.45055%;
    float: right;
    margin-right: 0; }

.o-col--7__sm {
  width: 57.87546%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--7__sm:last-child {
    width: 57.87546%;
    float: right;
    margin-right: 0; }

.o-col--8__sm {
  width: 66.30037%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--8__sm:last-child {
    width: 66.30037%;
    float: right;
    margin-right: 0; }

.o-col--9__sm {
  width: 74.72527%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--9__sm:last-child {
    width: 74.72527%;
    float: right;
    margin-right: 0; }

.o-col--10__sm {
  width: 83.15018%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--10__sm:last-child {
    width: 83.15018%;
    float: right;
    margin-right: 0; }

.o-col--11__sm {
  width: 91.57509%;
  float: left;
  margin-right: 1.0989%; }
  .o-col--11__sm:last-child {
    width: 91.57509%;
    float: right;
    margin-right: 0; }

.o-col--12 {
  width: 100%;
  float: left;
  margin-left: 0;
  margin-right: 0; }

.o-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap; }

.u-clearfix:before {
  content: "";
  display: table; }

.u-clearfix:after {
  content: "";
  display: table;
  clear: both; }

.u-text--left {
  text-align: left; }

.u-text--right {
  text-align: right; }

.u-float--left {
  float: left; }

.u-float--right {
  float: right; }

.u-text--white {
  color: white; }

header:before {
  content: "";
  display: table; }

header:after {
  content: "";
  display: table;
  clear: both; }

.c-logo {
  max-width: 165px; }

.c-logo--img {
  background: url("//via.placeholder.com/165x40?text=Logo+BOOSTED") 0 0 no-repeat;
  text-indent: -9999px;
  background-size: 100%;
  height: 0;
  padding-bottom: 24.24242%;
  display: block; }

.c-breadcrumb--list {
  list-style: none;
  padding-left: 0; }
  .c-breadcrumb--list:before {
    content: "";
    display: table; }
  .c-breadcrumb--list:after {
    content: "";
    display: table;
    clear: both; }
  .c-breadcrumb--list li {
    font-size: 0.625rem;
    float: left; }
    @media all and (min-width: 768px) {
      .c-breadcrumb--list li {
        font-size: 0.6875rem; } }
    .c-breadcrumb--list li:before {
      content: ">";
      margin: 0 0.625rem; }
    .c-breadcrumb--list li:first-child:before {
      content: "";
      margin: 0; }

.c-products {
  border-top: 1px solid #dedede;
  padding-top: 1rem; }
  .c-products [class^="o-col--"] {
    margin-bottom: 0.625rem; }

.c-products--card {
  background-color: white;
  height: 100%; }

.c-products--thumb {
  margin: 0 auto;
  position: relative;
  text-align: center;
  width: 70%;
  padding-top: 0.625rem; }
  .c-products--thumb > img {
    -o-object-fit: cover;
       object-fit: cover;
    max-height: 200px;
    min-height: 100px; }

.c-products--details {
  padding: 0.625rem; }

.c-products--details__title {
  color: #929292;
  font-size: 1.125rem;
  font-weight: bold;
  margin-bottom: 0.3125rem; }

.c-products--details__desc {
  color: #b8b8b8;
  margin-bottom: 0.3125rem; }

.c-products--details__price {
  font-weight: bold;
  font-size: 1.125rem; }

.pagination {
  list-style: none;
  padding-left: 0;
  float: right; }
  .pagination li {
    display: inline-block;
    margin-left: 0.625rem;
    background-color: white;
    padding: 0.625rem; }
    .pagination li:first-child {
      margin-left: 0; }
    .pagination li.active {
      color: #dedede; }
    .pagination li a {
      cursor: pointer; }
  .pagination .previous {
    background-color: transparent; }
    .pagination .previous.disabled {
      color: #dedede; }
  .pagination .next {
    background-color: transparent; }
    .pagination .next.disabled {
      color: #dedede; }
  .pagination .break-me {
    color: #2a2d35;
    text-decoration: none; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCJfbm9ybWFsaXplLnNjc3MiLCJfc2V0dGluZ3Muc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3MvX3N1c3kuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9fc3VzeS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L19zdS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L3N1L191dGlsaXRpZXMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9zdS9fc2V0dGluZ3Muc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9zdS9fdmFsaWRhdGlvbi5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L3N1L19ncmlkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L19mbG9hdC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9fc2hhcmVkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L19zdXBwb3J0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3N1cHBvcnQvX3N1cHBvcnQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fcHJlZml4LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3N1cHBvcnQvX2JhY2tncm91bmQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fYm94LXNpemluZy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9zdXBwb3J0L19yZW0uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc3VwcG9ydC9fY2xlYXJmaXguc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc2hhcmVkL19pbnNwZWN0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fb3V0cHV0LnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fZGlyZWN0aW9uLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L3NoYXJlZC9fYmFja2dyb3VuZC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9zaGFyZWQvX2NvbnRhaW5lci5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9zaGFyZWQvX21hcmdpbnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvc2hhcmVkL19wYWRkaW5nLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvb3V0cHV0L2Zsb2F0L19jb250YWluZXIuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvZmxvYXQvX3NwYW4uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9vdXRwdXQvZmxvYXQvX2VuZC5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L291dHB1dC9mbG9hdC9faXNvbGF0ZS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX3NldHRpbmdzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fdmFsaWRhdGlvbi5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2dyaWRzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fYm94LXNpemluZy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2NvbnRleHQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19iYWNrZ3JvdW5kLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fY29udGFpbmVyLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fc3Bhbi5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2d1dHRlcnMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19pc29sYXRlLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fZ2FsbGVyeS5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX3Jvd3Muc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9zdXN5L3Nhc3Mvc3VzeS9sYW5ndWFnZS9zdXN5L19tYXJnaW5zLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fcGFkZGluZy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3N1c3kvc2Fzcy9zdXN5L2xhbmd1YWdlL3N1c3kvX2JsZWVkLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3kvbGFuZ3VhZ2Uvc3VzeS9fYnJlYWtwb2ludC1wbHVnaW4uc2NzcyIsImxpYi9fbWFwcHktYnJlYWtwb2ludHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvX3R5cGkuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvX3ByaXZhdGUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9iYXNlbGluZS9fYmFzZWxpbmUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9icmVha3BvaW50cy9fYnJlYWtwb2ludHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9icmVha3BvaW50cy9fdXRpbHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9jYWxjL19jYWxjLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHlwaS9zY3NzL3ByaXZhdGUvY2FsYy9fY2FsYy1mb250LXNpemUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS9jYWxjL19jYWxjLW1zLXNpemUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS90eXBlZmFjZXMvX3R5cGVmYWNlcy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wcml2YXRlL3R5cGVmYWNlcy9fbXVsdGlwbGllci5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wcml2YXRlL3V0aWxzL191dGlscy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wcml2YXRlL3V0aWxzL19jb252ZXJ0ZXJzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHlwaS9zY3NzL3ByaXZhdGUvdXRpbHMvX2Jhc2VzLnNjc3MiLCIuLi8uLi9ub2RlX21vZHVsZXMvdHlwaS9zY3NzL3ByaXZhdGUvdXRpbHMvX21hcHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS91dGlscy9fbGlzdHMuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS91dGlscy9fZXh0ZW5kZXIuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHJpdmF0ZS93cml0ZS9fd3JpdGUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvX3B1YmxpYy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wdWJsaWMvcmh5dGhtL19yaHl0aG0uc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHVibGljL3JoeXRobS9fYmFzZWxpbmUuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHVibGljL3R5cGkvX3R5cGkuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHVibGljL3R5cGkvX2luaXQuc2NzcyIsIi4uLy4uL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvcHVibGljL3R5cGkvX2NyZWF0ZS1jbGFzcy5zY3NzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3R5cGkvc2Nzcy9wdWJsaWMvdHlwZWZhY2VzL190eXBlZmFjZXMuc2NzcyIsIl90b29scy5zY3NzIiwiX2Jhc2Uuc2NzcyIsIl9vYmplY3RzLnNjc3MiLCJfdXRpbGl0aWVzLnNjc3MiLCJfY29tcG9uZW50cy5oZWFkZXIuc2NzcyIsIl9jb21wb25lbnRzLnByb2R1Y3RzLnNjc3MiLCJfY29tcG9uZW50cy5wYWdpbmF0aW9uLnNjc3MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRGFzaGJvYXJkIHN0eWxlcyBnbyBoZXJlXG5AaW1wb3J0IFwibm9ybWFsaXplXCI7XG5AaW1wb3J0IFwic2V0dGluZ3NcIjtcbkBpbXBvcnQgXCJ0b29sc1wiO1xuQGltcG9ydCBcImJhc2VcIjtcbkBpbXBvcnQgXCJvYmplY3RzXCI7XG5AaW1wb3J0IFwidXRpbGl0aWVzXCI7XG5cbkBpbXBvcnQgXCJjb21wb25lbnRzLmhlYWRlclwiO1xuQGltcG9ydCBcImNvbXBvbmVudHMucHJvZHVjdHNcIjtcbkBpbXBvcnQgXCJjb21wb25lbnRzLnBhZ2luYXRpb25cIjtcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PVxuLy8gbm9ybWFsaXplLmNzcyB2Ny4wLjBcbi8vIFxuLy8gPT09PT09PT09PT09PT09PT09PT09XG4vKiEgbm9ybWFsaXplLmNzcyB2Ny4wLjAgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXG5cbi8qIERvY3VtZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW5cbiAqICAgIElFIG9uIFdpbmRvd3MgUGhvbmUgYW5kIGluIGlPUy5cbiAqL1xuXG5odG1sIHtcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gIC8qIDEgKi9cbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC8qIDIgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG59XG5cbi8qIFNlY3Rpb25zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICovXG5cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gKi9cblxuYXJ0aWNsZSwgYXNpZGUsIGZvb3RlciwgaGVhZGVyLCBuYXYsIHNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gKiBgYXJ0aWNsZWAgY29udGV4dHMgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgU2FmYXJpLlxuICovXG5cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7XG59XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cbiAqL1xuXG5maWdjYXB0aW9uLCBmaWd1cmUsIG1haW4ge1xuICAvKiAxICovXG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBtYXJnaW4gaW4gSUUgOC5cbiAqL1xuXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4O1xufVxuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIGFuZCBJRS5cbiAqL1xuXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAxICovXG4gIGhlaWdodDogMDtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxucHJlIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovXG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIDEuIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqIDIuIFJlbW92ZSBnYXBzIGluIGxpbmtzIHVuZGVybGluZSBpbiBpT1MgOCsgYW5kIFNhZmFyaSA4Ky5cbiAqL1xuXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcDogb2JqZWN0cztcbiAgLyogMiAqL1xufVxuXG4vKipcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctIGFuZCBGaXJlZm94IDM5LS5cbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gKi9cblxuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiBub25lO1xuICAvKiAxICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAvKiAyICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAqIFByZXZlbnQgdGhlIGR1cGxpY2F0ZSBhcHBsaWNhdGlvbiBvZiBgYm9sZGVyYCBieSB0aGUgbmV4dCBydWxlIGluIFNhZmFyaSA2LlxuICovXG5cbmIsIHN0cm9uZyB7XG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gKi9cblxuYiwgc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmNvZGUsIGtiZCwgc2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgLyogMSAqL1xuICBmb250LXNpemU6IDFlbTtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHN0eWxlIGluIEFuZHJvaWQgNC4zLS5cbiAqL1xuXG5kZm4ge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGJhY2tncm91bmQgYW5kIGNvbG9yIGluIElFIDktLlxuICovXG5cbm1hcmsge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwO1xuICBjb2xvcjogIzAwMDtcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICogYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1Yiwgc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtO1xufVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTtcbn1cblxuLyogRW1iZWRkZWQgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAqL1xuXG5hdWRpbywgdmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gaU9TIDQtNy5cbiAqL1xuXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC0uXG4gKi9cblxuaW1nIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xufVxuXG4vKipcbiAqIEhpZGUgdGhlIG92ZXJmbG93IGluIElFLlxuICovXG5cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAqIDIuIFJlbW92ZSB0aGUgbWFyZ2luIGluIEZpcmVmb3ggYW5kIFNhZmFyaS5cbiAqL1xuXG5idXR0b24sIGlucHV0LCBvcHRncm91cCwgc2VsZWN0LCB0ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgLyogMSAqL1xuICBsaW5lLWhlaWdodDogMS4xNTtcbiAgLyogMSAqL1xuICBtYXJnaW46IDA7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gKi9cblxuYnV0dG9uLCBpbnB1dCB7XG4gIC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7XG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXG4gKi9cblxuYnV0dG9uLCBzZWxlY3Qge1xuICAvKiAxICovXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vKipcbiAqIDEuIFByZXZlbnQgYSBXZWJLaXQgYnVnIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYCBhbmQgYHZpZGVvYFxuICogICAgY29udHJvbHMgaW4gQW5kcm9pZCA0LlxuICogMi4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqL1xuXG5idXR0b24sIGh0bWwgW3R5cGU9XCJidXR0b25cIl0sIFt0eXBlPVwicmVzZXRcIl0sIFt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxuICovXG5cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lciwgW3R5cGU9XCJidXR0b25cIl06Oi1tb3otZm9jdXMtaW5uZXIsIFt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsIFt0eXBlPVwic3VibWl0XCJdOjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xuICBwYWRkaW5nOiAwO1xufVxuXG4vKipcbiAqIFJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cbiAqL1xuXG5idXR0b246LW1vei1mb2N1c3JpbmcsIFt0eXBlPVwiYnV0dG9uXCJdOi1tb3otZm9jdXNyaW5nLCBbdHlwZT1cInJlc2V0XCJdOi1tb3otZm9jdXNyaW5nLCBbdHlwZT1cInN1Ym1pdFwiXTotbW96LWZvY3VzcmluZyB7XG4gIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBwYWRkaW5nIGluIEZpcmVmb3guXG4gKi9cblxuZmllbGRzZXQge1xuICBwYWRkaW5nOiAwLjM1ZW0gMC43NWVtIDAuNjI1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cbiAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cbiAqIDMuIFJlbW92ZSB0aGUgcGFkZGluZyBzbyBkZXZlbG9wZXJzIGFyZSBub3QgY2F1Z2h0IG91dCB3aGVuIHRoZXkgemVybyBvdXRcbiAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmxlZ2VuZCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgY29sb3I6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgZGlzcGxheTogdGFibGU7XG4gIC8qIDEgKi9cbiAgbWF4LXdpZHRoOiAxMDAlO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDMgKi9cbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbiAgLyogMSAqL1xufVxuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICogMi4gQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5wcm9ncmVzcyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgLyogMSAqL1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFLlxuICovXG5cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAtLlxuICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLS5cbiAqL1xuXG5bdHlwZT1cImNoZWNrYm94XCJdLCBbdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovXG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxuICovXG5cblt0eXBlPVwibnVtYmVyXCJdIHtcbiAgJjo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbiwgJjo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICB9XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiAqL1xuXG5bdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xuICAvKiAyICovXG4gICY6Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sICY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxuICovXG5cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovXG59XG5cbi8qIEludGVyYWN0aXZlXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSwgYW5kIEZpcmVmb3guXG4gKi9cblxuZGV0YWlscywgbWVudSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1bW1hcnkge1xuICBkaXNwbGF5OiBsaXN0LWl0ZW07XG59XG5cbi8qIFNjcmlwdGluZ1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAqL1xuXG5jYW52YXMge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXG4gKi9cblxudGVtcGxhdGUsIFtoaWRkZW5dIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogSGlkZGVuXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLS5cbiAqLyIsIi8vID09PT09PT09PT1cbi8vIFNldHRpbmdzXG4vLyA9PT09PT09PT09XG5cbi8vIEdyaWRzXG5AaW1wb3J0IFwiLi9ub2RlX21vZHVsZXMvc3VzeS9zYXNzL3N1c3lcIjtcbiRzdXN5OiAoXG4gIGdsb2JhbC1ib3gtc2l6aW5nOiBib3JkZXItYm94LFxuKTtcblxuJGdyaWQtMTI6IChcbiAgZ3V0dGVyczogMC4xNSxcbiAgY29sdW1uczogMTJcbik7XG5cbi8vIFZhbHVlc1xuJG5hdi1oZWlnaHQ6IDYzcHg7XG4kZnVsbC1oZWlnaHQ6IDEwMHZoO1xuXG4vLyBDb2xvdXJzXG4kbGlnaHQtZ3JleTogI2YxZjJmMztcbiRncmV5OiAjZGVkZWRlO1xuJGRhcmstZ3JleTogIzJhMmQzNTtcblxuJGJsYWNrLWFscGhhMTogcmdiYShibGFjaywgMC4xKTtcbiRibGFjay1hbHBoYTM6IHJnYmEoYmxhY2ssIDAuMyk7XG4kYmxhY2stYWxwaGE1OiByZ2JhKGJsYWNrLCAwLjUpO1xuJHdoaXRlLWFscGhhNDogcmdiYSh3aGl0ZSwgMC40KTtcbiR3aGl0ZS1hbHBoYTk6IHJnYmEod2hpdGUsIDAuOSk7XG5cbi8vIEZvbnRzXG4kc2Fucy1zZXJpZjogXCJDZW50dXJ5IEdvdGhpY1wiLCBDZW50dXJ5R290aGljLCBBcHBsZUdvdGhpYywgc2Fucy1zZXJpZjtcbiRzZXJpZjogQmFza2VydmlsbGUsIFwiQmFza2VydmlsbGUgT2xkIEZhY2VcIiwgXCJIb2VmbGVyIFRleHRcIiwgR2FyYW1vbmQsIFwiVGltZXMgTmV3IFJvbWFuXCIsIHNlcmlmO1xuXG4vLyBaLWluZGV4XG4kbGF5ZXJzOiAoXG4gIGdlbmVyaWMsXG4gIGNvbnRhaW5lcixcbiAgY2FudmFzLFxuICBoZWFkZXIsXG4gIGZvb3RlcixcbiAgbmF2LXRvb2dsZSxcbiAgbmF2LWxpc3RzLFxuKTtcblxuLy8gQnJlYWtwb2ludHNcbkBpbXBvcnQgJ2xpYi9tYXBweS1icmVha3BvaW50cyc7XG4kYnJlYWtwb2ludHM6IChcbiAgeHhzOiAgICAgICAgICAgIDM2MHB4LFxuICB4c21hbGw6ICAgICAgICAgNDgwcHgsXG4gIHNtYWxsOiAgICAgICAgICA1OTBweCxcbiAgbWVkaXVtOiAgICAgICAgIDY0MHB4LFxuICBsYXJnZTogICAgICAgICAgNzY4cHgsXG4gIHhsYXJnZTogICAgICAgICA5OTJweCxcbiAgeHhsOiAgICAgICAgICAgIDEyMDBweCxcbiAgeHh4bDogICAgICAgICAgIDE0NDBweCxcbiAgbWF4OiAgICAgICAgICAgIDE2MDBweCxcbiAgaXBhZExhbmRzY2FwZTogIDEwMjRweCxcbiAgaXBhZFBvcnRyYWl0OiAgIDc2OHB4LFxuKTtcblxuLy8gU2V0IG1hcHMgZm9yIHR5cG9ncmFwaHkgcmVzcG9uc2l2ZSBzaXppbmdcbkBpbXBvcnQgXCIuL25vZGVfbW9kdWxlcy90eXBpL3Njc3MvdHlwaVwiO1xuJHR5cGk6IChcbiAgYmFzZTogKFxuICAgIG51bGw6ICgxNnB4LCAxLjQpXG4gICksXG4gIGgxLW1hcDogKFxuICAgIG51bGw6ICgyZW0sIDEuMiksXG4gICAgbGFyZ2U6ICgyLjEyNWVtLCAxLjIpXG4gICksXG4gIGgyLW1hcDogKFxuICAgIG51bGw6ICgxLjcyNWVtLCAxLjIpLFxuICAgIGxhcmdlOiAoMmVtLCAxLjIpXG4gICksXG4gIGgzLW1hcDogKFxuICAgIG51bGw6ICgxLjI1ZW0sIDEuMiksXG4gICAgbGFyZ2U6ICgxLjVlbSwgMS4yKVxuICApLFxuICBoNC1tYXA6IChcbiAgICBudWxsOiAxLjI1ZW0sXG4gICAgbGFyZ2U6IDEuNWVtXG4gICksXG4gIGg1LW1hcDogKFxuICAgIG51bGw6IDFlbSxcbiAgICBsYXJnZTogMS4yNWVtXG4gICksXG4gIGg2LW1hcDogKFxuICAgIG51bGw6IDFlbSxcbiAgICBsYXJnZTogMS4xMjVlbVxuICApLFxuICBicmVhZGNydW1iLW1hcDogKFxuICAgIG51bGw6IDAuNjI1ZW0sXG4gICAgbGFyZ2U6IDAuNjg3NWVtXG4gICksXG4gIHBhcmFncmFwaC1tYXA6IChcbiAgICBudWxsOiAxZW0sXG4gICAgbGFyZ2U6IDEuMzc1ZW1cbiAgKSxcbiAgc21hbGwtbWFwOiAoXG4gICAgbnVsbDogMC43NWVtXG4gICksXG4gIHN1cC1tYXA6IChcbiAgICBudWxsOiAwLjg3NWVtXG4gIClcbik7XG5cbi8vIE1pc2MgdmFyaWFibGVzXG4kYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcbiRjb3JuZXItcmFkaXVzOiAycmVtO1xuJGNvcm5lci1yYWRpdXMtc21hbGw6IDFyZW07IiwiLy8gU3VzeVxuLy8gPT09PVxuXG5AaW1wb3J0ICdzdXN5L2xhbmd1YWdlL3N1c3knO1xuIiwiLy8gU3VzeSBOZXh0IFN5bnRheFxuLy8gPT09PT09PT09PT09PT09PVxuXG4kc3VzeS12ZXJzaW9uOiAyLjE7XG5cbkBpbXBvcnQgXCIuLi9zdVwiO1xuQGltcG9ydCBcIi4uL291dHB1dC9mbG9hdFwiO1xuXG5AaW1wb3J0IFwic3VzeS9zZXR0aW5nc1wiO1xuQGltcG9ydCBcInN1c3kvdmFsaWRhdGlvblwiO1xuQGltcG9ydCBcInN1c3kvZ3JpZHNcIjtcbkBpbXBvcnQgXCJzdXN5L2JveC1zaXppbmdcIjtcbkBpbXBvcnQgXCJzdXN5L2NvbnRleHRcIjtcbkBpbXBvcnQgXCJzdXN5L2JhY2tncm91bmRcIjtcbkBpbXBvcnQgXCJzdXN5L2NvbnRhaW5lclwiO1xuQGltcG9ydCBcInN1c3kvc3BhblwiO1xuQGltcG9ydCBcInN1c3kvZ3V0dGVyc1wiO1xuQGltcG9ydCBcInN1c3kvaXNvbGF0ZVwiO1xuQGltcG9ydCBcInN1c3kvZ2FsbGVyeVwiO1xuQGltcG9ydCBcInN1c3kvcm93c1wiO1xuQGltcG9ydCBcInN1c3kvbWFyZ2luc1wiO1xuQGltcG9ydCBcInN1c3kvcGFkZGluZ1wiO1xuQGltcG9ydCBcInN1c3kvYmxlZWRcIjtcbkBpbXBvcnQgXCJzdXN5L2JyZWFrcG9pbnQtcGx1Z2luXCI7XG4iLCIvLyBTdVxuLy8gPT1cblxuQGltcG9ydCBcInN1L3V0aWxpdGllc1wiO1xuQGltcG9ydCBcInN1L3NldHRpbmdzXCI7XG5AaW1wb3J0IFwic3UvdmFsaWRhdGlvblwiO1xuQGltcG9ydCBcInN1L2dyaWRcIjtcbiIsIi8vIE1hcCBGdW5jdGlvbnNcbi8vID09PT09PT09PT09PT1cblxuXG4vLyBUcnVuY2F0ZSBMaXN0XG4vLyAtLS0tLS0tLS0tLS0tXG4vLyAtIFJldHVybiBhIGxpc3QsIHRydW5jYXRlZCB0byBhIGdpdmVuIGxlbmd0aFxuQGZ1bmN0aW9uIF9zdXN5LXRydW5jYXRlLWxpc3QoXG4gICRsaXN0LFxuICAkbGVuZ3RoXG4pIHtcbiAgJF9yZXR1cm46ICgpO1xuXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRsaXN0KSB7XG4gICAgJF9yZXR1cm46IGlmKCRpIDw9ICRsZW5ndGgsIGFwcGVuZCgkX3JldHVybiwgbnRoKCRsaXN0LCAkaSkpLCAkX3JldHVybik7XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuXG5cbi8vIERlZXAgR2V0XG4vLyAtLS0tLS0tLVxuLy8gLSBSZXR1cm4gYSB2YWx1ZSBkZWVwIGluIG5lc3RlZCBtYXBzXG5AZnVuY3Rpb24gX3N1c3ktZGVlcC1nZXQoXG4gICRtYXAsXG4gICRrZXlzLi4uXG4pIHtcbiAgJF9yZXR1cm46ICRtYXA7XG5cbiAgQGVhY2ggJGtleSBpbiAka2V5cyB7XG4gICAgQGlmIHR5cGUtb2YoJF9yZXR1cm4pID09IG1hcCB7XG4gICAgICAkX3JldHVybjogbWFwLWdldCgkX3JldHVybiwgJGtleSk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkX3JldHVybjtcbn1cblxuXG4vLyBEZWVwIFNldFxuLy8gLS0tLS0tLS1cbi8vIC0gU2V0IGEgdmFsdWUgZGVlcCBpbiBuZXN0ZWQgbWFwc1xuQGZ1bmN0aW9uIF9zdXN5LWRlZXAtc2V0KFxuICAkbWFwLFxuICAka2V5cy12YWx1ZS4uLlxuKSB7XG4gICRfdmFsdWU6IG50aCgka2V5cy12YWx1ZSwgLTEpO1xuICAkX2tleXM6IF9zdXN5LXRydW5jYXRlLWxpc3QoJGtleXMtdmFsdWUsIGxlbmd0aCgka2V5cy12YWx1ZSkgLSAxKTtcbiAgJF9sZW5ndGg6IGxlbmd0aCgkX2tleXMpO1xuICAkX3JldHVybjogKCk7XG5cbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkX2xlbmd0aCB7XG4gICAgJF9uOiAwIC0gJGk7XG4gICAgJF9sZXZlbDogX3N1c3ktdHJ1bmNhdGUtbGlzdCgkX2tleXMsICRfbGVuZ3RoICsgJF9uKTtcbiAgICAkX2xldmVsOiBfc3VzeS1kZWVwLWdldCgkbWFwLCAkX2xldmVsLi4uKTtcbiAgICAkX21lcmdlOiBudGgoJF9rZXlzLCAkX24pO1xuICAgICRfbWVyZ2U6ICgkX21lcmdlOiAkX3ZhbHVlKTtcbiAgICAkX3JldHVybjogaWYoJF9sZXZlbCwgbWFwLW1lcmdlKCRfbGV2ZWwsICRfbWVyZ2UpLCAkX21lcmdlKTtcbiAgICAkX3ZhbHVlOiAkX3JldHVybjtcbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cblxuLy8gRGVlcCBNZXJnZVxuLy8gLS0tLS0tLS0tLVxuLy8gUmV0dXJuIDIgb2JqZWN0cyBvZiBhbnkgZGVwdGgsIG1lcmdlZFxuQGZ1bmN0aW9uIF9zdXN5LWRlZXAtbWVyZ2UoXG4gICRtYXAxLFxuICAkbWFwMlxuKSB7XG5cbiAgQGlmIHR5cGUtb2YoJG1hcDEpICE9IG1hcCBvciB0eXBlLW9mKCRtYXAyKSAhPSBtYXAge1xuICAgICRtYXAxOiAkbWFwMjtcbiAgfSBAZWxzZSB7XG4gICAgQGVhY2ggJGtleSwgJHZhbHVlIGluICRtYXAyIHtcbiAgICAgICRfbmV3OiAoJGtleTogX3N1c3lfZGVlcC1tZXJnZShtYXAtZ2V0KCRtYXAxLCAka2V5KSwgJHZhbHVlKSk7XG4gICAgICAkbWFwMTogbWFwLW1lcmdlKCRtYXAxLCAkX25ldyk7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkbWFwMTtcbn1cblxuXG4vLyBEZWVwIEhhcy1LZXlcbi8vIC0tLS0tLS0tLS0tLVxuLy8gLSBSZXR1cm4gdHJ1ZSBpZiBhIGRlZXAga2V5IGV4aXN0c1xuQGZ1bmN0aW9uIF9zdXN5LWRlZXAtaGFzLWtleShcbiAgJG1hcCxcbiAgJGtleXMuLi5cbikge1xuICAkX3JldHVybjogbnVsbDtcbiAgJF9zdG9wOiBmYWxzZTtcblxuICBAZWFjaCAka2V5IGluICRrZXlzIHtcbiAgICBAaWYgbm90KCRfc3RvcCkge1xuICAgICAgJF9yZXR1cm46IG1hcC1oYXMta2V5KCRtYXAsICRrZXkpO1xuICAgIH1cblxuICAgIEBpZiAkX3JldHVybiB7XG4gICAgICAkbWFwOiBtYXAtZ2V0KCRtYXAsICRrZXkpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJF9zdG9wOiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG4iLCIvLyBTZXR0aW5nc1xuLy8gPT09PT09PT1cblxuLy8gVmVyc2lvblxuLy8gLS0tLS0tLVxuJHN1LXZlcnNpb246IDEuMTtcblxuXG4vLyBEZWZhdWx0IFNldHRpbmdzXG4vLyAtLS0tLS0tLS0tLS0tLS0tXG4vLyBQUklWQVRFOiBUaGUgYmFzaWMgc2V0dGluZ3NcbiRzdXN5LWRlZmF1bHRzOiAoXG4gIGNvbHVtbnM6IDQsXG4gIGd1dHRlcnM6IC4yNSxcbik7XG5cblxuLy8gVXNlciBTZXR0aW5nc1xuLy8gLS0tLS0tLS0tLS0tLVxuLy8gLSBEZWZpbmUgdGhlICRzdXN5IHZhcmlhYmxlIHdpdGggYSBtYXAgb2YgeW91ciBvd24gc2V0dGluZ3MuXG4vLyAtIFNldCBFSVRIRVIgJGNvbHVtbi13aWR0aCBPUiAkY29udGFpbmVyXG4vLyAtIFVzZSAkY29sdW1uLXdpZHRoIGZvciBzdGF0aWMgbGF5b3V0c1xuJHN1c3k6ICgpICFkZWZhdWx0O1xuXG5cbi8vIFN1c3kgRGVmYXVsdHNcbi8vIC0tLS0tLS0tLS0tLS1cbi8vIFBSSVZBVEU6IEFkZCBkZWZhdWx0cyB0byBTdXN5XG5AbWl4aW4gc3VzeS1kZWZhdWx0cyhcbiAgJGRlZmF1bHRzXG4pIHtcbiAgJHN1c3ktZGVmYXVsdHM6IG1hcC1tZXJnZSgkc3VzeS1kZWZhdWx0cywgJGRlZmF1bHRzKSAhZ2xvYmFsO1xufVxuXG5cbi8vIFN1c3kgU2V0XG4vLyAtLS0tLS0tLVxuLy8gQ2hhbmdlIG9uZSBzZXR0aW5nXG4vLyAtICRrZXkgICA6IHNldHRpbmcgbmFtZVxuLy8gLSAkdmFsdWUgOiBzZXR0aW5nIHZhbHVlXG5AbWl4aW4gc3VzeS1zZXQoXG4gICRrZXktdmFsdWUuLi5cbikge1xuICAkc3VzeTogX3N1c3ktZGVlcC1zZXQoJHN1c3ksICRrZXktdmFsdWUuLi4pICFnbG9iYWw7XG59XG5cblxuLy8gU3VzeSBHZXRcbi8vIC0tLS0tLS0tXG4vLyBSZXR1cm4gb25lIHNldHRpbmcgZnJvbSBhIGdyaWRcbi8vIC0gJGtleSAgICAgOiA8a2V5d29yZD5cbi8vIC0gJGxheW91dCAgOiA8c2V0dGluZ3M+XG5AZnVuY3Rpb24gc3VzeS1nZXQoXG4gICRrZXksXG4gICRsYXlvdXQ6IG1hcC1tZXJnZSgkc3VzeS1kZWZhdWx0cywgJHN1c3kpXG4pIHtcbiAgJGxheW91dDogcGFyc2UtZ3JpZCgkbGF5b3V0KTtcbiAgJF9vcHRpb25zOiAkbGF5b3V0ICRzdXN5ICRzdXN5LWRlZmF1bHRzO1xuICAkX2JyZWFrOiBmYWxzZTtcbiAgJF9yZXR1cm46IG51bGw7XG5cbiAgQGVhY2ggJG9wdCBpbiAkX29wdGlvbnMge1xuICAgIEBpZiB0eXBlLW9mKCRvcHQpID09IG1hcCBhbmQgbm90KCRfYnJlYWspIHtcbiAgICAgICRfa2V5c2V0OiBfc3VzeS1kZWVwLWhhcy1rZXkoJG9wdCwgJGtleS4uLik7XG4gICAgICBAaWYgJF9rZXlzZXQge1xuICAgICAgICAkX3JldHVybjogX3N1c3ktZGVlcC1nZXQoJG9wdCwgJGtleS4uLik7XG4gICAgICAgICRfYnJlYWs6IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkX3JldHVybjtcbn1cbiIsIi8vIE1hdGggVmFsaWRhdGlvblxuLy8gPT09PT09PT09PT09PT09XG5cblxuLy8gVmFsaWQgQ29sdW1uc1xuLy8gLS0tLS0tLS0tLS0tLVxuLy8gQ2hlY2sgdGhhdCBhIGNvbHVtbiBzZXR0aW5nIGlzIHZhbGlkLlxuQGZ1bmN0aW9uIHZhbGlkLWNvbHVtbnMoXG4gICRjb2x1bW5zLFxuICAkc2lsZW50OiBmYWxzZVxuKSB7XG4gICR0eXBlOiB0eXBlLW9mKCRjb2x1bW5zKTtcbiAgJHJldHVybjogbnVsbDtcblxuICBAaWYgJHR5cGUgPT0gbnVtYmVyIGFuZCB1bml0bGVzcygkY29sdW1ucykge1xuICAgICRyZXR1cm46ICRjb2x1bW5zO1xuICB9IEBlbHNlIGlmICR0eXBlID09IGxpc3Qge1xuICAgICRmYWlsOiBudWxsO1xuICAgIEBlYWNoICRjb2wgaW4gJGNvbHVtbnMge1xuICAgICAgQGlmIHR5cGUtb2YoJGNvbCkgPT0gbnVtYmVyIHtcbiAgICAgICAgJGZhaWw6ICRmYWlsIG9yIGlmKHVuaXRsZXNzKCRjb2wpLCBudWxsLCB0cnVlKTtcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICAkZmFpbDogdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgJHJldHVybjogaWYoJGZhaWwsICRyZXR1cm4sICRjb2x1bW5zKTtcbiAgfVxuXG4gIEBpZiAkcmV0dXJuICE9ICRjb2x1bW5zIGFuZCBub3QoJHNpbGVudCkge1xuICAgICRyZXR1cm46IG51bGw7XG4gICAgJHdhcm46ICckY29sdW1ucyBtdXN0IGJlIGEgdW5pdGxlc3MgbnVtYmVyIG9yIGxpc3Qgb2YgdW5pdGxlc3MgbnVtYmVycy4nO1xuICAgIEB3YXJuICR3YXJuICsgJyBDdXJyZW50IHZhbHVlIFsjeyR0eXBlfV06ICN7JGNvbHVtbnN9JztcbiAgfVxuXG4gIEByZXR1cm4gJHJldHVybjtcbn1cblxuXG4vLyBWYWxpZCBHdXR0ZXJzXG4vLyAtLS0tLS0tLS0tLS0tXG4vLyBDaGVjayB0aGF0IGEgZ3V0dGVyIHNldHRpbmcgaXMgdmFsaWQuXG5AZnVuY3Rpb24gdmFsaWQtZ3V0dGVycyhcbiAgJGd1dHRlcnMsXG4gICRzaWxlbnQ6IGZhbHNlXG4pIHtcbiAgJHR5cGU6IHR5cGUtb2YoJGd1dHRlcnMpO1xuICAkcmV0dXJuOiBudWxsO1xuXG4gIEBpZiAkdHlwZSA9PSBudW1iZXIgYW5kIHVuaXRsZXNzKCRndXR0ZXJzKSB7XG4gICAgJHJldHVybjogJGd1dHRlcnM7XG4gIH0gQGVsc2UgaWYgbm90KCRzaWxlbnQpIHtcbiAgICAkd2FybjogJyRndXR0ZXJzIG11c3QgYmUgYSB1bml0bGVzcyBudW1iZXIuJztcbiAgICBAd2FybiAkd2FybiArICcgQ3VycmVudCB2YWx1ZSBbI3skdHlwZX1dOiAjeyRndXR0ZXJzfSc7XG4gIH1cblxuICBAcmV0dXJuICRyZXR1cm47XG59XG4iLCIvLyBDb2x1bW4gbWF0aFxuLy8gPT09PT09PT09PT1cblxuXG4vLyBJcyBTeW1tZXRyaWNhbFxuLy8gLS0tLS0tLS0tLS0tLS1cbi8vIFJldHVybnMgdHJ1ZSBpZiBhIGdyaWQgaXMgc3ltbWV0cmljYWwuXG4vLyAtIFskY29sdW1uc10gICA6IDxudW1iZXI+IHwgPGxpc3Q+XG5AZnVuY3Rpb24gaXMtc3ltbWV0cmljYWwoXG4gICRjb2x1bW5zOiBzdXN5LWdldChjb2x1bW5zKVxuKSB7XG4gICRjb2x1bW5zOiB2YWxpZC1jb2x1bW5zKCRjb2x1bW5zKTtcbiAgQHJldHVybiBpZih0eXBlLW9mKCRjb2x1bW5zKSA9PSBudW1iZXIsICRjb2x1bW5zLCBudWxsKTtcbn1cblxuXG4vLyBTdXN5IENvdW50XG4vLyAtLS0tLS0tLS0tXG4vLyBGaW5kIHRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiBhIGdpdmVuIGxheW91dFxuLy8gLSBbJGNvbHVtbnNdICAgOiA8bnVtYmVyPiB8IDxsaXN0PlxuQGZ1bmN0aW9uIHN1c3ktY291bnQoXG4gICRjb2x1bW5zOiBzdXN5LWdldChjb2x1bW5zKVxuKSB7XG4gICRjb2x1bW5zOiB2YWxpZC1jb2x1bW5zKCRjb2x1bW5zKTtcbiAgQHJldHVybiBpcy1zeW1tZXRyaWNhbCgkY29sdW1ucykgb3IgbGVuZ3RoKCRjb2x1bW5zKTtcbn1cblxuXG4vLyBTdXN5IFN1bVxuLy8gLS0tLS0tLS1cbi8vIEZpbmQgdGhlIHRvdGFsIHN1bSBvZiBjb2x1bW4tdW5pdHMgaW4gYSBsYXlvdXRcbi8vIC0gWyRjb2x1bW5zXSAgIDogPG51bWJlcj4gfCA8bGlzdD5cbi8vIC0gWyRndXR0ZXJzXSAgIDogPHJhdGlvPlxuLy8gLSBbJHNwcmVhZF0gICAgOiBmYWxzZS9uYXJyb3cgfCB3aWRlIHwgd2lkZXJcbkBmdW5jdGlvbiBzdXN5LXN1bShcbiAgJGNvbHVtbnMgIDogc3VzeS1nZXQoY29sdW1ucyksXG4gICRndXR0ZXJzICA6IHN1c3ktZ2V0KGd1dHRlcnMpLFxuICAkc3ByZWFkICAgOiBmYWxzZVxuKSB7XG4gICRjb2x1bW5zOiB2YWxpZC1jb2x1bW5zKCRjb2x1bW5zKTtcbiAgJGd1dHRlcnM6IHZhbGlkLWd1dHRlcnMoJGd1dHRlcnMpO1xuXG4gICRzcHJlYWQ6IGlmKCRzcHJlYWQgPT0gd2lkZSwgMCwgaWYoJHNwcmVhZCA9PSB3aWRlciwgMSwgLTEpKTtcbiAgJGd1dHRlci1zdW06IChzdXN5LWNvdW50KCRjb2x1bW5zKSArICRzcHJlYWQpICogJGd1dHRlcnM7XG4gICRjb2x1bW4tc3VtOiBpcy1zeW1tZXRyaWNhbCgkY29sdW1ucyk7XG5cbiAgQGlmIG5vdCgkY29sdW1uLXN1bSkge1xuICAgIEBlYWNoICRjb2x1bW4gaW4gJGNvbHVtbnMge1xuICAgICAgJGNvbHVtbi1zdW06ICgkY29sdW1uLXN1bSBvciAwKSArICRjb2x1bW47XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkY29sdW1uLXN1bSArICRndXR0ZXItc3VtO1xufVxuXG5cbi8vIFN1c3kgU2xpY2Vcbi8vIC0tLS0tLS0tLS1cbi8vIFJldHVybiBhIHN1YnNldCBvZiBjb2x1bW5zIGF0IGEgZ2l2ZW4gbG9jYXRpb24uXG4vLyAtICRzcGFuICAgICAgICA6IDxudW1iZXI+XG4vLyAtICRsb2NhdGlvbiAgICA6IDxudW1iZXI+XG4vLyAtIFskY29sdW1uc10gICA6IDxudW1iZXI+IHwgPGxpc3Q+XG5AZnVuY3Rpb24gc3VzeS1zbGljZShcbiAgJHNwYW4sXG4gICRsb2NhdGlvbixcbiAgJGNvbHVtbnM6IHN1c3ktZ2V0KGNvbHVtbnMpXG4pIHtcbiAgJGNvbHVtbnM6IHZhbGlkLWNvbHVtbnMoJGNvbHVtbnMpO1xuICAkc3ViLWNvbHVtbnM6ICRzcGFuO1xuXG4gIEBpZiBub3QoaXMtc3ltbWV0cmljYWwoJGNvbHVtbnMpKSB7XG4gICAgJGxvY2F0aW9uOiAkbG9jYXRpb24gb3IgMTtcbiAgICAkc3ViLWNvbHVtbnM6ICgpO1xuICAgIEBmb3IgJGkgZnJvbSAkbG9jYXRpb24gdG8gKCRsb2NhdGlvbiArICRzcGFuKSB7XG4gICAgICAkc3ViLWNvbHVtbnM6IGFwcGVuZCgkc3ViLWNvbHVtbnMsIG50aCgkY29sdW1ucywgJGkpKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRzdWItY29sdW1ucztcbn1cblxuXG4vLyBTdXN5XG4vLyAtLS0tXG4vLyBGaW5kIHRoZSBzdW0gb2YgYSBjb2x1bW4tc3Bhbi5cbi8vIC0gJHNwYW4gICAgICAgIDogPG51bWJlcj5cbi8vIC0gJGxvY2F0aW9uICAgIDogPG51bWJlcj5cbi8vIC0gWyRjb2x1bW5zXSAgIDogPG51bWJlcj4gfCA8bGlzdD5cbi8vIC0gWyRndXR0ZXJzXSAgIDogPHJhdGlvPlxuLy8gLSBbJHNwcmVhZF0gICAgOiBmYWxzZS9uYXJyb3cgfCB3aWRlIHwgd2lkZXJcbkBmdW5jdGlvbiBzdXN5KFxuICAkc3BhbixcbiAgJGxvY2F0aW9uICAgICA6IGZhbHNlLFxuICAkY29sdW1ucyAgICAgIDogc3VzeS1nZXQoY29sdW1ucyksXG4gICRndXR0ZXJzICAgICAgOiBzdXN5LWdldChndXR0ZXJzKSxcbiAgJHNwcmVhZCAgICAgICA6IGZhbHNlXG4pIHtcbiAgJGNvbHVtbnM6IHZhbGlkLWNvbHVtbnMoJGNvbHVtbnMpO1xuICAkZ3V0dGVyczogdmFsaWQtZ3V0dGVycygkZ3V0dGVycyk7XG4gICRzcGFuOiBzdXN5LXNsaWNlKCRzcGFuLCAkbG9jYXRpb24sICRjb2x1bW5zKTtcblxuICBAcmV0dXJuIHN1c3ktc3VtKCRzcGFuLCAkZ3V0dGVycywgJHNwcmVhZCk7XG59XG4iLCIvLyBGbG9hdCBBUElcbi8vID09PT09PT09PVxuXG5AaW1wb3J0IFwic2hhcmVkXCI7XG5cbkBpbXBvcnQgXCJmbG9hdC9jb250YWluZXJcIjtcbkBpbXBvcnQgXCJmbG9hdC9zcGFuXCI7XG5AaW1wb3J0IFwiZmxvYXQvZW5kXCI7XG5AaW1wb3J0IFwiZmxvYXQvaXNvbGF0ZVwiO1xuIiwiLy8gU2hhcmVkIEFQSVxuLy8gPT09PT09PT09PVxuXG5AaW1wb3J0IFwic3VwcG9ydFwiO1xuXG5AaW1wb3J0IFwic2hhcmVkL2luc3BlY3RcIjtcbkBpbXBvcnQgXCJzaGFyZWQvb3V0cHV0XCI7XG5AaW1wb3J0IFwic2hhcmVkL2RpcmVjdGlvblwiO1xuQGltcG9ydCBcInNoYXJlZC9iYWNrZ3JvdW5kXCI7XG5AaW1wb3J0IFwic2hhcmVkL2NvbnRhaW5lclwiO1xuQGltcG9ydCBcInNoYXJlZC9tYXJnaW5zXCI7XG5AaW1wb3J0IFwic2hhcmVkL3BhZGRpbmdcIjtcblxuXG5cbiIsIi8vIFN1c3kgQnJvd3NlciBTdXBwb3J0XG4vLyA9PT09PT09PT09PT09PT09PT09PVxuXG5AaW1wb3J0IFwic3VwcG9ydC9zdXBwb3J0XCI7XG5AaW1wb3J0IFwic3VwcG9ydC9wcmVmaXhcIjtcbkBpbXBvcnQgXCJzdXBwb3J0L2JhY2tncm91bmRcIjtcbkBpbXBvcnQgXCJzdXBwb3J0L2JveC1zaXppbmdcIjtcbkBpbXBvcnQgXCJzdXBwb3J0L3JlbVwiO1xuQGltcG9ydCBcInN1cHBvcnQvY2xlYXJmaXhcIjtcbiIsIi8vIEJyb3dzZXIgU3VwcG9ydFxuLy8gPT09PT09PT09PT09PT09XG5cbi8vIFN1c3kgU3VwcG9ydCBEZWZhdWx0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AaW5jbHVkZSBzdXN5LWRlZmF1bHRzKChcbiAgdXNlLWN1c3RvbTogKFxuICAgIGNsZWFyZml4OiBmYWxzZSxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB0cnVlLFxuICAgIGJhY2tncm91bmQtb3B0aW9uczogZmFsc2UsXG4gICAgYnJlYWtwb2ludDogdHJ1ZSxcbiAgICBib3gtc2l6aW5nOiB0cnVlLFxuICAgIHJlbTogdHJ1ZSxcbiAgKSxcbikpO1xuXG5cbi8vIFN1c3kgU3VwcG9ydCBbbWl4aW5dXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU2VuZCBwcm9wZXJ0eS12YWx1ZSBwYWlycyB0byB0aGUgcHJvcGVyIHN1cHBvcnQgbW9kdWxlcy5cbi8vIC0gJHByb3AgIDogPGNzcyBwcm9wZXJ0eT5cbi8vIC0gJHZhbCAgIDogPGNzcyB2YWx1ZT5cbkBtaXhpbiBzdXN5LXN1cHBvcnQoXG4gICRwcm9wLFxuICAkdmFsXG4pIHtcbiAgLy8gQmFja2dyb3VuZCBTdXBwb3J0XG4gIEBpZiAkcHJvcCA9PSBiYWNrZ3JvdW5kLWltYWdlIHtcbiAgICBAaW5jbHVkZSBzdXN5LWJhY2tncm91bmQtaW1hZ2UoJHZhbCk7XG4gIH0gQGVsc2UgaWYgJHByb3AgPT0gYmFja2dyb3VuZC1zaXplIHtcbiAgICBAaW5jbHVkZSBzdXN5LWJhY2tncm91bmQtc2l6ZSgkdmFsKTtcbiAgfSBAZWxzZSBpZiAkcHJvcCA9PSBiYWNrZ3JvdW5kLW9yaWdpbiB7XG4gICAgQGluY2x1ZGUgc3VzeS1iYWNrZ3JvdW5kLW9yaWdpbigkdmFsKTtcbiAgfSBAZWxzZSBpZiAkcHJvcCA9PSBiYWNrZ3JvdW5kLWNsaXAge1xuICAgIEBpbmNsdWRlIHN1c3ktYmFja2dyb3VuZC1jbGlwKCR2YWwpO1xuICB9XG5cbiAgLy8gQm94LVNpemluZyBTdXBwb3J0XG4gIEBlbHNlIGlmICRwcm9wID09IGJveC1zaXppbmcge1xuICAgIEBpbmNsdWRlIHN1c3ktYm94LXNpemluZygkdmFsKTtcbiAgfVxuXG4gIC8vIFJlbSBTdXBwb3J0XG4gIEBlbHNlIHtcbiAgICBAaW5jbHVkZSBzdXN5LXJlbSgkcHJvcCwgJHZhbCk7XG4gIH1cbn1cblxuXG4vLyBTdXN5IFN1cHBvcnQgW2Z1bmN0aW9uXVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENoZWNrIGZvciBzdXBwb3J0IG9mIGEgZmVhdHVyZS5cbi8vIC0gJGZlYXR1cmUgICAgICAgOiA8c3RyaW5nPlxuLy8gICAgICAgICAgICAgICAgICAgIC0gZS5nIFwicmVtXCIgb3IgXCJib3gtc2l6aW5nXCJcbi8vIC0gJHJlcXVpcmVtZW50cyAgOiA8bWFwPlxuLy8gICAgICAgICAgICAgICAgICAgIC0gZS5nICh2YXJpYWJsZTogcmVtLXdpdGgtcHgtZmFsbGJhY2ssIG1peGluOiByZW0pXG4vLyAtICR3YXJuICAgICAgICAgIDogPGJvb2w+XG5AZnVuY3Rpb24gc3VzeS1zdXBwb3J0KFxuICAkZmVhdHVyZSxcbiAgJHJlcXVpcmVtZW50czogKCksXG4gICR3YXJuOiB0cnVlXG4pIHtcbiAgJF9zdXBwb3J0OiBzdXN5LWdldCh1c2UtY3VzdG9tICRmZWF0dXJlKTtcblxuICBAaWYgJF9zdXBwb3J0IHtcbiAgICAkX2ZhaWw6IGZhbHNlO1xuXG4gICAgQGVhY2ggJF90eXBlLCAkX3JlcSBpbiAkcmVxdWlyZW1lbnRzIHtcbiAgICAgIEBlYWNoICRfaSBpbiAkX3JlcSB7XG5cbiAgICAgICAgJF9wYXNzIDogbnVsbDtcblxuICAgICAgICAvLyBzYXNzIDMuNSBvciBncmVhdGVyXG4gICAgICAgIEBpZiBmdW5jdGlvbi1leGlzdHMoJ2dldC1mdW5jdGlvbicpIHtcbiAgICAgICAgICAkX3Bhc3M6IGNhbGwoZ2V0LWZ1bmN0aW9uKHVucXVvdGUoXCIjeyRfdHlwZX0tZXhpc3RzXCIpKSwgJF9pKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzYXNzIDMuNCBvciBsZXNzXG4gICAgICAgIEBlbHNlIHtcbiAgICAgICAgICAkX3Bhc3M6IGNhbGwodW5xdW90ZShcIiN7JF90eXBlfS1leGlzdHNcIiksICRfaSk7XG4gICAgICAgIH1cblxuICAgICAgICBAaWYgbm90KCRfcGFzcykge1xuICAgICAgICAgICRfZmFpbDogdHJ1ZTtcbiAgICAgICAgICBAaWYgJHdhcm4ge1xuICAgICAgICAgICAgQHdhcm4gXCJZb3UgcmVxdWVzdGVkIGN1c3RvbSBzdXBwb3J0IG9mICN7JGZlYXR1cmV9LCBidXQgdGhlICN7JF9pfSAjeyRfdHlwZX0gaXMgbm90IGF2YWlsYWJsZS5cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAkX3N1cHBvcnQ6IGlmKCRfZmFpbCwgZmFsc2UsICRfc3VwcG9ydCk7XG4gIH1cblxuICBAcmV0dXJuICRfc3VwcG9ydDtcbn1cbiIsIi8vIFN1c3kgUHJlZml4XG4vLyA9PT09PT09PT09PVxuXG4vLyBQcmVmaXhcbi8vIC0tLS0tLVxuLy8gT3V0cHV0IHNpbXBsZSBwcmVmaXhlZCBwcm9wZXJ0aWVzLlxuLy8gLSAkcHJvcCAgICAgIDogPGNzcyBwcm9wZXJ0eT5cbi8vIC0gJHZhbCAgICAgICA6IDxjc3MgdmFsdWU+XG4vLyAtIFskcHJlZml4XSAgOiA8YnJvd3NlciBwcmVmaXggbGlzdD5cbkBtaXhpbiBzdXN5LXByZWZpeChcbiAgJHByb3AsXG4gICR2YWwsXG4gICRwcmVmaXg6IG9mZmljaWFsXG4pIHtcbiAgQGVhY2ggJGZpeCBpbiAkcHJlZml4IHtcbiAgICAkZml4OiBpZigkZml4ID09IG9mZmljaWFsIG9yIG5vdCgkZml4KSwgJHByb3AsICctI3skZml4fS0jeyRwcm9wfScpO1xuICAgIEBpbmNsdWRlIHN1c3ktcmVtKCRmaXgsICR2YWwpO1xuICB9XG59XG4iLCIvLyBCYWNrZ3JvdW5kIFByb3BlcnRpZXNcbi8vID09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBTdXN5IEJhY2tncm91bmQgSW1hZ2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIHByb3ZpZGUgYSBzaW1wbGUgZmFsbGJhY2suXG4vLyAtICRpbWFnZTogPGJhY2tncm91bmQtaW1hZ2U+XG5AbWl4aW4gc3VzeS1iYWNrZ3JvdW5kLWltYWdlKFxuICAkaW1hZ2Vcbikge1xuICBAaWYgc3VzeS1zdXBwb3J0KGJhY2tncm91bmQtaW1hZ2UsIChtaXhpbjogYmFja2dyb3VuZC1pbWFnZSksICR3YXJuOiBmYWxzZSkge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmQtaW1hZ2UoJGltYWdlLi4uKTtcbiAgfSBAZWxzZSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogJGltYWdlO1xuICB9XG59XG5cbi8vIFN1c3kgQmFja2dyb3VuZCBTaXplXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENoZWNrIGZvciBhbiBleGlzdGluZyBzdXBwb3J0IG1peGluLCBvciBwcm92aWRlIGEgc2ltcGxlIGZhbGxiYWNrLlxuLy8gLSAkaW1hZ2U6IDxiYWNrZ3JvdW5kLXNpemU+XG5AbWl4aW4gc3VzeS1iYWNrZ3JvdW5kLXNpemUoXG4gICRzaXplXG4pIHtcbiAgQGlmIHN1c3ktc3VwcG9ydChiYWNrZ3JvdW5kLW9wdGlvbnMsIChtaXhpbjogYmFja2dyb3VuZC1zaXplKSkge1xuICAgIEBpbmNsdWRlIGJhY2tncm91bmQtc2l6ZSgkc2l6ZSk7XG4gIH0gQGVsc2Uge1xuICAgIGJhY2tncm91bmQtc2l6ZTogJHNpemU7XG4gIH1cbn1cblxuLy8gU3VzeSBCYWNrZ3JvdW5kIE9yaWdpblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ2hlY2sgZm9yIGFuIGV4aXN0aW5nIHN1cHBvcnQgbWl4aW4sIG9yIHByb3ZpZGUgYSBzaW1wbGUgZmFsbGJhY2suXG4vLyAtICRpbWFnZTogPGJhY2tncm91bmQtb3JpZ2luPlxuQG1peGluIHN1c3ktYmFja2dyb3VuZC1vcmlnaW4oXG4gICRvcmlnaW5cbikge1xuICBAaWYgc3VzeS1zdXBwb3J0KGJhY2tncm91bmQtb3B0aW9ucywgKG1peGluOiBiYWNrZ3JvdW5kLW9yaWdpbikpIHtcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLW9yaWdpbigkb3JpZ2luKTtcbiAgfSBAZWxzZSB7XG4gICAgYmFja2dyb3VuZC1vcmlnaW46ICRvcmlnaW47XG4gIH1cbn1cblxuLy8gU3VzeSBCYWNrZ3JvdW5kIENsaXBcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDaGVjayBmb3IgYW4gZXhpc3Rpbmcgc3VwcG9ydCBtaXhpbiwgb3IgcHJvdmlkZSBhIHNpbXBsZSBmYWxsYmFjay5cbi8vIC0gJGltYWdlOiA8YmFja2dyb3VuZC1jbGlwPlxuQG1peGluIHN1c3ktYmFja2dyb3VuZC1jbGlwKFxuICAkY2xpcFxuKSB7XG4gIEBpZiBzdXN5LXN1cHBvcnQoYmFja2dyb3VuZC1vcHRpb25zLCAobWl4aW46IGJhY2tncm91bmQtY2xpcCkpIHtcbiAgICBAaW5jbHVkZSBiYWNrZ3JvdW5kLWNsaXAoJGNsaXApO1xuICB9IEBlbHNlIHtcbiAgICBiYWNrZ3JvdW5kLWNsaXA6ICRjbGlwO1xuICB9XG59XG4iLCIvLyBCb3ggU2l6aW5nXG4vLyA9PT09PT09PT09XG5cbi8vIEJveCBTaXppbmdcbi8vIC0tLS0tLS0tLS1cbi8vIENoZWNrIGZvciBhbiBleGlzdGluZyBzdXBwb3J0IG1peGluLCBvciBwcm92aWRlIGEgc2ltcGxlIGZhbGxiYWNrLlxuLy8gLSAkbW9kZWw6IDxib3gtc2l6aW5nPlxuQG1peGluIHN1c3ktYm94LXNpemluZyhcbiAgJG1vZGVsOiBjb250ZW50LWJveFxuKSB7XG4gIEBpZiAkbW9kZWwge1xuICAgIEBpZiBzdXN5LXN1cHBvcnQoYm94LXNpemluZywgKG1peGluOiBib3gtc2l6aW5nKSwgJHdhcm46IGZhbHNlKSB7XG4gICAgICBAaW5jbHVkZSBib3gtc2l6aW5nKCRtb2RlbCk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkcHJlZml4OiAobW96LCB3ZWJraXQsIG9mZmljaWFsKTtcbiAgICAgIEBpbmNsdWRlIHN1c3ktcHJlZml4KGJveC1zaXppbmcsICRtb2RlbCwgJHByZWZpeCk7XG4gICAgfVxuICB9XG59XG4iLCIvLyByZW0gU3VwcG9ydFxuLy8gPT09PT09PT09PT1cblxuLy8gcmVtXG4vLyAtLS1cbi8vIENoZWNrIGZvciBhbiBleGlzdGluZyBzdXBwb3J0IG1peGluLCBvciBvdXRwdXQgZGlyZWN0bHkuXG4vLyAtICRwcm9wICA6IDxjc3MgcHJvcGVydHk+XG4vLyAtICR2YWwgICA6IDxjc3MgdmFsdWU+XG5AbWl4aW4gc3VzeS1yZW0oXG4gICRwcm9wLFxuICAkdmFsXG4pIHtcbiAgJF9yZXFzOiAoXG4gICAgdmFyaWFibGU6IHJoeXRobS11bml0IHJlbS13aXRoLXB4LWZhbGxiYWNrLFxuICAgIG1peGluOiByZW0sXG4gICk7XG4gIEBpZiBzdXN5LXN1cHBvcnQocmVtLCAkX3JlcXMsICR3YXJuOiBmYWxzZSkgYW5kICRyaHl0aG0tdW5pdCA9PSByZW0ge1xuICAgIEBpbmNsdWRlIHJlbSgkcHJvcCwgJHZhbCk7XG4gIH0gQGVsc2Uge1xuICAgICN7JHByb3B9OiAkdmFsO1xuICB9XG59XG4iLCIvLyBTdXN5IEZhbGxiYWNrIENsZWFyZml4XG4vLyA9PT09PT09PT09PT09PT09PT09PT09XG5cblxuLy8gQ2xlYXJmaXhcbi8vIC0tLS0tLS0tXG4vLyBDaGVjayBmb3IgYW4gZXhpc3Rpbmcgc3VwcG9ydCBtaXhpbiwgb3IgcHJvdmlkZSBhIHNpbXBsZSBmYWxsYmFjay5cbkBtaXhpbiBzdXN5LWNsZWFyZml4IHtcbiAgQGlmIHN1c3ktc3VwcG9ydChjbGVhcmZpeCwgKG1peGluOiBjbGVhcmZpeCkpIHtcbiAgICBAaW5jbHVkZSBjbGVhcmZpeDtcbiAgfSBAZWxzZSB7XG4gICAgJjphZnRlciB7XG4gICAgICBjb250ZW50OiBcIiBcIjtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgY2xlYXI6IGJvdGg7XG4gICAgfVxuICB9XG59XG4iLCIvLyBEZWJ1Z2dpbmdcbi8vID09PT09PT09PVxuXG4vLyBTdXN5IEluc3BlY3Rcbi8vIC0tLS0tLS0tLS0tLVxuLy8gT3V0cHV0IGFyZ3VtZW50cyBwYXNzZWQgdG8gYSBpbnNwZWN0LlxuLy8gLSAkbWl4aW4gIDogPHN1c3kgbWl4aW4+XG4vLyAtICRpbnNwZWMgICA6IDxtaXhpbiBhcmd1bWVudHM+XG5cbkBtaXhpbiBzdXN5LWluc3BlY3QoXG4gICRtaXhpbixcbiAgJGluc3BlY3Rcbikge1xuICAkc2hvdzogZmFsc2U7XG5cbiAgQGVhY2ggJGl0ZW0gaW4gJGluc3BlY3Qge1xuICAgIEBpZiBpbmRleCgkaXRlbSwgaW5zcGVjdCkge1xuICAgICAgJHNob3c6IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQGlmICRzaG93IG9yIHN1c3ktZ2V0KGRlYnVnIGluc3BlY3QpIHtcbiAgICAtc3VzeS0jeyRtaXhpbn06IGluc3BlY3QoJGluc3BlY3QpO1xuICB9XG59XG4iLCIvLyBPdXRwdXRcbi8vID09PT09PVxuXG4vLyBPdXRwdXRcbi8vIC0tLS0tLVxuLy8gT3V0cHV0IENTUyB3aXRoIHByb3BlciBicm93c2VyIHN1cHBvcnQuXG4vLyAtICRzdHlsZXMgIDogPG1hcCBvZiBjc3MgcHJvcGVydHktdmFsdWUgcGFpcnM+XG5AbWl4aW4gb3V0cHV0KFxuICAkc3R5bGVzXG4pIHtcbiAgQGVhY2ggJHByb3AsICR2YWwgaW4gJHN0eWxlcyB7XG4gICAgQGluY2x1ZGUgc3VzeS1zdXBwb3J0KCRwcm9wLCAkdmFsKTtcbiAgfVxufVxuIiwiLy8gRGlyZWN0aW9uIEhlbHBlcnNcbi8vID09PT09PT09PT09PT09PT09XG5cbi8vIFN1c3kgRmxvdyBEZWZhdWx0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtIFBSSVZBVEVcbkBpbmNsdWRlIHN1c3ktZGVmYXVsdHMoKFxuICBmbG93OiBsdHIsXG4pKTtcblxuLy8gR2V0IERpcmVjdGlvblxuLy8gLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHRoZSAnZnJvbScgb3IgJ3RvJyBkaXJlY3Rpb24gb2YgYSBsdHIgb3IgcnRsIGZsb3cuXG4vLyAtIFskZmxvd10gIDogbHRyIHwgcnRsXG4vLyAtIFska2V5XSAgIDogZnJvbSB8IHRvXG5AZnVuY3Rpb24gZ2V0LWRpcmVjdGlvbihcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpLFxuICAka2V5OiBmcm9tXG4pIHtcbiAgJHJldHVybjogaWYoJGZsb3cgPT0gcnRsLCAoZnJvbTogcmlnaHQsIHRvOiBsZWZ0KSwgKGZyb206IGxlZnQsIHRvOiByaWdodCkpO1xuICBAcmV0dXJuIG1hcC1nZXQoJHJldHVybiwgJGtleSk7XG59XG5cbi8vIFRvXG4vLyAtLVxuLy8gUmV0dXJuIHRoZSAndG8nIGRpcmVjdGlvbiBvZiBhIGZsb3dcbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcbkBmdW5jdGlvbiB0byhcbiAgJGZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXG4pIHtcbiAgQHJldHVybiBnZXQtZGlyZWN0aW9uKCRmbG93LCB0byk7XG59XG5cbi8vIEZyb21cbi8vIC0tLS1cbi8vIFJldHVybiB0aGUgJ2Zyb20nIGRpcmVjdGlvbiBvZiBhIGZsb3dcbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcbkBmdW5jdGlvbiBmcm9tKFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcbikge1xuICBAcmV0dXJuIGdldC1kaXJlY3Rpb24oJGZsb3csIGZyb20pO1xufVxuIiwiLy8gR3JpZCBCYWNrZ3JvdW5kIEFQSVxuLy8gPT09PT09PT09PT09PT09PT09PVxuLy8gLSBTdWItcGl4ZWwgcm91bmRpbmcgY2FuIGxlYWQgdG8gc2V2ZXJhbCBwaXhlbHMgdmFyaWF0aW9uIGJldHdlZW4gYnJvd3NlcnMuXG5cbi8vIEdyaWQgQmFja2dyb3VuZCBPdXRwdXRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gJGltYWdlOiBiYWNrZ3JvdW5kLWltYWdlXG4vLyAtICRzaXplOiBiYWNrZ3JvdW5kLXNpemVcbi8vIC0gJGNsaXA6IGJhY2tncm91bmQtY2xpcFxuLy8gLSBbJGZsb3ddOiBsdHIgfCBydGxcbkBtaXhpbiBiYWNrZ3JvdW5kLWdyaWQtb3V0cHV0IChcbiAgJGltYWdlLFxuICAkc2l6ZTogbnVsbCxcbiAgJGNsaXA6IG51bGwsXG4gICRmbG93OiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBmbG93KVxuKSB7XG4gICRvdXRwdXQ6IChcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAkaW1hZ2UsXG4gICAgYmFja2dyb3VuZC1zaXplOiAkc2l6ZSxcbiAgICBiYWNrZ3JvdW5kLW9yaWdpbjogJGNsaXAsXG4gICAgYmFja2dyb3VuZC1jbGlwOiAkY2xpcCxcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBmcm9tKCRmbG93KSB0b3AsXG4gICk7XG5cbiAgQGluY2x1ZGUgb3V0cHV0KCRvdXRwdXQpO1xufVxuIiwiLy8gU2hhcmVkIENvbnRhaW5lciBBUElcbi8vID09PT09PT09PT09PT09PT09PT09XG5cbi8vIENvbnRhaW5lciBPdXRwdXRcbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gWyR3aWR0aF0gICAgICAgICA6IDxsZW5ndGg+XG4vLyAtIFskanVzdGlmeV0gICAgICAgOiBsZWZ0IHwgY2VudGVyIHwgcmlnaHRcbi8vIC0gWyRtYXRoXSAgICAgICAgICA6IGZsdWlkIHwgc3RhdGljXG5AbWl4aW4gY29udGFpbmVyLW91dHB1dChcbiAgJHdpZHRoLFxuICAkanVzdGlmeTogYXV0byBhdXRvLFxuICAkcHJvcGVydHk6IG1heC13aWR0aFxuKSB7XG4gICRvdXRwdXQ6IChcbiAgICAjeyRwcm9wZXJ0eX06ICR3aWR0aCBvciAxMDAlLFxuICAgIG1hcmdpbi1sZWZ0OiBudGgoJGp1c3RpZnksIDEpLFxuICAgIG1hcmdpbi1yaWdodDogbnRoKCRqdXN0aWZ5LCAyKSxcbiAgKTtcblxuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XG59XG4iLCIvLyBNYXJnaW5zIEFQSVxuLy8gPT09PT09PT09PT1cblxuLy8gTWFyZ2luIE91dHB1dFxuLy8gLS0tLS0tLS0tLS0tLVxuLy8gLSAkYmVmb3JlICA6IDxsZW5ndGg+XG4vLyAtICRhZnRlciAgIDogPGxlbmd0aD5cbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcbkBtaXhpbiBtYXJnaW4tb3V0cHV0KFxuICAkYmVmb3JlLFxuICAkYWZ0ZXIsXG4gICRmbG93OiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBmbG93KVxuKSB7XG4gICR0bzogdG8oJGZsb3cpO1xuICAkZnJvbTogZnJvbSgkZmxvdyk7XG5cbiAgJG91dHB1dDogKFxuICAgIG1hcmdpbi0jeyRmcm9tfTogJGJlZm9yZSxcbiAgICBtYXJnaW4tI3skdG99OiAkYWZ0ZXIsXG4gICk7XG5cbiAgQGluY2x1ZGUgb3V0cHV0KCRvdXRwdXQpO1xufVxuIiwiLy8gUGFkZGluZyBBUElcbi8vID09PT09PT09PT09XG5cbi8vIFBhZGRpbmcgT3V0cHV0XG4vLyAtLS0tLS0tLS0tLS0tLVxuLy8gLSAkYmVmb3JlICA6IDxsZW5ndGg+XG4vLyAtICRhZnRlciAgIDogPGxlbmd0aD5cbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcbkBtaXhpbiBwYWRkaW5nLW91dHB1dChcbiAgJGJlZm9yZSxcbiAgJGFmdGVyLFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcbikge1xuICAkdG86IHRvKCRmbG93KTtcbiAgJGZyb206IGZyb20oJGZsb3cpO1xuXG4gICRvdXRwdXQ6IChcbiAgICBwYWRkaW5nLSN7JGZyb219OiAkYmVmb3JlLFxuICAgIHBhZGRpbmctI3skdG99OiAkYWZ0ZXIsXG4gICk7XG5cbiAgQGluY2x1ZGUgb3V0cHV0KCRvdXRwdXQpO1xufVxuIiwiLy8gRmxvYXQgQ29udGFpbmVyIEFQSVxuLy8gPT09PT09PT09PT09PT09PT09PVxuXG4vLyBGbG9hdCBDb250YWluZXJcbi8vIC0tLS0tLS0tLS0tLS0tLVxuLy8gLSBbJHdpZHRoXSAgICAgICAgIDogPGxlbmd0aD5cbi8vIC0gWyRqdXN0aWZ5XSAgICAgICA6IGxlZnQgfCBjZW50ZXIgfCByaWdodFxuLy8gLSBbJG1hdGhdICAgOiBmbHVpZCB8IHN0YXRpY1xuQG1peGluIGZsb2F0LWNvbnRhaW5lcihcbiAgJHdpZHRoLFxuICAkanVzdGlmeTogYXV0byBhdXRvLFxuICAkcHJvcGVydHk6IG1heC13aWR0aFxuKSB7XG4gIEBpbmNsdWRlIHN1c3ktY2xlYXJmaXg7XG4gIEBpbmNsdWRlIGNvbnRhaW5lci1vdXRwdXQoJHdpZHRoLCAkanVzdGlmeSwgJHByb3BlcnR5KTtcbn1cbiIsIi8vIEZsb2F0IFNwYW4gQVBJXG4vLyA9PT09PT09PT09PT09PVxuXG4vLyBGbG9hdCBTcGFuIE91dHB1dFxuLy8gLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gJHdpZHRoICAgICAgICAgICAgIDogPGxlbmd0aD5cbi8vIC0gWyRmbG9hdF0gICAgICAgICAgIDogZnJvbSB8IHRvXG4vLyAtIFskbWFyZ2luLWJlZm9yZV0gICA6IDxsZW5ndGg+XG4vLyAtIFskbWFyZ2luLWFmdGVyXSAgICA6IDxsZW5ndGg+XG4vLyAtIFskcGFkZGluZy1iZWZvcmVdICA6IDxsZW5ndGg+XG4vLyAtIFskcGFkZGluZy1hZnRlcl0gICA6IDxsZW5ndGg+XG4vLyAtIFskZmxvd10gICAgICAgICAgICA6IGx0ciB8IHJ0bFxuQG1peGluIGZsb2F0LXNwYW4tb3V0cHV0KFxuICAkd2lkdGgsXG4gICRmbG9hdCAgICAgICAgICAgIDogZnJvbSxcbiAgJG1hcmdpbi1iZWZvcmUgICAgOiBudWxsLFxuICAkbWFyZ2luLWFmdGVyICAgICA6IG51bGwsXG4gICRwYWRkaW5nLWJlZm9yZSAgIDogbnVsbCxcbiAgJHBhZGRpbmctYWZ0ZXIgICAgOiBudWxsLFxuICAkZmxvdyAgICAgICAgICAgICA6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGZsb3cpXG4pIHtcbiAgJHRvICAgICA6IHRvKCRmbG93KTtcbiAgJGZyb20gICA6IGZyb20oJGZsb3cpO1xuXG4gICRvdXRwdXQ6IChcbiAgICB3aWR0aDogJHdpZHRoLFxuICAgIGZsb2F0OiBpZigkZmxvYXQgPT0gdG8sICR0bywgbnVsbCkgb3IgaWYoJGZsb2F0ID09IGZyb20sICRmcm9tLCBudWxsKSxcbiAgICBtYXJnaW4tI3skZnJvbX06ICRtYXJnaW4tYmVmb3JlLFxuICAgIG1hcmdpbi0jeyR0b306ICRtYXJnaW4tYWZ0ZXIsXG4gICAgcGFkZGluZy0jeyRmcm9tfTogJHBhZGRpbmctYmVmb3JlLFxuICAgIHBhZGRpbmctI3skdG99OiAkcGFkZGluZy1hZnRlcixcbiAgKTtcblxuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XG59XG4iLCIvLyBGbG9hdCBFbmRzIEFQSVxuLy8gPT09PT09PT09PT09PT1cblxuLy8gU3VzeSBFbmQgRGVmYXVsdHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtIFBSSVZBVEVcbkBpbmNsdWRlIHN1c3ktZGVmYXVsdHMoKFxuICBsYXN0LWZsb3c6IHRvLFxuKSk7XG5cbi8vIEZsb2F0IExhc3Rcbi8vIC0tLS0tLS0tLS1cbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcbkBtaXhpbiBmbG9hdC1sYXN0KFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdyksXG4gICRsYXN0LWZsb3c6IG1hcC1nZXQoJHN1c3ktZGVmYXVsdHMsIGxhc3QtZmxvdyksXG4gICRtYXJnaW46IDBcbikge1xuICAkdG86IHRvKCRmbG93KTtcblxuICAkb3V0cHV0OiAoXG4gICAgZmxvYXQ6IGlmKCRsYXN0LWZsb3cgPT0gdG8sICR0bywgbnVsbCksXG4gICAgbWFyZ2luLSN7JHRvfTogJG1hcmdpbixcbiAgKTtcblxuICBAaW5jbHVkZSBvdXRwdXQoJG91dHB1dCk7XG59XG5cbi8vIEZsb2F0IEZpcnN0XG4vLyAtLS0tLS0tLS0tLVxuLy8gLSBbJGZsb3ddICA6IGx0ciB8IHJ0bFxuQG1peGluIGZsb2F0LWZpcnN0KFxuICAkZmxvdzogbWFwLWdldCgkc3VzeS1kZWZhdWx0cywgZmxvdylcbikge1xuICAkb3V0cHV0OiAoXG4gICAgbWFyZ2luLSN7ZnJvbSgkZmxvdyl9OiAwLFxuICApO1xuXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcbn1cbiIsIi8vIEZsb2F0IElzb2xhdGlvbiBBUElcbi8vID09PT09PT09PT09PT09PT09PT1cblxuLy8gSXNvbGF0ZSBPdXRwdXRcbi8vIC0tLS0tLS0tLS0tLS0tXG4vLyAtICRwdXNoICAgIDogPGxlbmd0aD5cbi8vIC0gWyRmbG93XSAgOiBsdHIgfCBydGxcbkBtaXhpbiBpc29sYXRlLW91dHB1dChcbiAgJHB1c2gsXG4gICRmbG93OiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBmbG93KVxuKSB7XG4gICR0bzogdG8oJGZsb3cpO1xuICAkZnJvbTogZnJvbSgkZmxvdyk7XG5cbiAgJG91dHB1dDogKFxuICAgIGZsb2F0OiAkZnJvbSxcbiAgICBtYXJnaW4tI3skZnJvbX06ICRwdXNoLFxuICAgIG1hcmdpbi0jeyR0b306IC0xMDAlLFxuICApO1xuXG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcbn1cbiIsIi8vIFN1c3kgU2V0dGluZ3Ncbi8vID09PT09PT09PT09PT1cblxuLy8gU3VzeSBMYW5ndWFnZSBEZWZhdWx0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLSBQUklWQVRFXG5AaW5jbHVkZSBzdXN5LWRlZmF1bHRzKChcbiAgY29udGFpbmVyOiBhdXRvLFxuICBtYXRoOiBmbHVpZCxcbiAgb3V0cHV0OiBmbG9hdCxcbiAgY29udGFpbmVyLXBvc2l0aW9uOiBjZW50ZXIsXG4gIGd1dHRlci1wb3NpdGlvbjogYWZ0ZXIsXG4gIGdsb2JhbC1ib3gtc2l6aW5nOiBjb250ZW50LWJveCxcbiAgZGVidWc6IChcbiAgICBpbWFnZTogaGlkZSxcbiAgICBjb2xvcjogcmdiYSgjNjZmLCAuMjUpLFxuICAgIG91dHB1dDogYmFja2dyb3VuZCxcbiAgICB0b2dnbGU6IHRvcCByaWdodCxcbiAgKSxcbikpO1xuXG5cbi8vIFZhbGlkIEtleXdvcmQgVmFsdWVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLSBQUklWQVRFOiBET05UJ1QgVE9VQ0hcbiRzdXN5LWtleXdvcmRzOiAoXG4gIGNvbnRhaW5lcjogYXV0byxcbiAgbWF0aDogc3RhdGljIGZsdWlkLFxuICBvdXRwdXQ6IGlzb2xhdGUgZmxvYXQsXG4gIGNvbnRhaW5lci1wb3NpdGlvbjogbGVmdCBjZW50ZXIgcmlnaHQsXG4gIGZsb3c6IGx0ciBydGwsXG4gIGd1dHRlci1wb3NpdGlvbjogYmVmb3JlIGFmdGVyIHNwbGl0IGluc2lkZSBpbnNpZGUtc3RhdGljLFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94IGNvbnRlbnQtYm94LFxuICBzcGFuOiBmdWxsLFxuICBlZGdlOiBmaXJzdCBhbHBoYSBsYXN0IG9tZWdhIGZ1bGwsXG4gIHNwcmVhZDogbmFycm93IHdpZGUgd2lkZXIsXG4gIGd1dHRlci1vdmVycmlkZTogbm8tZ3V0dGVycyBuby1ndXR0ZXIsXG4gIHJvbGU6IG5lc3QsXG4gIGNsZWFyOiBicmVhayBub2JyZWFrLFxuICBkZWJ1ZyBpbWFnZTogc2hvdyBoaWRlIHNob3ctY29sdW1ucyBzaG93LWJhc2VsaW5lLFxuICBkZWJ1ZyBvdXRwdXQ6IGJhY2tncm91bmQgb3ZlcmxheSxcbik7XG5cblxuLy8gUGFyc2UgU3VzeSBLZXl3b3JkcyBhbmQgTWFwc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIHBhcnNlLXNldHRpbmdzKFxuICAkc2hvcnQ6ICRzdXN5XG4pIHtcbiAgJF9yZXR1cm46ICgpO1xuXG4gIEBpZiB0eXBlLW9mKCRzaG9ydCkgPT0gbWFwIHtcbiAgICAkX3JldHVybjogJHNob3J0O1xuICB9IEBlbHNlIHtcbiAgICBAZWFjaCAkaXRlbSBpbiAkc2hvcnQge1xuICAgICAgLy8gc3RyaW5nc1xuICAgICAgQGlmIHR5cGUtb2YoJGl0ZW0pID09IHN0cmluZyB7XG4gICAgICAgIEBlYWNoICRrZXksICR2YWx1ZSBpbiAkc3VzeS1rZXl3b3JkcyB7XG4gICAgICAgICAgQGlmIGluZGV4KCR2YWx1ZSwgJGl0ZW0pIHtcbiAgICAgICAgICAgICRfa2V5LXZhbHVlOiBhcHBlbmQoJGtleSwgJGl0ZW0pO1xuICAgICAgICAgICAgJF9yZXR1cm46IF9zdXN5LWRlZXAtc2V0KCRfcmV0dXJuLCAkX2tleS12YWx1ZS4uLik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAvLyBtYXBzXG4gICAgICB9IEBlbHNlIGlmIHR5cGUtb2YoJGl0ZW0pID09IG1hcCB7XG4gICAgICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sICRpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuXG5cbi8vIFBhcnNlIENvbHVtbnMgJiBHdXR0ZXJzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIHBhcnNlLWxheW91dChcbiAgJHNob3J0XG4pIHtcbiAgJF9yZXR1cm46ICgpO1xuICAkX2NvbHVtbnM6ICgpO1xuICAkX2d1dHRlcnM6IG51bGw7XG5cbiAgQGlmIG5vdCh1bml0bGVzcyhudGgobnRoKCRzaG9ydCwgMSksIDEpKSkge1xuICAgICRfZ3V0dGVyczogbnRoKCRzaG9ydCwgMSk7XG4gIH0gQGVsc2Uge1xuICAgICRfY29sdW1uczogKGNvbHVtbnM6IG50aCgkc2hvcnQsIDEpKTtcbiAgICAkX2d1dHRlcnM6IGlmKGxlbmd0aCgkc2hvcnQpID4gMSwgbnRoKCRzaG9ydCwgMiksICRfZ3V0dGVycyk7XG4gIH1cblxuICBAaWYgdHlwZS1vZigkX2d1dHRlcnMpID09IGxpc3QgYW5kIGxlbmd0aCgkX2d1dHRlcnMpID4gMCB7XG4gICAgJF9ndXR0ZXJzOiAoXG4gICAgICBndXR0ZXJzOiBudGgoJF9ndXR0ZXJzLCAyKSAvIG50aCgkX2d1dHRlcnMsIDEpLFxuICAgICAgY29sdW1uLXdpZHRoOiBudGgoJF9ndXR0ZXJzLCAxKSxcbiAgICApO1xuICB9IEBlbHNlIHtcbiAgICAkX2d1dHRlcnM6IGlmKCRfZ3V0dGVycywgKGd1dHRlcnM6ICRfZ3V0dGVycyksICgpKTtcbiAgfVxuXG4gICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sICRfY29sdW1ucyk7XG4gICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sICRfZ3V0dGVycyk7XG5cbiAgQHJldHVybiAkX3JldHVybjtcbn1cblxuXG4vLyBQYXJzZSBHcmlkL0NvbnRleHRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIHBhcnNlLWdyaWQoXG4gICRzaG9ydDogJHN1c3lcbikge1xuICAkX3JldHVybjogcGFyc2Utc2V0dGluZ3MoJHNob3J0KTtcbiAgJF9sYXlvdXQ6ICgpO1xuXG4gIEBpZiB0eXBlLW9mKCRzaG9ydCkgPT0gbWFwIHtcbiAgICAkX3JldHVybjogJHNob3J0O1xuICB9IEBlbHNlIHtcbiAgICBAZWFjaCAkaXRlbSBpbiAkc2hvcnQge1xuICAgICAgLy8gbnVtYmVyIG9yIGxpc3RcbiAgICAgIEBpZiB0eXBlLW9mKCRpdGVtKSA9PSBudW1iZXIgb3IgdHlwZS1vZigkaXRlbSkgPT0gbGlzdCB7XG4gICAgICAgIEBpZiB0eXBlLW9mKCRpdGVtKSA9PSBsaXN0IG9yIHVuaXRsZXNzKCRpdGVtKSB7XG4gICAgICAgICAgJF9sYXlvdXQ6IGFwcGVuZCgkX2xheW91dCwgJGl0ZW0pO1xuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAoY29udGFpbmVyOiAkaXRlbSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgJF9sYXlvdXQ6IGlmKGxlbmd0aCgkX2xheW91dCkgPiAwLCBwYXJzZS1sYXlvdXQoJF9sYXlvdXQpLCAkX2xheW91dCk7XG4gIH1cblxuICBAcmV0dXJuIG1hcC1tZXJnZSgkX3JldHVybiwgJF9sYXlvdXQpO1xufVxuXG5cbi8vIFBhcnNlIFNwYW5cbi8vIC0tLS0tLS0tLS1cbkBmdW5jdGlvbiBwYXJzZS1zcGFuKFxuICAkc2hvcnQsXG4gICRrZXk6IHNwYW5cbikge1xuICAkX3JldHVybjogKCk7XG5cbiAgQGlmIHR5cGUtb2YoJHNob3J0KSA9PSBtYXAge1xuICAgICRfcmV0dXJuOiAkc2hvcnQ7XG4gIH0gQGVsc2Uge1xuICAgICRfYXQ6IGluZGV4KCRzaG9ydCwgYXQpO1xuXG4gICAgQGlmICRfYXQge1xuICAgICAgJF9sb2NpOiAkX2F0ICsgMTtcbiAgICAgICRfbG9jYXRpb246IG50aCgkc2hvcnQsICRfbG9jaSk7XG4gICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAobG9jYXRpb246ICRfbG9jYXRpb24pKTtcbiAgICAgICRzaG9ydDogc2V0LW50aCgkc2hvcnQsICRfYXQsIG51bGwpO1xuICAgICAgJHNob3J0OiBzZXQtbnRoKCRzaG9ydCwgJF9sb2NpLCBudWxsKTtcbiAgICB9XG5cbiAgICAkX2k6IDE7XG4gICAgJF9zcGFuOiAoKTtcblxuICAgIEB3aGlsZSAkX2kgPD0gbGVuZ3RoKCRzaG9ydCkge1xuICAgICAgJF90aGlzOiBudGgoJHNob3J0LCAkX2kpO1xuXG4gICAgICBAaWYgdHlwZS1vZigkX3RoaXMpID09IG51bWJlciB7XG4gICAgICAgICRfc3BhbjogYXBwZW5kKCRfc3BhbiwgJF90aGlzKTtcbiAgICAgICAgJHNob3J0OiBzZXQtbnRoKCRzaG9ydCwgJF9pLCBudWxsKTtcbiAgICAgIH0gQGVsc2UgaWYgJF90aGlzID09IG9mIHtcbiAgICAgICAgJHNob3J0OiBzZXQtbnRoKCRzaG9ydCwgJF9pLCBudWxsKTtcbiAgICAgICAgJF9pOiBsZW5ndGgoJHNob3J0KSArIDE7XG4gICAgICB9XG5cbiAgICAgICRfaTogJF9pICsgMTtcbiAgICB9XG5cbiAgICBAaWYgbGVuZ3RoKCRfc3BhbikgPiAwIHtcbiAgICAgICRfc3BhbjogaWYobGVuZ3RoKCRfc3BhbikgPT0gMSwgbnRoKCRfc3BhbiwgMSksICRfc3Bhbik7XG4gICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAoJGtleTogJF9zcGFuKSk7XG4gICAgfVxuXG4gICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgcGFyc2UtZ3JpZCgkc2hvcnQpKTtcbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cblxuLy8gUGFyc2UgR3V0dGVyc1xuLy8gLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIHBhcnNlLWd1dHRlcnMoXG4gICRzaG9ydDogJHN1c3lcbikge1xuICAkX2d1dHRlcnM6IHBhcnNlLXNwYW4oJHNob3J0LCBndXR0ZXItb3ZlcnJpZGUpO1xuICAkX3NwYW46IHN1c3ktZ2V0KGd1dHRlci1vdmVycmlkZSwgJF9ndXR0ZXJzKTtcblxuICBAaWYgJF9zcGFuIGFuZCBub3QobWFwLWdldCgkX2d1dHRlcnMsIGNvbHVtbnMpKSB7XG4gICAgJF9jb250ZXh0OiAoKTtcbiAgICAkX25ldzogKCk7XG5cbiAgICBAZWFjaCAkaXRlbSBpbiAkX3NwYW4ge1xuICAgICAgQGlmIHR5cGUtb2YoJGl0ZW0pID09IG51bWJlciBhbmQgdW5pdGxlc3MoJGl0ZW0pIHtcbiAgICAgICAgJF9jb250ZXh0OiBhcHBlbmQoJF9jb250ZXh0LCAkaXRlbSk7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgJF9uZXc6IGFwcGVuZCgkX25ldywgJGl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgICRfY29udGV4dDogcGFyc2UtZ3JpZCgkX2NvbnRleHQpO1xuICAgICRfbmV3OiBpZihsZW5ndGgoJF9uZXcpID09IDAsIG51bGwsICRfbmV3KTtcbiAgICAkX25ldzogaWYobGVuZ3RoKCRfbmV3KSA9PSAxLCBudGgoJF9uZXcsIDEpLCAkX25ldyk7XG4gICAgJF9uZXc6IChndXR0ZXItb3ZlcnJpZGU6IGlmKCRfbmV3ICE9ICRfc3BhbiwgJF9uZXcsICRfc3BhbikpO1xuXG4gICAgJF9ndXR0ZXJzOiBtYXAtbWVyZ2UoJF9ndXR0ZXJzLCAkX25ldyk7XG4gICAgJF9ndXR0ZXJzOiBtYXAtbWVyZ2UoJF9ndXR0ZXJzLCAkX2NvbnRleHQpO1xuICB9XG5cbiAgQHJldHVybiAkX2d1dHRlcnM7XG59XG4iLCIvLyBWYWxpZGF0aW9uXG4vLyA9PT09PT09PT09XG5cblxuLy8gVmFsaWRhdGUgQ29sdW1uIE1hdGhcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5AZnVuY3Rpb24gdmFsaWQtY29sdW1uLW1hdGgoXG4gICRtYXRoLFxuICAkY29sdW1uLXdpZHRoXG4pIHtcbiAgQGlmICRtYXRoID09IHN0YXRpYyBhbmQgbm90KCRjb2x1bW4td2lkdGgpIHtcbiAgICBAZXJyb3IgJ1N0YXRpYyBtYXRoIHJlcXVpcmVzIGEgdmFsaWQgY29sdW1uLXdpZHRoIHNldHRpbmcuJztcbiAgfVxuXG4gIEByZXR1cm4gJGNvbHVtbi13aWR0aDtcbn1cbiIsIi8vIEdyaWQgU3ludGF4XG4vLyA9PT09PT09PT09PVxuXG5cbi8vIExheW91dFxuLy8gLS0tLS0tXG4vLyBTZXQgYSBuZXcgbGF5b3V0IHVzaW5nIGEgc2hvcnRoYW5kXG4vLyAtICRsYXlvdXQ6IDxzZXR0aW5ncz5cbi8vIC0gJGNsZWFuOiBib29sZWFuXG5AbWl4aW4gbGF5b3V0KFxuICAkbGF5b3V0LFxuICAkY2xlYW46IGZhbHNlXG4pIHtcbiAgJGluc3BlY3QgIDogJGxheW91dDtcbiAgJHN1c3kgICAgIDogX2dldC1sYXlvdXQoJGxheW91dCwgJGNsZWFuKSAhZ2xvYmFsO1xuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChsYXlvdXQsICRpbnNwZWN0KTtcbn1cblxuXG4vLyBVc2UgR3JpZFxuLy8gLS0tLS0tLS1cbi8vIFVzZSBhbiBhcmJpdHJhcnkgbGF5b3V0IGZvciBhIHNlY3Rpb24gb2YgY29kZVxuLy8gLSAkbGF5b3V0OiA8c2V0dGluZ3M+XG4vLyAtICRjbGVhbjogYm9vbGVhblxuQG1peGluIHdpdGgtbGF5b3V0KFxuICAkbGF5b3V0LFxuICAkY2xlYW46IGZhbHNlXG4pIHtcbiAgJGluc3BlY3QgIDogJGxheW91dDtcbiAgJG9sZCAgICAgIDogJHN1c3k7XG4gICRzdXN5ICAgICA6IF9nZXQtbGF5b3V0KCRsYXlvdXQsICRjbGVhbikgIWdsb2JhbDtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3Qod2l0aC1sYXlvdXQsICRpbnNwZWN0KTtcblxuICBAY29udGVudDtcblxuICAkc3VzeTogJG9sZCAhZ2xvYmFsO1xufVxuXG5cbi8vIExheW91dFxuLy8gLS0tLS0tXG4vLyBSZXR1cm4gYSBwYXJzZWQgbGF5b3V0IG1hcCBiYXNlZCBvbiBzaG9ydGhhbmQgc3ludGF4XG4vLyAtICRsYXlvdXQ6IDxzZXR0aW5ncz5cbkBmdW5jdGlvbiBsYXlvdXQoXG4gICRsYXlvdXQ6ICRzdXN5XG4pIHtcbiAgQHJldHVybiBwYXJzZS1ncmlkKCRsYXlvdXQpO1xufVxuXG5cbi8vIEdldCBMYXlvdXRcbi8vIC0tLS0tLS0tLS1cbi8vIFJldHVybiBhIG5ldyBsYXlvdXQgYmFzZWQgb24gY3VycmVudCBhbmQgZ2l2ZW4gc2V0dGluZ3Ncbi8vIC0gJGxheW91dDogPHNldHRpbmdzPlxuLy8gLSAkY2xlYW46IGJvb2xlYW5cbkBmdW5jdGlvbiBfZ2V0LWxheW91dChcbiAgJGxheW91dCxcbiAgJGNsZWFuOiBmYWxzZVxuKSB7XG4gICRsYXlvdXQ6IGxheW91dCgkbGF5b3V0KTtcbiAgQHJldHVybiBpZigkY2xlYW4sICRsYXlvdXQsIF9zdXN5LWRlZXAtbWVyZ2UoJHN1c3ksICRsYXlvdXQpKTtcbn1cbiIsIi8vIFN1c3kgQm94IFNpemluZ1xuLy8gPT09PT09PT09PT09PT09PT1cblxuLy8gR2xvYmFsIEJveCBTaXppbmdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTZXQgYSBib3ggbW9kZWwgZ2xvYmFsbHkgb24gYWxsIGVsZW1lbnRzLlxuLy8gLSBbJGJveF06IGJvcmRlci1ib3ggfCBjb250ZW50LWJveFxuLy8gLSBbJGluaGVyaXRdOiB0cnVlIHwgZmFsc2VcbkBtaXhpbiBnbG9iYWwtYm94LXNpemluZyhcbiAgJGJveDogc3VzeS1nZXQoZ2xvYmFsLWJveC1zaXppbmcpLFxuICAkaW5oZXJpdDogZmFsc2Vcbikge1xuICAkaW5zcGVjdDogJGJveDtcblxuICBAaWYgJGluaGVyaXQge1xuICAgIEBhdC1yb290IHtcbiAgICAgICBodG1sIHsgQGluY2x1ZGUgb3V0cHV0KChib3gtc2l6aW5nOiAkYm94KSk7IH1cbiAgICAgICAqLCAqOmJlZm9yZSwgKjphZnRlciB7IGJveC1zaXppbmc6IGluaGVyaXQ7IH1cbiAgICAgfVxuICB9IEBlbHNlIHtcbiAgICAqLCAqOmJlZm9yZSwgKjphZnRlciB7IEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogJGJveCkpOyB9XG4gIH1cblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoZ2xvYmFsLWJveC1zaXppbmcsICRpbnNwZWN0KTtcbiAgQGluY2x1ZGUgdXBkYXRlLWJveC1tb2RlbCgkYm94KTtcbn1cblxuLy8gQm9yZGVyIEJveCBTaXppbmdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBIGxlZ2FjeSBzaG9ydGN1dC4uLlxuLy8gLSBbJGluaGVyaXRdOiB0cnVlIHwgZmFsc2VcbkBtaXhpbiBib3JkZXItYm94LXNpemluZyhcbiAgJGluaGVyaXQ6IGZhbHNlXG4pIHtcbiAgQGluY2x1ZGUgZ2xvYmFsLWJveC1zaXppbmcoYm9yZGVyLWJveCwgJGluaGVyaXQpO1xufVxuXG4vLyBVcGRhdGUgQm94IE1vZGVsXG4vLyAtLS0tLS0tLS0tLS0tLS0tXG4vLyBQUklWQVRFOiBVcGRhdGVzIGdsb2JhbCBib3ggbW9kZWwgc2V0dGluZ1xuQG1peGluIHVwZGF0ZS1ib3gtbW9kZWwoXG4gICRib3hcbikge1xuICBAaWYgJGJveCAhPSBzdXN5LWdldChnbG9iYWwtYm94LXNpemluZykge1xuICBAaW5jbHVkZSBzdXN5LXNldChnbG9iYWwtYm94LXNpemluZywgJGJveCk7XG4gIH1cbn1cbiIsIi8vIENvbnRleHQgU3ludGF4XG4vLyA9PT09PT09PT09PT09PVxuXG4vLyBOZXN0ZWQgW2Z1bmN0aW9uXVxuLy8gLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFJldHVybiBhIHN1YnNldCBncmlkIGZvciBuZXN0ZWQgY29udGV4dC5cbi8vIC0gJGNvbnRleHQgICA6IDxzcGFuPlxuQGZ1bmN0aW9uIG5lc3RlZChcbiAgJGNvbnRleHRcbikge1xuICAkY29udGV4dCAgICA6IHBhcnNlLXNwYW4oJGNvbnRleHQpO1xuICAkc3BhbiAgICAgICA6IHN1c3ktZ2V0KHNwYW4sICRjb250ZXh0KTtcbiAgJGxvY2F0aW9uICAgOiBnZXQtbG9jYXRpb24oJGNvbnRleHQpO1xuICAkY29sdW1ucyAgICA6IHN1c3ktZ2V0KGNvbHVtbnMsICRjb250ZXh0KTtcblxuICBAcmV0dXJuIHN1c3ktc2xpY2UoJHNwYW4sICRsb2NhdGlvbiwgJGNvbHVtbnMpO1xufVxuXG4vLyBOZXN0ZWQgW21peGluXVxuLy8gLS0tLS0tLS0tLS0tLS1cbi8vIFVzZSBhIHN1YnNldCBncmlkIGZvciBhIG5lc3RlZCBjb250ZXh0XG4vLyAtICRjb250ZXh0ICAgOiA8c3Bhbj5cbi8vIC0gQGNvbnRlbnQgICA6IDxjb250ZW50PlxuQG1peGluIG5lc3RlZChcbiAgJGNvbnRleHRcbikge1xuICAkaW5zcGVjdCAgOiAkY29udGV4dDtcbiAgJGNvbnRleHQgIDogcGFyc2Utc3BhbigkY29udGV4dCk7XG4gICRvbGQgICAgICA6IHN1c3ktZ2V0KGNvbHVtbnMpO1xuICAkc3VzeSAgICAgOiBtYXAtbWVyZ2UoJHN1c3ksIChjb2x1bW5zOiBuZXN0ZWQoJGNvbnRleHQpKSkgIWdsb2JhbDtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QobmVzdGVkLCAkaW5zcGVjdCk7XG4gIEBjb250ZW50O1xuXG4gICRzdXN5ICAgICA6IG1hcC1tZXJnZSgkc3VzeSwgKGNvbHVtbnM6ICRvbGQpKSAhZ2xvYmFsO1xufVxuIiwiLy8gQmFja2dyb3VuZCBHcmlkIFN5bnRheFxuLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4kc3VzeS1vdmVybGF5LWdyaWQtaGVhZC1leGlzdHM6IGZhbHNlO1xuXG5cbi8vIFNob3cgR3JpZC9zXG4vLyAtLS0tLS0tLS0tLVxuLy8gU2hvdyBncmlkIG9uIGFueSBlbGVtZW50IHVzaW5nIGVpdGhlciBiYWNrZ3JvdW5kIG9yIG92ZXJsYXkuXG4vLyAtIFskZ3JpZF0gIDogPHNldHRpbmdzPlxuQG1peGluIHNob3ctZ3JpZChcbiAgJGdyaWQ6ICRzdXN5XG4pIHtcbiAgJGluc3BlY3Q6ICRncmlkO1xuICAkX291dHB1dDogZGVidWctZ2V0KG91dHB1dCwgJGdyaWQpO1xuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChzaG93LWdyaWQsICRpbnNwZWN0KTtcbiAgQGlmICRfb3V0cHV0ID09IG92ZXJsYXkgYW5kIHN1c3ktZ2V0KGRlYnVnIGltYWdlLCAkZ3JpZCkgIT0gaGlkZSB7XG4gICAgQGluY2x1ZGUgb3ZlcmxheS1ncmlkKCRncmlkKTtcbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgYmFja2dyb3VuZC1ncmlkKCRncmlkKTtcbiAgfVxufVxuXG5AbWl4aW4gc2hvdy1ncmlkcyhcbiAgJGdyaWQ6ICRzdXN5XG4pIHtcbiAgQGluY2x1ZGUgc2hvdy1ncmlkKCRncmlkKTtcbn1cblxuLy8gQmFja2dyb3VuZCBHcmlkXG4vLyAtLS0tLS0tLS0tLS0tLS1cbi8vIFNob3cgYSBncmlkIGJhY2tncm91bmQgb24gYW55IGVsZW1lbnQuXG4vLyAtIFskZ3JpZF0gIDogPHNldHRpbmdzPlxuQG1peGluIGJhY2tncm91bmQtZ3JpZChcbiAgJGdyaWQ6ICRzdXN5XG4pIHtcbiAgJGluc3BlY3QgIDogJGdyaWQ7XG4gICRfb3V0cHV0ICA6IGdldC1iYWNrZ3JvdW5kKCRncmlkKTtcblxuICBAaWYgbGVuZ3RoKCRfb3V0cHV0KSA+IDAge1xuICAgICRfZmxvdzogc3VzeS1nZXQoZmxvdywgJGdyaWQpO1xuXG4gICAgJF9pbWFnZTogKCk7XG4gICAgQGVhY2ggJG5hbWUsICRsYXllciBpbiBtYXAtZ2V0KCRfb3V0cHV0LCBpbWFnZSkge1xuICAgICAgJF9kaXJlY3Rpb246IGlmKCRuYW1lID09IGJhc2VsaW5lLCB0byBib3R0b20sIHRvIHRvKCRfZmxvdykpO1xuICAgICAgJF9pbWFnZTogYXBwZW5kKCRfaW1hZ2UsIGxpbmVhci1ncmFkaWVudCgkX2RpcmVjdGlvbiwgJGxheWVyKSwgY29tbWEpO1xuICAgIH1cbiAgICAkX291dHB1dDogbWFwLW1lcmdlKCRfb3V0cHV0LCAoaW1hZ2U6ICRfaW1hZ2UpKTtcblxuICAgIEBpbmNsdWRlIGJhY2tncm91bmQtZ3JpZC1vdXRwdXQoJF9vdXRwdXQuLi4pO1xuICAgIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChiYWNrZ3JvdW5kLWdyaWQsICRpbnNwZWN0KTtcbiAgfVxufVxuXG5cbi8vIE92ZXJsYXkgR3JpZFxuLy8gLS0tLS0tLS0tLS0tXG4vLyBHZW5lcmF0ZSBhbiBpY29uIHRvIHRyaWdnZXIgZ3JpZC1vdmVybGF5cyBvbiBhbnkgZ2l2ZW4gZWxlbWVudHMuXG4vLyAkZ3JpZHMuLi4gIDogPHNlbGVjdG9yPiBbPHNldHRpbmdzPl0gWywgPHNlbGVjdG9yPl0qXG5AbWl4aW4gb3ZlcmxheS1ncmlkIChcbiAgJGdyaWQ6ICRzdXN5XG4pIHtcbiAgQGlmIG5vdCgkc3VzeS1vdmVybGF5LWdyaWQtaGVhZC1leGlzdHMpIHtcbiAgICBAYXQtcm9vdCBoZWFkIHsgQGluY2x1ZGUgb3ZlcmxheS1oZWFkKCRncmlkKTsgfVxuICAgIEBhdC1yb290IGhlYWQ6YmVmb3JlIHsgQGluY2x1ZGUgb3ZlcmxheS10cmlnZ2VyOyB9XG4gICAgQGF0LXJvb3QgaGVhZDpob3ZlciB7IEBpbmNsdWRlIG92ZXJsYXktdHJpZ2dlci1ob3ZlcjsgfVxuICAgICRzdXN5LW92ZXJsYXktZ3JpZC1oZWFkLWV4aXN0czogdHJ1ZSAhZ2xvYmFsO1xuICB9XG5cbiAgaGVhZDpob3ZlciB+ICYsXG4gIGhlYWQ6aG92ZXIgfiBib2R5ICYge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAmOmJlZm9yZSB7XG4gICAgICBAaW5jbHVkZSBncmlkLW92ZXJsYXktYmFzZTtcbiAgICAgIEBpbmNsdWRlIGJhY2tncm91bmQtZ3JpZCgkZ3JpZCk7XG4gICAgfVxuICB9XG59XG5cblxuLy8gW1ByaXZhdGVdIE92ZXJsYXkgVHJpZ2dlclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuQG1peGluIG92ZXJsYXktdHJpZ2dlciB7XG4gIGNvbnRlbnQ6IFwifHx8XCI7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwYWRkaW5nOiA1cHggMTBweDtcbiAgZm9udDoge1xuICAgIGZhbWlseTogc2Fucy1zZXJpZjtcbiAgICBzaXplOiAxNnB4O1xuICAgIHdlaWdodDogYm9sZDtcbiAgfVxufVxuXG5cbi8vIFtQcml2YXRlXSBPdmVybGF5IFRyaWdnZXIgSG92ZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkBtaXhpbiBvdmVybGF5LXRyaWdnZXItaG92ZXIge1xuICBiYWNrZ3JvdW5kOiByZ2JhKHdoaXRlLCAuNSk7XG4gIGNvbG9yOiByZWQ7XG59XG5cblxuLy8gW1ByaXZhdGVdIE92ZXJsYXkgSGVhZFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gPGhlYWQ+IHN0eWxlcyB0byBjcmVhdGUgZ3JpZCBvdmVybGF5IHRvZ2dsZVxuQG1peGluIG92ZXJsYXktaGVhZCAoXG4gICRncmlkOiAkc3VzeVxuKSB7XG4gICRfdG9nZ2xlOiBkZWJ1Zy1nZXQodG9nZ2xlLCAkZ3JpZCk7XG4gICRfaG9yejogbnVsbDtcbiAgJF92ZXJ0OiBudWxsO1xuXG4gIEBlYWNoICRzaWRlIGluICRfdG9nZ2xlIHtcbiAgICAkX2hvcno6IGlmKCRzaWRlID09IGxlZnQgb3IgJHNpZGUgPT0gcmlnaHQsICRzaWRlLCAkX2hvcnopO1xuICAgICRfdmVydDogaWYoJHNpZGUgPT0gdG9wIG9yICRzaWRlID09IGJvdHRvbSwgJHNpZGUsICRfdmVydCk7XG4gIH1cblxuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IGZpeGVkO1xuICAjeyRfaG9yen06IDEwcHg7XG4gICN7JF92ZXJ0fTogMTBweDtcbiAgei1pbmRleDogOTk5O1xuICBjb2xvcjogIzMzMztcbiAgYmFja2dyb3VuZDogcmdiYSh3aGl0ZSwgLjI1KTtcbn1cblxuXG4vLyBbUHJpdmF0ZV0gR3JpZCBPdmVybGF5IEJhc2Vcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQmFzZSBzdHlsZXMgZm9yIGdlbmVyYXRpbmcgYSBncmlkIG92ZXJsYXlcbkBtaXhpbiBncmlkLW92ZXJsYXktYmFzZSgpIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgcmlnaHQ6IDA7XG4gIGNvbnRlbnQ6IFwiIFwiO1xuICB6LWluZGV4OiA5OTg7XG59XG5cblxuLy8gR2V0IFN5bW1ldHJpY2FsIEJhY2tncm91bmRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtICRncmlkOiA8bWFwPlxuQGZ1bmN0aW9uIGdldC1iYWNrZ3JvdW5kLXN5bShcbiAgJGdyaWRcbikge1xuICAkZ3JpZCAgICAgICAgICAgOiBwYXJzZS1ncmlkKCRncmlkKTtcbiAgJF9ndXR0ZXJzICAgICAgIDogc3VzeS1nZXQoZ3V0dGVycywgJGdyaWQpO1xuICAkX2NvbHVtbi13aWR0aCAgOiBzdXN5LWdldChjb2x1bW4td2lkdGgsICRncmlkKTtcbiAgJF9tYXRoICAgICAgICAgIDogc3VzeS1nZXQobWF0aCwgJGdyaWQpO1xuXG4gICRfY29sb3IgICAgICAgICA6IGRlYnVnLWdldChjb2xvcik7XG4gICRfdHJhbnMgICAgICAgICA6IHRyYW5zcGFyZW50O1xuICAkX2xpZ2h0ICAgICAgICAgOiBsaWdodGVuKCRfY29sb3IsIDE1JSk7XG5cbiAgJF9lbmQgICAgICAgICAgIDogMSArICRfZ3V0dGVycztcbiAgJF9hZnRlciAgICAgICAgIDogcGVyY2VudGFnZSgxLyRfZW5kKTtcbiAgJF9zdG9wcyAgICAgICAgIDogKCk7XG4gICRfc2l6ZSAgICAgICAgICA6IHNwYW4oMSAkZ3JpZCB3aWRlKTtcblxuICBAaWYgaXMtaW5zaWRlKCRncmlkKSB7XG4gICAgJF9zdG9wczogJF9jb2xvciwgJF9saWdodDtcbiAgfSBAZWxzZSBpZiBpcy1zcGxpdCgkZ3JpZCkge1xuICAgICRfc3BsaXQ6ICRfZ3V0dGVycy8yO1xuICAgICRfYmVmb3JlOiBwZXJjZW50YWdlKCRfc3BsaXQvJF9lbmQpO1xuICAgICRfYWZ0ZXI6IHBlcmNlbnRhZ2UoKDEgKyAkX3NwbGl0KS8kX2VuZCk7XG4gICAgJF9zdG9wczogJF90cmFucyAkX2JlZm9yZSwgJF9jb2xvciAkX2JlZm9yZSwgJF9saWdodCAkX2FmdGVyLCAkX3RyYW5zICRfYWZ0ZXI7XG4gIH0gQGVsc2Uge1xuICAgICRfc3RvcHM6ICRfY29sb3IsICRfbGlnaHQgJF9hZnRlciwgJF90cmFucyAkX2FmdGVyO1xuICB9XG5cbiAgQGlmICRfbWF0aCA9PSBzdGF0aWMge1xuICAgICRfc2l6ZTogdmFsaWQtY29sdW1uLW1hdGgoJF9tYXRoLCAkX2NvbHVtbi13aWR0aCkgKiAkX2VuZDtcbiAgfVxuXG4gICRfb3V0cHV0OiAoXG4gICAgaW1hZ2U6IChjb2x1bW5zOiAkX3N0b3BzKSxcbiAgICBzaXplOiAkX3NpemUsXG4gICk7XG5cbiAgQHJldHVybiAkX291dHB1dDtcbn1cblxuXG4vLyBHZXQgQXN5bW1ldHJpY2FsIEluc2lkZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gJGdyaWQ6IDxzZXR0aW5ncz5cbkBmdW5jdGlvbiBnZXQtYXN5bS1pbnNpZGUoXG4gICRncmlkXG4pIHtcbiAgJGdyaWQgICAgIDogcGFyc2UtZ3JpZCgkZ3JpZCk7XG4gICRfY29sdW1ucyA6IHN1c3ktZ2V0KGNvbHVtbnMsICRncmlkKTtcblxuICAkX2NvbG9yICAgOiBkZWJ1Zy1nZXQoY29sb3IpO1xuICAkX2xpZ2h0ICAgOiBsaWdodGVuKCRfY29sb3IsIDE1JSk7XG4gICRfc3RvcHMgICA6ICgpO1xuXG4gIEBmb3IgJGxvY2F0aW9uIGZyb20gMSB0aHJvdWdoIHN1c3ktY291bnQoJF9jb2x1bW5zKSB7XG4gICAgJHRoaXMtc3RvcDogKCk7XG5cbiAgICBAaWYgJGxvY2F0aW9uID09IDEge1xuICAgICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsICRfY29sb3IsIGNvbW1hKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRzdGFydDogcGFyc2Utc3BhbigxIGF0ICRsb2NhdGlvbiAkZ3JpZCk7XG4gICAgICAkc3RhcnQ6IGdldC1pc29sYXRpb24oJHN0YXJ0KTtcbiAgICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2NvbG9yICRzdGFydCwgY29tbWEpO1xuICAgIH1cblxuICAgIEBpZiAkbG9jYXRpb24gPT0gc3VzeS1jb3VudCgkX2NvbHVtbnMpIHtcbiAgICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2xpZ2h0LCBjb21tYSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkX2VuZDogcGFyc2Utc3BhbigxIGF0ICgkbG9jYXRpb24gKyAxKSAkZ3JpZCk7XG4gICAgICAkX2VuZDogZ2V0LWlzb2xhdGlvbigkX2VuZCk7XG4gICAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9saWdodCAkX2VuZCwgY29tbWEpO1xuICAgIH1cblxuICAgICRfc3RvcHM6IGpvaW4oJF9zdG9wcywgJHRoaXMtc3RvcCwgY29tbWEpO1xuICB9XG5cbiAgQHJldHVybiAkX3N0b3BzO1xufVxuXG5cbi8vIEdldCBBc3ltbWV0cmljYWwgU3BsaXRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gJGdyaWQ6IDxzZXR0aW5ncz5cbkBmdW5jdGlvbiBnZXQtYXN5bS1zcGxpdChcbiAgJGdyaWRcbikge1xuICAkZ3JpZCAgICAgOiBwYXJzZS1ncmlkKCRncmlkKTtcbiAgJF9jb2x1bW5zIDogc3VzeS1nZXQoY29sdW1ucywgJGdyaWQpO1xuXG4gICRfY29sb3IgICA6IGRlYnVnLWdldChjb2xvcik7XG4gICRfbGlnaHQgICA6IGxpZ2h0ZW4oJF9jb2xvciwgMTUlKTtcbiAgJF9zdG9wcyAgIDogKCk7XG5cbiAgQGZvciAkbG9jYXRpb24gZnJvbSAxIHRocm91Z2ggc3VzeS1jb3VudCgkX2NvbHVtbnMpIHtcbiAgICAkdGhpcy1zdG9wOiAoKTtcblxuICAgICRzdGFydDogcGFyc2Utc3BhbigxIGF0ICRsb2NhdGlvbiAkZ3JpZCk7XG4gICAgJHN0YXJ0OiBnZXQtaXNvbGF0aW9uKCRzdGFydCk7XG4gICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsIHRyYW5zcGFyZW50ICRzdGFydCwgY29tbWEpO1xuICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2NvbG9yICRzdGFydCwgY29tbWEpO1xuXG4gICAgJF9lbmQ6ICRzdGFydCArIHNwYW4oMSBhdCAkbG9jYXRpb24gJGdyaWQpO1xuICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2xpZ2h0ICRfZW5kLCBjb21tYSk7XG4gICAgJHRoaXMtc3RvcDogYXBwZW5kKCR0aGlzLXN0b3AsIHRyYW5zcGFyZW50ICRfZW5kLCBjb21tYSk7XG5cbiAgICAkX3N0b3BzOiBqb2luKCRfc3RvcHMsICR0aGlzLXN0b3AsIGNvbW1hKTtcbiAgfVxuXG4gIEByZXR1cm4gJF9zdG9wcztcbn1cblxuXG4vLyBHZXQgQXN5bW1ldHJpY2FsIE91dHNpZGVcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gLSAkZ3JpZDogPHNldHRpbmdzPlxuQGZ1bmN0aW9uIGdldC1hc3ltLW91dHNpZGUoXG4gICRncmlkXG4pIHtcbiAgJGdyaWQgICAgIDogcGFyc2UtZ3JpZCgkZ3JpZCk7XG4gICRfY29sdW1ucyA6IHN1c3ktZ2V0KGNvbHVtbnMsICRncmlkKTtcblxuICAkX2NvbG9yICAgOiBkZWJ1Zy1nZXQoY29sb3IpO1xuICAkX2xpZ2h0ICAgOiBsaWdodGVuKCRfY29sb3IsIDE1JSk7XG4gICRfdHJhbnMgICA6IHRyYW5zcGFyZW50O1xuICAkX3N0b3BzICAgOiAoKTtcblxuICBAZm9yICRsb2NhdGlvbiBmcm9tIDEgdGhyb3VnaCBzdXN5LWNvdW50KCRfY29sdW1ucykge1xuICAgICR0aGlzLXN0b3A6ICgpO1xuXG4gICAgQGlmICRsb2NhdGlvbiA9PSAxIHtcbiAgICAgICR0aGlzLXN0b3A6IGFwcGVuZCgkdGhpcy1zdG9wLCAkX2NvbG9yLCBjb21tYSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkc3RhcnQ6IHBhcnNlLXNwYW4oMSBhdCAkbG9jYXRpb24gJGdyaWQpO1xuICAgICAgJHN0YXJ0OiBnZXQtaXNvbGF0aW9uKCRzdGFydCk7XG4gICAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9jb2xvciAkc3RhcnQsIGNvbW1hKTtcbiAgICB9XG5cbiAgICBAaWYgJGxvY2F0aW9uID09IHN1c3ktY291bnQoJF9jb2x1bW5zKSB7XG4gICAgICAkdGhpcy1zdG9wOiBhcHBlbmQoJHRoaXMtc3RvcCwgJF9saWdodCwgY29tbWEpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJGd1dHRlcjogZ2V0LXNwYW4td2lkdGgoZmlyc3QgJGxvY2F0aW9uICRncmlkKTtcblxuICAgICAgJF9lbmQ6IHBhcnNlLXNwYW4oMSBhdCAoJGxvY2F0aW9uICsgMSkgJGdyaWQpO1xuICAgICAgJF9lbmQ6IGdldC1pc29sYXRpb24oJF9lbmQpO1xuXG4gICAgICAkZ3V0dGVyOiAkX2xpZ2h0ICRndXR0ZXIsICRfdHJhbnMgJGd1dHRlciwgJF90cmFucyAkX2VuZDtcbiAgICAgICR0aGlzLXN0b3A6IGpvaW4oJHRoaXMtc3RvcCwgJGd1dHRlciwgY29tbWEpO1xuICAgIH1cblxuICAgICRfc3RvcHM6IGpvaW4oJF9zdG9wcywgJHRoaXMtc3RvcCwgY29tbWEpO1xuICB9XG5cbiAgQHJldHVybiAkX3N0b3BzO1xufVxuXG5cbi8vIEdldCBBc3ltbWV0cmljYWwgQmFja2dyb3VuZFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtICRncmlkOiA8c2V0dGluZ3M+XG5AZnVuY3Rpb24gZ2V0LWJhY2tncm91bmQtYXN5bShcbiAgJGdyaWRcbikge1xuICAkX3N0b3BzOiAoKTtcblxuICBAaWYgaXMtaW5zaWRlKCRncmlkKSB7XG4gICAgJF9zdG9wczogZ2V0LWFzeW0taW5zaWRlKCRncmlkKTtcbiAgfSBAZWxzZSBpZiBpcy1zcGxpdCgkZ3JpZCkge1xuICAgICRfc3RvcHM6IGdldC1hc3ltLXNwbGl0KCRncmlkKTtcbiAgfSBAZWxzZSB7XG4gICAgJF9zdG9wczogZ2V0LWFzeW0tb3V0c2lkZSgkZ3JpZCk7XG4gIH1cblxuICBAcmV0dXJuIChpbWFnZTogKGNvbHVtbnM6ICRfc3RvcHMpKTtcbn1cblxuXG4vLyBHZXQgQmFja2dyb3VuZFxuLy8gLS0tLS0tLS0tLS0tLS1cbi8vIC0gJGdyaWQ6IDxzZXR0aW5ncz5cbkBmdW5jdGlvbiBnZXQtYmFja2dyb3VuZChcbiAgJGdyaWRcbikge1xuICAkZ3JpZCAgICAgOiBwYXJzZS1ncmlkKCRncmlkKTtcbiAgJF9zaG93ICAgIDogc3VzeS1nZXQoZGVidWcgaW1hZ2UsICRncmlkKTtcbiAgJF9yZXR1cm4gIDogKCk7XG5cbiAgQGlmICRfc2hvdyBhbmQgJF9zaG93ICE9ICdoaWRlJyB7XG4gICAgJF9jb2x1bW5zOiBzdXN5LWdldChjb2x1bW5zLCAkZ3JpZCk7XG5cbiAgICBAaWYgJF9zaG93ICE9ICdzaG93LWJhc2VsaW5lJyB7XG4gICAgICAkX3N5bTogaXMtc3ltbWV0cmljYWwoJF9jb2x1bW5zKTtcbiAgICAgICRfcmV0dXJuOiBpZigkX3N5bSwgZ2V0LWJhY2tncm91bmQtc3ltKCRncmlkKSwgZ2V0LWJhY2tncm91bmQtYXN5bSgkZ3JpZCkpO1xuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKGNsaXA6IGNvbnRlbnQtYm94KSk7XG4gICAgfVxuXG4gICAgQGlmICRfc2hvdyAhPSAnc2hvdy1jb2x1bW5zJ1xuICAgICAgYW5kIGdsb2JhbC12YXJpYWJsZS1leGlzdHMoYmFzZS1saW5lLWhlaWdodClcbiAgICAgIGFuZCB0eXBlLW9mKCRiYXNlLWxpbmUtaGVpZ2h0KSA9PSAnbnVtYmVyJ1xuICAgICAgYW5kIG5vdCB1bml0bGVzcygkYmFzZS1saW5lLWhlaWdodCkge1xuICAgICAgJF9jb2xvcjogdmFyaWFibGUtZXhpc3RzKCdncmlkLWJhY2tncm91bmQtYmFzZWxpbmUtY29sb3InKTtcbiAgICAgICRfY29sb3I6IGlmKCRfY29sb3IsICRncmlkLWJhY2tncm91bmQtYmFzZWxpbmUtY29sb3IsICMwMDApO1xuXG4gICAgICAkX2ltYWdlOiBtYXAtZ2V0KCRfcmV0dXJuLCBpbWFnZSk7XG4gICAgICAkX3NpemU6IG1hcC1nZXQoJF9yZXR1cm4sIHNpemUpO1xuICAgICAgJF9iYXNlbGluZTogKGJhc2VsaW5lOiAoJF9jb2xvciAxcHgsIHRyYW5zcGFyZW50IDFweCkpO1xuICAgICAgJF9iYXNlbGluZS1zaXplOiAxMDAlICRiYXNlLWxpbmUtaGVpZ2h0O1xuXG4gICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAoXG4gICAgICAgIGltYWdlOiBpZigkX2ltYWdlLCBtYXAtbWVyZ2UoJF9pbWFnZSwgJF9iYXNlbGluZSksICRfYmFzZWxpbmUpLFxuICAgICAgICBzaXplOiBpZigkX3NpemUsICgkX3NpemUsICRfYmFzZWxpbmUtc2l6ZSksICRfYmFzZWxpbmUtc2l6ZSksXG4gICAgICApKTtcblxuICAgICAgQGlmICRfc2hvdyA9PSAnc2hvdycge1xuICAgICAgICAkX2NsaXA6IG1hcC1nZXQoJF9yZXR1cm4sIGNsaXApO1xuICAgICAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAoY2xpcDogam9pbigkX2NsaXAsIGJvcmRlci1ib3gsIGNvbW1hKSkpO1xuICAgICAgfVxuICAgIH0gQGVsc2UgaWYgJF9zaG93ID09ICdzaG93LWJhc2VsaW5lJyB7XG4gICAgICBAd2FybiAnUGxlYXNlIHByb3ZpZGUgYSAkYmFzZS1saW5lLWhlaWdodCB3aXRoIHRoZSBkZXNpcmVkIGhlaWdodCBhbmQgdW5pdHMnO1xuICAgIH1cbiAgfVxuXG4gIEBpZiBtYXAtZ2V0KCRfcmV0dXJuLCBpbWFnZSkge1xuICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sIChmbG93OiBzdXN5LWdldChmbG93LCAkZ3JpZCkpKTtcbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cblxuLy8gR2V0IERlYnVnXG4vLyAtLS0tLS0tLS1cbi8vIFJldHVybiB0aGUgdmFsdWUgb2YgYSBkZWJ1ZyBzZXR0aW5nXG4vLyAtICRrZXk6IDxzZXR0aW5nPlxuQGZ1bmN0aW9uIGRlYnVnLWdldChcbiAgJGtleSxcbiAgJGdyaWQ6ICRzdXN5XG4pIHtcbiAgJGtleTogam9pbihkZWJ1ZywgJGtleSwgc3BhY2UpO1xuICBAcmV0dXJuIHN1c3ktZ2V0KCRrZXksICRncmlkKTtcbn1cbiIsIi8vIENvbnRhaW5lciBTeW50YXhcbi8vID09PT09PT09PT09PT09PT1cblxuLy8gQ29udGFpbmVyIFttaXhpbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTZXQgYSBjb250YWluZXIgZWxlbWVudFxuLy8gLSBbJGxheW91dF0gIDogPHNldHRpbmdzPlxuQG1peGluIGNvbnRhaW5lcihcbiAgJGxheW91dDogJHN1c3lcbikge1xuICAkaW5zcGVjdCAgICA6ICRsYXlvdXQ7XG4gICRsYXlvdXQgICAgIDogcGFyc2UtZ3JpZCgkbGF5b3V0KTtcblxuICAkX3dpZHRoICAgICA6IGdldC1jb250YWluZXItd2lkdGgoJGxheW91dCk7XG4gICRfanVzdGlmeSAgIDogcGFyc2UtY29udGFpbmVyLXBvc2l0aW9uKHN1c3ktZ2V0KGNvbnRhaW5lci1wb3NpdGlvbiwgJGxheW91dCkpO1xuICAkX3Byb3BlcnR5ICA6IGlmKHN1c3ktZ2V0KG1hdGgsICRsYXlvdXQpID09IHN0YXRpYywgd2lkdGgsIG1heC13aWR0aCk7XG5cbiAgJF9ib3ggICAgICAgOiBzdXN5LWdldChib3gtc2l6aW5nLCAkbGF5b3V0KTtcblxuICBAaWYgJF9ib3gge1xuICAgIEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogJF9ib3gpKTtcbiAgfVxuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChjb250YWluZXIsICRpbnNwZWN0KTtcbiAgQGluY2x1ZGUgZmxvYXQtY29udGFpbmVyKCRfd2lkdGgsICRfanVzdGlmeSwgJF9wcm9wZXJ0eSk7XG4gIEBpbmNsdWRlIHNob3ctZ3JpZCgkbGF5b3V0KTtcbn1cblxuLy8gQ29udGFpbmVyIFtmdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gY29udGFpbmVyIHdpZHRoXG4vLyAtIFskbGF5b3V0XSAgOiA8c2V0dGluZ3M+XG5AZnVuY3Rpb24gY29udGFpbmVyKFxuICAkbGF5b3V0OiAkc3VzeVxuKSB7XG4gICRsYXlvdXQ6IHBhcnNlLWdyaWQoJGxheW91dCk7XG4gIEByZXR1cm4gZ2V0LWNvbnRhaW5lci13aWR0aCgkbGF5b3V0KTtcbn1cblxuLy8gR2V0IENvbnRhaW5lciBXaWR0aFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ2FsY3VsYXRlIHRoZSBjb250YWluZXIgd2lkdGhcbi8vIC0gWyRsYXlvdXRdOiA8c2V0dGluZ3M+XG5AZnVuY3Rpb24gZ2V0LWNvbnRhaW5lci13aWR0aChcbiAgJGxheW91dDogJHN1c3lcbikge1xuICAkbGF5b3V0ICAgICAgICAgOiBwYXJzZS1ncmlkKCRsYXlvdXQpO1xuICAkX3dpZHRoICAgICAgICAgOiBzdXN5LWdldChjb250YWluZXIsICRsYXlvdXQpO1xuICAkX2NvbHVtbi13aWR0aCAgOiBzdXN5LWdldChjb2x1bW4td2lkdGgsICRsYXlvdXQpO1xuICAkX21hdGggICAgICAgICAgOiBzdXN5LWdldChtYXRoLCAkbGF5b3V0KTtcblxuICBAaWYgbm90KCRfd2lkdGgpIG9yICRfd2lkdGggPT0gYXV0byB7XG4gICAgQGlmIHZhbGlkLWNvbHVtbi1tYXRoKCRfbWF0aCwgJF9jb2x1bW4td2lkdGgpIHtcbiAgICAgICRfY29sdW1ucyAgIDogc3VzeS1nZXQoY29sdW1ucywgJGxheW91dCk7XG4gICAgICAkX2d1dHRlcnMgICA6IHN1c3ktZ2V0KGd1dHRlcnMsICRsYXlvdXQpO1xuICAgICAgJF9zcHJlYWQgICAgOiBpZihpcy1zcGxpdCgkbGF5b3V0KSwgd2lkZSwgbmFycm93KTtcbiAgICAgICRfd2lkdGggICAgIDogc3VzeS1zdW0oJF9jb2x1bW5zLCAkX2d1dHRlcnMsICRfc3ByZWFkKSAqICRfY29sdW1uLXdpZHRoO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJF93aWR0aDogMTAwJTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRfd2lkdGg7XG59XG5cbi8vIFBhcnNlIENvbnRhaW5lciBQb3NpdGlvblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQYXJzZSB0aGUgJGNvbnRhaW5lci1wb3NpdGlvbiBpbnRvIG1hcmdpbiB2YWx1ZXMuXG4vLyAtIFskanVzdGlmeV0gICA6IGxlZnQgfCBjZW50ZXIgfCByaWdodCB8IDxsZW5ndGg+IFs8bGVuZ3RoPl1cbkBmdW5jdGlvbiBwYXJzZS1jb250YWluZXItcG9zaXRpb24oXG4gICRqdXN0aWZ5OiBtYXAtZ2V0KCRzdXN5LWRlZmF1bHRzLCBjb250YWluZXItcG9zaXRpb24pXG4pIHtcbiAgJF9yZXR1cm46IGlmKCRqdXN0aWZ5ID09IGxlZnQsIDAsIGF1dG8pIGlmKCRqdXN0aWZ5ID09IHJpZ2h0LCAwLCBhdXRvKTtcblxuICBAaWYgbm90KGluZGV4KGxlZnQgcmlnaHQgY2VudGVyLCAkanVzdGlmeSkpIHtcbiAgICAkX3JldHVybjogbnRoKCRqdXN0aWZ5LCAxKTtcbiAgICAkX3JldHVybjogJF9yZXR1cm4gaWYobGVuZ3RoKCRqdXN0aWZ5KSA+IDEsIG50aCgkanVzdGlmeSwgMiksICRfcmV0dXJuKTtcbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG4iLCIvLyBTcGFuIFN5bnRheFxuLy8gPT09PT09PT09PT1cblxuLy8gU3BhbiBbbWl4aW5dXG4vLyAtLS0tLS0tLS0tLS1cbi8vIFNldCBhIHNwYW5uaW5nIGVsZW1lbnQgdXNpbmcgc2hvcnRoYW5kIHN5bnRheC5cbi8vIC0gJHNwYW4gIDogPHNwYW4+XG5AbWl4aW4gc3BhbihcbiAgJHNwYW5cbikge1xuICAkaW5zcGVjdDogJHNwYW47XG4gICRzcGFuOiBwYXJzZS1zcGFuKCRzcGFuKTtcbiAgJG91dHB1dDogc3Bhbi1tYXRoKCRzcGFuKTtcbiAgJG5lc3Rpbmc6IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcbiAgJGNsZWFyOiBzdXN5LWdldChjbGVhciwgJHNwYW4pO1xuXG4gICRib3g6IHN1c3ktZ2V0KGJveC1zaXppbmcsICRzcGFuKTtcbiAgJGNvbnRlbnQtYm94OiBpZihzdXN5LWdldChnbG9iYWwtYm94LXNpemluZykgIT0gJ2JvcmRlci1ib3gnLCB0cnVlLCBmYWxzZSk7XG4gICRib3g6ICRib3ggb3IgaWYoaXMtaW5zaWRlKCRzcGFuKSBhbmQgJGNvbnRlbnQtYm94LCBib3JkZXItYm94LCBudWxsKTtcblxuICBAaWYgJGNsZWFyID09IGJyZWFrIHtcbiAgICBAaW5jbHVkZSBicmVhaztcbiAgfSBAZWxzZSBpZiAkY2xlYXIgPT0gbm9icmVhayB7XG4gICAgQGluY2x1ZGUgbm9icmVhaztcbiAgfVxuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChzcGFuLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogJGJveCkpO1xuICBAaW5jbHVkZSBmbG9hdC1zcGFuLW91dHB1dCgkb3V0cHV0Li4uKTtcblxuICBAaWYgdmFsaWQtY29sdW1ucygkbmVzdGluZywgc2lsZW50KSB7XG4gICAgQGluY2x1ZGUgbmVzdGVkKCRzcGFuKSB7IEBjb250ZW50OyB9XG4gIH0gQGVsc2Uge1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbi8vIFNwYW4gW2Z1bmN0aW9uXVxuLy8gLS0tLS0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gdGhlIHdpZHRoIG9mIGEgc3Bhbi5cbi8vIC0gJHNwYW4gIDogPHNwYW4+XG5AZnVuY3Rpb24gc3BhbihcbiAgJHNwYW5cbikge1xuICBAcmV0dXJuIGdldC1zcGFuLXdpZHRoKCRzcGFuKTtcbn1cblxuLy8gU3BhbiBNYXRoXG4vLyAtLS0tLS0tLS1cbi8vIEdldCBhbGwgdGhlIHNwYW4gcmVzdWx0cy5cbi8vIC0gJHNwYW46IDxtYXA+XG5AZnVuY3Rpb24gc3Bhbi1tYXRoKFxuICAkc3BhblxuKSB7XG4gICRuZXN0ICAgICAgICAgICAgIDogaWYoc3VzeS1nZXQocm9sZSwgJHNwYW4pID09IG5lc3QsIHRydWUsIGZhbHNlKTtcbiAgJHNwbGl0LW5lc3QgICAgICAgOiBpZihpcy1zcGxpdCgkc3BhbikgYW5kICRuZXN0LCB0cnVlLCBmYWxzZSk7XG4gICRlZGdlICAgICAgICAgICAgIDogZ2V0LWVkZ2UoJHNwYW4pO1xuICAkbG9jYXRpb24gICAgICAgICA6IGdldC1sb2NhdGlvbigkc3Bhbik7XG5cbiAgJGZsb2F0ICAgICAgICAgICAgOiBmcm9tO1xuICAkcGFkZGluZy1iZWZvcmUgICA6IG51bGw7XG4gICRwYWRkaW5nLWFmdGVyICAgIDogbnVsbDtcbiAgJG1hcmdpbi1iZWZvcmUgICAgOiBudWxsO1xuICAkbWFyZ2luLWFmdGVyICAgICA6IG51bGw7XG5cbiAgLy8gY2FsY3VsYXRlIHdpZHRoc1xuICAkc3ByZWFkOiBpbmRleChtYXAtdmFsdWVzKCRzcGFuKSwgc3ByZWFkKTtcbiAgJHNwYW46IGlmKCRzcGxpdC1uZXN0IGFuZCBub3QoJHNwcmVhZCksIG1hcC1tZXJnZSgkc3BhbiwgKHNwcmVhZDogd2lkZSkpLCAkc3Bhbik7XG4gICR3aWR0aDogZ2V0LXNwYW4td2lkdGgoJHNwYW4pO1xuICAkZ3V0dGVyczogZ2V0LWd1dHRlcnMoJHNwYW4pO1xuXG4gIC8vIGFwcGx5IGd1dHRlcnNcbiAgQGlmIGlzLWluc2lkZSgkc3Bhbikge1xuICAgIEBpZiBub3Qoc3VzeS1nZXQocm9sZSwgJHNwYW4pKSB7XG4gICAgICAkcGFkZGluZy1iZWZvcmU6IG1hcC1nZXQoJGd1dHRlcnMsIGJlZm9yZSk7XG4gICAgICAkcGFkZGluZy1hZnRlcjogbWFwLWdldCgkZ3V0dGVycywgYWZ0ZXIpO1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGlmIG5vdCgkc3BsaXQtbmVzdCkge1xuICAgICAgJG1hcmdpbi1iZWZvcmU6IG1hcC1nZXQoJGd1dHRlcnMsIGJlZm9yZSk7XG4gICAgICAkbWFyZ2luLWFmdGVyOiBtYXAtZ2V0KCRndXR0ZXJzLCBhZnRlcik7XG4gICAgfVxuICB9XG5cbiAgLy8gc3BlY2lhbCBtYXJnaW4gaGFuZGxpbmdcbiAgQGlmIHN1c3ktZ2V0KG91dHB1dCwgJHNwYW4pID09IGlzb2xhdGUgYW5kICRsb2NhdGlvbiB7XG4gICAgJG1hcmdpbi1iZWZvcmU6IGdldC1pc29sYXRpb24oJHNwYW4pO1xuICAgICRtYXJnaW4tYWZ0ZXI6IC0xMDAlO1xuICB9IEBlbHNlIGlmICRlZGdlIHtcbiAgICAkaXMtc3BsaXQ6IGlzLXNwbGl0KCRzcGFuKTtcbiAgICAkcG9zOiBzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRzcGFuKTtcblxuICAgIEBpZiAkZWRnZSA9PSBsYXN0IHtcbiAgICAgICRmbG9hdDogc3VzeS1nZXQobGFzdC1mbG93LCAkc3Bhbik7XG4gICAgfVxuXG4gICAgQGlmIG5vdCgkaXMtc3BsaXQpIHtcbiAgICAgIEBpZiAkZWRnZSA9PSBmdWxsIG9yICgkZWRnZSA9PSBmaXJzdCBhbmQgJHBvcyA9PSBiZWZvcmUpIHtcbiAgICAgICAgJG1hcmdpbi1iZWZvcmU6IDA7XG4gICAgICB9XG4gICAgICBAaWYgJGVkZ2UgPT0gZnVsbCBvciAoJGVkZ2UgPT0gbGFzdCBhbmQgJHBvcyA9PSBhZnRlcikge1xuICAgICAgICAkbWFyZ2luLWFmdGVyOiAwO1xuICAgICAgfVxuICAgIH1cblxuICB9XG5cbiAgQHJldHVybiAoXG4gICAgd2lkdGggICAgICAgICAgIDogJHdpZHRoLFxuICAgIGZsb2F0ICAgICAgICAgICA6ICRmbG9hdCxcbiAgICBtYXJnaW4tYmVmb3JlICAgOiAkbWFyZ2luLWJlZm9yZSxcbiAgICBtYXJnaW4tYWZ0ZXIgICAgOiAkbWFyZ2luLWFmdGVyLFxuICAgIHBhZGRpbmctYmVmb3JlICA6ICRwYWRkaW5nLWJlZm9yZSxcbiAgICBwYWRkaW5nLWFmdGVyICAgOiAkcGFkZGluZy1hZnRlcixcbiAgICBmbG93ICAgICAgICAgICAgOiBzdXN5LWdldChmbG93LCAkc3BhbiksXG4gICk7XG59XG5cbi8vIEdldCBTcGFuIFdpZHRoXG4vLyAtLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHNwYW4gd2lkdGguXG4vLyAtICRzcGFuOiA8bWFwPlxuQGZ1bmN0aW9uIGdldC1zcGFuLXdpZHRoKFxuICAkc3BhblxuKSB7XG4gICRzcGFuICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xuXG4gICRuICAgICAgICA6IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcbiAgJGxvY2F0aW9uIDogZ2V0LWxvY2F0aW9uKCRzcGFuKTtcbiAgJGNvbHVtbnMgIDogc3VzeS1nZXQoY29sdW1ucywgJHNwYW4pO1xuICAkZ3V0dGVycyAgOiBzdXN5LWdldChndXR0ZXJzLCAkc3Bhbik7XG4gICRzcHJlYWQgICA6IHN1c3ktZ2V0KHNwcmVhZCwgJHNwYW4pO1xuXG4gICRjb250ZXh0ICA6IG51bGw7XG4gICRzcGFuLXN1bSA6IG51bGw7XG4gICR3aWR0aCAgICA6IG51bGw7XG5cbiAgQGlmICRuID09ICdmdWxsJyB7XG4gICAgJHBvczogc3VzeS1nZXQoZ3V0dGVyLXBvc2l0aW9uLCAkc3Bhbik7XG4gICAgJHJvbGU6IHN1c3ktZ2V0KHJvbGUsICRzcGFuKTtcbiAgICAkbjogaWYoJHBvcyA9PSBzcGxpdCBhbmQgJHJvbGUgIT0gbmVzdCwgc3VzeS1jb3VudCgkY29sdW1ucyksIDEwMCUpO1xuICB9XG5cbiAgQGlmIHR5cGUtb2YoJG4pICE9IG51bWJlciB7XG4gICAgQHdhcm4gXCIoI3t0eXBlLW9mKCRuKX0pICN7JG59IGlzIG5vdCBhIHZhbGlkIHNwYW4uXCI7XG4gIH0gQGVsc2UgaWYgdW5pdGxlc3MoJG4pIHtcbiAgICAkY29udGV4dDogc3VzeS1zdW0oJGNvbHVtbnMsICRndXR0ZXJzLCBpZihpcy1zcGxpdCgkc3BhbiksIHdpZGUsIG5hcnJvdykpO1xuICAgICRzcHJlYWQ6IGlmKGlzLWluc2lkZSgkc3BhbiksICRzcHJlYWQgb3Igd2lkZSwgJHNwcmVhZCk7XG4gICAgJHNwYW4tc3VtOiBzdXN5KCRuLCAkbG9jYXRpb24sICRjb2x1bW5zLCAkZ3V0dGVycywgJHNwcmVhZCk7XG5cbiAgICAkX21hdGg6IHN1c3ktZ2V0KG1hdGgsICRzcGFuKTtcbiAgICAkX2NvbHVtbi13aWR0aDogc3VzeS1nZXQoY29sdW1uLXdpZHRoLCAkc3Bhbik7XG4gICAgQGlmICRfbWF0aCA9PSBzdGF0aWMge1xuICAgICAgJHdpZHRoOiAkc3Bhbi1zdW0gKiB2YWxpZC1jb2x1bW4tbWF0aCgkX21hdGgsICRfY29sdW1uLXdpZHRoKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICR3aWR0aDogcGVyY2VudGFnZSgkc3Bhbi1zdW0gLyAkY29udGV4dCk7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICAkd2lkdGg6ICRuO1xuICB9XG5cbiAgQHJldHVybiAkd2lkdGg7XG59XG4iLCIvLyBHdXR0ZXIgU3ludGF4XG4vLyA9PT09PT09PT09PT09XG5cblxuLy8gR3V0dGVyc1xuLy8gLS0tLS0tLVxuLy8gU2V0IGd1dHRlcnMgb24gYW4gZWxlbWVudC5cbi8vIC0gWyRzcGFuXSAgIDogPHNldHRpbmdzPlxuQG1peGluIGd1dHRlcnMoXG4gICRzcGFuOiAkc3VzeVxuKSB7XG4gICRpbnNwZWN0ICA6ICRzcGFuO1xuICAkc3BhbiAgICAgOiBwYXJzZS1ndXR0ZXJzKCRzcGFuKTtcbiAgJF9ndXR0ZXJzIDogZ2V0LWd1dHRlcnMoJHNwYW4pO1xuXG4gICRfb3V0cHV0OiAoXG4gICAgYmVmb3JlOiBtYXAtZ2V0KCRfZ3V0dGVycywgYmVmb3JlKSxcbiAgICBhZnRlcjogbWFwLWdldCgkX2d1dHRlcnMsIGFmdGVyKSxcbiAgICBmbG93OiBzdXN5LWdldChmbG93LCAkc3BhbiksXG4gICk7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGd1dHRlcnMsICRpbnNwZWN0KTtcblxuICBAaWYgaXMtaW5zaWRlKCRzcGFuKSB7XG4gICAgQGluY2x1ZGUgcGFkZGluZy1vdXRwdXQoJF9vdXRwdXQuLi4pO1xuICB9IEBlbHNlIHtcbiAgICBAaW5jbHVkZSBtYXJnaW4tb3V0cHV0KCRfb3V0cHV0Li4uKTtcbiAgfVxufVxuXG5AbWl4aW4gZ3V0dGVyKFxuICAkc3BhbjogJHN1c3lcbikge1xuICBAaW5jbHVkZSBndXR0ZXJzKCRzcGFuKTtcbn1cblxuXG4vLyBHdXR0ZXJcbi8vIC0tLS0tLVxuLy8gUmV0dXJuIHRoZSB3aWR0aCBvZiBhIGd1dHRlci5cbi8vIC0gWyRzcGFuXSAgIDogPHNldHRpbmdzPlxuQGZ1bmN0aW9uIGd1dHRlcihcbiAgJHNwYW46ICRzdXN5XG4pIHtcbiAgJHNwYW46IHBhcnNlLWd1dHRlcnMoJHNwYW4pO1xuXG4gICRfZ3V0dGVyczogZ2V0LWd1dHRlcnMoJHNwYW4pO1xuICAkX2d1dHRlcnM6IG1hcC1nZXQoJF9ndXR0ZXJzLCBiZWZvcmUpIG9yIG1hcC1nZXQoJF9ndXR0ZXJzLCBhZnRlcik7XG5cbiAgQHJldHVybiAkX2d1dHRlcnM7XG59XG5cbkBmdW5jdGlvbiBndXR0ZXJzKFxuICAkc3BhbjogJHN1c3lcbikge1xuICBAcmV0dXJuIGd1dHRlcigkc3Bhbik7XG59XG5cblxuLy8gR2V0IEd1dHRlciBXaWR0aFxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIGd1dHRlciB3aWR0aC5cbi8vIC0gWyRjb250ZXh0XTogPGNvbnRleHQ+XG5AZnVuY3Rpb24gZ2V0LWd1dHRlci13aWR0aChcbiAgJGNvbnRleHQ6ICRzdXN5XG4pIHtcbiAgJGNvbnRleHQgIDogcGFyc2UtZ3V0dGVycygkY29udGV4dCk7XG5cbiAgJF9ndXR0ZXJzIDogc3VzeS1nZXQoZ3V0dGVycywgJGNvbnRleHQpO1xuICAkX2d1dHRlciAgOiBzdXN5LWdldChndXR0ZXItb3ZlcnJpZGUsICRjb250ZXh0KTtcblxuICBAaWYgJF9ndXR0ZXJzIGFuZCAoJF9ndXR0ZXJzID4gMCkgYW5kIG5vdCgkX2d1dHRlcikge1xuICAgICRfY29sdW1uLXdpZHRoOiBzdXN5LWdldChjb2x1bW4td2lkdGgsICRjb250ZXh0KTtcbiAgICAkX21hdGg6IGd1dHRlci1tYXRoKCRjb250ZXh0KTtcbiAgICBAaWYgJF9tYXRoID09IHN0YXRpYyB7XG4gICAgICAkX2d1dHRlcjogJF9ndXR0ZXJzICogdmFsaWQtY29sdW1uLW1hdGgoJF9tYXRoLCAkX2NvbHVtbi13aWR0aCk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkX2NvbHVtbnMgOiBzdXN5LWdldChjb2x1bW5zLCAkY29udGV4dCk7XG4gICAgICAkX3NwcmVhZCAgOiBpZihpcy1zcGxpdCgkY29udGV4dCksIHdpZGUsIHN1c3ktZ2V0KHNwcmVhZCwgJGNvbnRleHQpKTtcbiAgICAgICRfZ3V0dGVyICA6IHBlcmNlbnRhZ2UoJF9ndXR0ZXJzIC8gc3VzeS1zdW0oJF9jb2x1bW5zLCAkX2d1dHRlcnMsICRfc3ByZWFkKSk7XG4gICAgfVxuICB9XG5cbiAgJF9ndXR0ZXI6IGlmKCRfZ3V0dGVyID09ICduby1ndXR0ZXJzJyBvciAkX2d1dHRlciA9PSAnbm8tZ3V0dGVyJywgbnVsbCwgJF9ndXR0ZXIpO1xuXG4gIEByZXR1cm4gJF9ndXR0ZXI7XG59XG5cblxuLy8gR2V0IEd1dHRlcnNcbi8vIC0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gYmVmb3JlIGFuZCBhZnRlciBndXR0ZXIgdmFsdWVzLlxuLy8gLSBbJGNvbnRleHRdOiA8Y29udGV4dD5cbkBmdW5jdGlvbiBnZXQtZ3V0dGVycyhcbiAgJGNvbnRleHQ6ICRzdXN5XG4pIHtcbiAgJGNvbnRleHQgICAgICAgICAgICA6IHBhcnNlLWd1dHRlcnMoJGNvbnRleHQpO1xuXG4gICRfZ3V0dGVyLXBvc2l0aW9uICAgOiBzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRjb250ZXh0KTtcbiAgJF9ndXR0ZXIgICAgICAgICAgICA6IGdldC1ndXR0ZXItd2lkdGgoJGNvbnRleHQpO1xuXG4gICRfcmV0dXJuICAgICAgICAgICAgOiAoYmVmb3JlOiBudWxsLCBhZnRlcjogbnVsbCk7XG5cbiAgQGlmIGlzLXNwbGl0KCRjb250ZXh0KSBhbmQgJF9ndXR0ZXIge1xuICAgICRfZ3V0dGVyOiAkX2d1dHRlciAvIDI7XG4gICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKGJlZm9yZTogJF9ndXR0ZXIsIGFmdGVyOiAkX2d1dHRlcikpO1xuICB9IEBlbHNlIHtcbiAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAoJF9ndXR0ZXItcG9zaXRpb246ICRfZ3V0dGVyKSk7XG4gIH1cblxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuXG5cbi8vIElzIEluc2lkZVxuLy8gLS0tLS0tLS0tXG4vLyBSZXR1cm5zIHRydWUgaWYgZ3V0dGVycyBhcmUgaW5zaWRlLlxuLy8gJGNvbnRleHQ6IDxjb250ZXh0PlxuQGZ1bmN0aW9uIGlzLWluc2lkZShcbiAgJGNvbnRleHRcbikge1xuICAkX2luc2lkZTogaW5zaWRlIGluc2lkZS1zdGF0aWM7XG4gICRfZ3V0dGVyLXBvc2l0aW9uOiBzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRjb250ZXh0KTtcblxuICBAcmV0dXJuIGlmKGluZGV4KCRfaW5zaWRlLCAkX2d1dHRlci1wb3NpdGlvbiksIHRydWUsIGZhbHNlKTtcbn1cblxuXG4vLyBJcyBTcGxpdFxuLy8gLS0tLS0tLS1cbi8vIFJldHVybnMgdHJ1ZSBpZiBndXR0ZXJzIGFyZSBzcGxpdC5cbi8vICRjb250ZXh0OiA8Y29udGV4dD5cbkBmdW5jdGlvbiBpcy1zcGxpdChcbiAgJGNvbnRleHRcbikge1xuICAkX3NwbGl0OiBzcGxpdCBpbnNpZGUgaW5zaWRlLXN0YXRpYztcbiAgJF9ndXR0ZXItcG9zaXRpb246IHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJGNvbnRleHQpO1xuXG4gIEByZXR1cm4gaWYoaW5kZXgoJF9zcGxpdCwgJF9ndXR0ZXItcG9zaXRpb24pLCB0cnVlLCBmYWxzZSk7XG59XG5cblxuLy8gR3V0dGVyIE1hdGhcbi8vIC0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gdGhlIG1hdGggdG8gdXNlIGZvciBndXR0ZXIgY2FsY3VsYXRpb25zXG4vLyAkY29udGV4dDogPGNvbnRleHQ+XG5AZnVuY3Rpb24gZ3V0dGVyLW1hdGgoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gICRfcmV0dXJuICA6IHN1c3ktZ2V0KG1hdGgsICRjb250ZXh0KTtcbiAgJF9yZXR1cm4gIDogaWYoc3VzeS1nZXQoZ3V0dGVyLXBvc2l0aW9uLCAkY29udGV4dCkgPT0gaW5zaWRlLXN0YXRpYywgc3RhdGljLCAkX3JldHVybik7XG5cbiAgQHJldHVybiAkX3JldHVybjtcbn1cbiIsIi8vIElzb2xhdGlvbiBTeW50YXhcbi8vID09PT09PT09PT09PT09PT1cblxuXG4vLyBJc29sYXRlIFtNaXhpbl1cbi8vIC0tLS0tLS0tLS0tLS0tLVxuLy8gU2V0IGlzb2xhdGlvbiBhcyBhbiBvdmVycmlkZS5cbi8vIC0gJGxvY2F0aW9uOiA8c3Bhbj5cbkBtaXhpbiBpc29sYXRlKFxuICAkaXNvbGF0ZTogMVxuKSB7XG4gICRpbnNwZWN0OiAkaXNvbGF0ZTtcblxuICAkb3V0cHV0OiAoXG4gICAgcHVzaDogaXNvbGF0ZSgkaXNvbGF0ZSksXG4gICAgZmxvdzogc3VzeS1nZXQoZmxvdywgJGlzb2xhdGUpLFxuICApO1xuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChpc29sYXRlLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIGlzb2xhdGUtb3V0cHV0KCRvdXRwdXQuLi4pO1xufVxuXG5cbi8vIElzb2xhdGUgW2Z1bmN0aW9uXVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gYW4gaXNvbGF0aW9uIG9mZnNldCB3aWR0aC5cbi8vIC0gJGxvY2F0aW9uOiA8c3Bhbj5cbkBmdW5jdGlvbiBpc29sYXRlKFxuICAkaXNvbGF0ZTogMVxuKSB7XG4gICRpc29sYXRlOiBwYXJzZS1zcGFuKCRpc29sYXRlKTtcbiAgJGlzb2xhdGlvbjogc3VzeS1nZXQoc3BhbiwgJGlzb2xhdGUpO1xuXG4gIEBpZiAkaXNvbGF0aW9uIGFuZCBub3QoZ2V0LWxvY2F0aW9uKCRpc29sYXRlKSkge1xuICAgICRuZXc6IChcbiAgICAgIHNwYW46IG51bGwsXG4gICAgICBsb2NhdGlvbjogJGlzb2xhdGlvbixcbiAgICApO1xuICAgICRpc29sYXRlOiBtYXAtbWVyZ2UoJGlzb2xhdGUsICRuZXcpO1xuICB9XG5cbiAgQHJldHVybiBnZXQtaXNvbGF0aW9uKCRpc29sYXRlKTtcbn1cblxuXG4vLyBHZXQgSXNvbGF0aW9uXG4vLyAtLS0tLS0tLS0tLS0tXG4vLyBSZXR1cm4gdGhlIGlzb2xhdGlvbiBvZmZzZXQgd2lkdGhcbi8vIC0gJGlucHV0OiA8bWFwPlxuQGZ1bmN0aW9uIGdldC1pc29sYXRpb24oXG4gICRpbnB1dFxuKSB7XG4gICRsb2NhdGlvbiAgIDogZ2V0LWxvY2F0aW9uKCRpbnB1dCk7XG4gICRjb2x1bW5zICAgIDogc3VzeS1nZXQoY29sdW1ucywgJGlucHV0KTtcbiAgJHdpZHRoICAgICAgOiBudWxsO1xuXG4gIEBpZiB0eXBlLW9mKCRsb2NhdGlvbikgPT0gbnVtYmVyIGFuZCBub3QodW5pdGxlc3MoJGxvY2F0aW9uKSkge1xuICAgICR3aWR0aDogJGxvY2F0aW9uO1xuICB9IEBlbHNlIGlmICRsb2NhdGlvbiB7XG4gICAgJHB1c2g6ICRsb2NhdGlvbiAtIDE7XG4gICAgQGlmICRwdXNoID4gMCB7XG4gICAgICAkcHVzaDogbWFwLW1lcmdlKCRpbnB1dCwgKFxuICAgICAgICBzcGFuOiAkcHVzaCxcbiAgICAgICAgbG9jYXRpb246IDEsXG4gICAgICAgIHNwcmVhZDogd2lkZSxcbiAgICAgICkpO1xuICAgICAgJHdpZHRoOiBnZXQtc3Bhbi13aWR0aCgkcHVzaCk7XG4gICAgfVxuICB9XG5cbiAgQGlmIHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJGlucHV0KSA9PSBzcGxpdFxuICAgICAgYW5kIHN1c3ktZ2V0KGd1dHRlcnMsICRpbnB1dCkgPiAwIHtcbiAgICAkd2lkdGg6IGlmKCR3aWR0aCA9PSBudWxsLCBndXR0ZXJzKCRpbnB1dCksICR3aWR0aCArIGd1dHRlcnMoJGlucHV0KSk7XG4gIH1cblxuICBAcmV0dXJuICR3aWR0aCBvciAwO1xufVxuIiwiLy8gR2FsbGVyeSBTeW50YXhcbi8vID09PT09PT09PT09PT09XG5cbi8vIEdhbGxlcnlcbi8vIC0tLS0tLS1cbi8vIENyZWF0ZSBhbiBpc29sYXRlZCBnYWxsZXJ5XG4vLyAtICRzcGFuICAgICAgICA6IDxzcGFuPlxuLy8gLSBbJHNlbGVjdG9yXSAgOiBjaGlsZCB8IG9mLXR5cGVcbkBtaXhpbiBnYWxsZXJ5KFxuICAkc3BhbixcbiAgJHNlbGVjdG9yOiBjaGlsZFxuKSB7XG4gICRpbnNwZWN0ICAgIDogJHNwYW47XG4gICRzcGFuICAgICAgIDogcGFyc2Utc3Bhbigkc3Bhbik7XG4gICRzcGFuICAgICAgIDogbWFwLW1lcmdlKCRzcGFuLCAobG9jYXRpb246IDEpKTtcblxuICAkbiAgICAgICAgICAgIDogc3VzeS1nZXQoc3BhbiwgJHNwYW4pO1xuICAkY29sdW1ucyAgICAgIDogc3VzeS1nZXQoY29sdW1ucywgJHNwYW4pO1xuICAkY29udGV4dCAgICAgIDogc3VzeS1jb3VudCgkY29sdW1ucyk7XG4gICRmbG93ICAgICAgICAgOiBzdXN5LWdldChmbG93LCAkc3Bhbik7XG5cbiAgJGluc2lkZSAgICAgICA6IGlzLWluc2lkZSgkc3Bhbik7XG4gICRmcm9tICAgICAgICAgOiBmcm9tKCRmbG93KTtcbiAgJGxpbmUgICAgICAgICA6IGZsb29yKCRjb250ZXh0IC8gJG4pO1xuICAkc3ltbWV0cmljYWwgIDogaXMtc3ltbWV0cmljYWwoJGNvbHVtbnMpO1xuXG4gICRvdXRwdXQ6IChcbiAgICB3aWR0aCAgICAgICAgICAgICA6IG51bGwsXG4gICAgZmxvYXQgICAgICAgICAgICAgOiBmcm9tLFxuICAgIG1hcmdpbi1iZWZvcmUgICAgIDogbnVsbCxcbiAgICBtYXJnaW4tYWZ0ZXIgICAgICA6IG51bGwsXG4gICAgcGFkZGluZy1iZWZvcmUgICAgOiBudWxsLFxuICAgIHBhZGRpbmctYWZ0ZXIgICAgIDogbnVsbCxcbiAgICBmbG93ICAgICAgICAgICAgICA6ICRmbG93LFxuICApO1xuXG4gIEBpZiAkaW5zaWRlIHtcbiAgICAkZ3V0dGVyczogZ2V0LWd1dHRlcnMoJHNwYW4pO1xuICAgICRvdXRwdXQ6IG1hcC1tZXJnZSgkb3V0cHV0LCAoXG4gICAgICBwYWRkaW5nLWJlZm9yZTogbWFwLWdldCgkZ3V0dGVycywgYmVmb3JlKSxcbiAgICAgIHBhZGRpbmctYWZ0ZXI6IG1hcC1nZXQoJGd1dHRlcnMsIGFmdGVyKSxcbiAgICApKTtcbiAgfVxuXG4gIEBpZiAkc3ltbWV0cmljYWwge1xuICAgICRvdXRwdXQ6IG1hcC1tZXJnZSgkb3V0cHV0LCAod2lkdGg6IGdldC1zcGFuLXdpZHRoKCRzcGFuKSkpO1xuICB9XG5cbiAgJGJveCAgICAgICAgICA6IHN1c3ktZ2V0KGJveC1zaXppbmcsICRzcGFuKTtcbiAgJGdsb2JhbC1ib3ggICA6IGlmKHN1c3ktZ2V0KGdsb2JhbC1ib3gtc2l6aW5nKSA9PSAnYm9yZGVyLWJveCcsIHRydWUsIGZhbHNlKTtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QoZ2FsbGVyeSwgJGluc3BlY3QpO1xuXG4gIC8vIENvbGxlY3RpdmUgT3V0cHV0XG4gIEBpZiAkYm94ID09IGJvcmRlci1ib3ggb3IgKCRpbnNpZGUgYW5kIG5vdCgkYm94KSBhbmQgbm90KCRnbG9iYWwtYm94KSkge1xuICAgIEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogYm9yZGVyLWJveCkpO1xuICB9IEBlbHNlIGlmICRib3ggPT0gY29udGVudC1ib3gge1xuICAgIEBpbmNsdWRlIG91dHB1dCgoYm94LXNpemluZzogY29udGVudC1ib3gpKTtcbiAgfVxuXG4gIEBpbmNsdWRlIGZsb2F0LXNwYW4tb3V0cHV0KCRvdXRwdXQuLi4pO1xuXG4gIC8vIEluZGl2aWR1YWwgTG9vcFxuICBAZm9yICRpdGVtIGZyb20gMSB0aHJvdWdoICRsaW5lIHtcbiAgICAkbnRoOiAnI3skbGluZX1uICsgI3skaXRlbX0nO1xuICAgICY6bnRoLSN7JHNlbGVjdG9yfSgjeyRudGh9KSB7XG4gICAgICAvLyBJbmRpdmlkdWFsIFByZXBcbiAgICAgICRvdXRwdXQ6IChcbiAgICAgICAgd2lkdGggICAgICAgICAgICAgOiBpZigkc3ltbWV0cmljYWwsIG51bGwsIGdldC1zcGFuLXdpZHRoKCRzcGFuKSksXG4gICAgICAgIGZsb2F0ICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgbWFyZ2luLWJlZm9yZSAgICAgOiBnZXQtaXNvbGF0aW9uKCRzcGFuKSxcbiAgICAgICAgbWFyZ2luLWFmdGVyICAgICAgOiAtMTAwJSxcbiAgICAgICAgcGFkZGluZy1iZWZvcmUgICAgOiBudWxsLFxuICAgICAgICBwYWRkaW5nLWFmdGVyICAgICA6IG51bGwsXG4gICAgICAgIGZsb3cgICAgICAgICAgICAgIDogJGZsb3csXG4gICAgICApO1xuXG4gICAgICAvLyBJbmRpdmlkdWFsIE91dHB1dFxuICAgICAgQGluY2x1ZGUgZmxvYXQtc3Bhbi1vdXRwdXQoJG91dHB1dC4uLik7XG5cbiAgICAgIEBpZiBnZXQtZWRnZSgkc3BhbikgPT0gZmlyc3Qge1xuICAgICAgICBAaW5jbHVkZSBicmVhaztcbiAgICAgICAgQGluY2x1ZGUgZmlyc3QoJHNwYW4pO1xuICAgICAgfSBAZWxzZSB7XG4gICAgICAgIEBpbmNsdWRlIG5vYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIC8vIEluZGl2aWR1YWwgTG9jYXRpb24gSW5jcmVtZW50XG4gICAgICAkbG9jYXRpb246IGdldC1sb2NhdGlvbigkc3BhbikgKyAkbjtcbiAgICAgICRsb2NhdGlvbjogaWYoJGxvY2F0aW9uID4gJGNvbnRleHQsIDEsICRsb2NhdGlvbik7XG4gICAgICAkc3BhbjogbWFwLW1lcmdlKCRzcGFuLCAobG9jYXRpb246ICRsb2NhdGlvbikpO1xuICAgIH1cbiAgfVxufVxuIiwiLy8gUm93IFN0YXJ0ICYgRW5kXG4vLyA9PT09PT09PT09PT09PT1cblxuLy8gQnJlYWtcbi8vIC0tLS0tXG4vLyBBcHBseSB0byBhbnkgZWxlbWVudCB0aGF0IHNob3VsZCBmb3JjZSBhIGxpbmUgYnJlYWsuXG5AbWl4aW4gYnJlYWsge1xuICBAaW5jbHVkZSBvdXRwdXQoKGNsZWFyOiBib3RoKSk7XG59XG5cblxuLy8gTm9CcmVha1xuLy8gLS0tLS0tLVxuLy8gQ2FuY2VsIHRoZSBicmVhaygpIGVmZmVjdCwgZS5nLiB3aGVuIHVzaW5nIG1lZGlhIHF1ZXJpZXMuXG5AbWl4aW4gbm9icmVhayB7XG4gIEBpbmNsdWRlIG91dHB1dCgoY2xlYXI6IG5vbmUpKTtcbn1cblxuXG4vLyBGdWxsXG4vLyAtLS0tXG4vLyAtIFskY29udGV4dF06IDxsYXlvdXQgc2hvcnRoYW5kPlxuQG1peGluIGZ1bGwoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gICRpbnNwZWN0IDogJGNvbnRleHQ7XG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChmdWxsLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIHNwYW4oZnVsbCBvZiBwYXJzZS1ncmlkKCRjb250ZXh0KSBicmVhayk7XG59XG5cblxuLy8gRmlyc3Rcbi8vIC0tLS0tXG4vLyAtIFskY29udGV4dF06IDxzZXR0aW5ncz5cbkBtaXhpbiBmaXJzdChcbiAgJGNvbnRleHQ6ICRzdXN5XG4pIHtcbiAgJGluc3BlY3QgIDogJGNvbnRleHQ7XG4gICRjb250ZXh0ICA6IHBhcnNlLWdyaWQoJGNvbnRleHQpO1xuICAkZmxvdyAgICAgOiBzdXN5LWdldChmbG93LCAkY29udGV4dCk7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGZpcnN0LCAkaW5zcGVjdCk7XG4gIEBpZiBub3QoaXMtc3BsaXQoJGNvbnRleHQpKSB7XG4gICAgQGluY2x1ZGUgZmxvYXQtZmlyc3QoJGZsb3cpO1xuICB9XG59XG5cbkBtaXhpbiBhbHBoYShcbiAgJGNvbnRleHQ6ICRzdXN5XG4pIHtcbiAgQGluY2x1ZGUgZmlyc3QoJGNvbnRleHQpO1xufVxuXG5cbi8vIExhc3Rcbi8vIC0tLS1cbi8vIC0gWyRjb250ZXh0XTogPHNldHRpbmdzPlxuQG1peGluIGxhc3QoXG4gICRjb250ZXh0OiAkc3VzeVxuKSB7XG4gICRpbnNwZWN0ICA6ICRjb250ZXh0O1xuICAkY29udGV4dCAgOiBwYXJzZS1ncmlkKCRjb250ZXh0KTtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QobGFzdCwgJGluc3BlY3QpO1xuXG4gICRvdXRwdXQ6IChcbiAgICBmbG93OiBzdXN5LWdldChmbG93LCAkY29udGV4dCksXG4gICAgbGFzdC1mbG93OiBzdXN5LWdldChsYXN0LWZsb3csICRjb250ZXh0KSxcbiAgICBtYXJnaW46IGlmKGlzLXNwbGl0KCRjb250ZXh0KSwgbnVsbCwgMCksXG4gICk7XG5cbiAgQGluY2x1ZGUgZmxvYXQtbGFzdCgkb3V0cHV0Li4uKTtcbn1cblxuQG1peGluIG9tZWdhKFxuICAkY29udGV4dDogJHN1c3lcbikge1xuICBAaW5jbHVkZSBsYXN0KCRjb250ZXh0KTtcbn1cblxuXG4vLyBHZXQgRWRnZVxuLy8gLS0tLS0tLS1cbi8vIENhbGN1bGF0ZSBlZGdlIHZhbHVlIGJhc2VkIG9uIGxvY2F0aW9uLCBpZiBwb3NzaWJsZVxuQGZ1bmN0aW9uIGdldC1lZGdlKFxuICAkc3BhblxuKSB7XG4gICRzcGFuICAgICAgIDogcGFyc2Utc3Bhbigkc3Bhbik7XG4gICRlZGdlICAgICAgIDogc3VzeS1nZXQoZWRnZSwgJHNwYW4pO1xuXG4gIEBpZiBub3QoJGVkZ2UpIHtcbiAgICAkY291bnQ6IHN1c3ktY291bnQoc3VzeS1nZXQoY29sdW1ucywgJHNwYW4pKTtcbiAgICAkbG9jYXRpb246IHN1c3ktZ2V0KGxvY2F0aW9uLCAkc3Bhbik7XG4gICAgJG46IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcblxuICAgICRudW1iZXI6IGlmKHR5cGUtb2YoJGxvY2F0aW9uKSA9PSBudW1iZXIsIHRydWUsIGZhbHNlKTtcbiAgICAkaW5kZXg6IGlmKCRudW1iZXIgYW5kIHVuaXRsZXNzKCRsb2NhdGlvbiksIHRydWUsIGZhbHNlKTtcblxuICAgIEBpZiAkbiA9PSAkY291bnQge1xuICAgICAgJGVkZ2U6IGZ1bGw7XG4gICAgfSBAZWxzZSBpZiAkbG9jYXRpb24gYW5kICRuIGFuZCAkaW5kZXgge1xuICAgICAgQGlmICRsb2NhdGlvbiA9PSAxIHtcbiAgICAgICAgJGVkZ2U6IGlmKCRuID09ICRjb3VudCwgZnVsbCwgZmlyc3QpO1xuICAgICAgfSBAZWxzZSBpZiAkbG9jYXRpb24gKyAkbiAtIDEgPT0gJGNvdW50IHtcbiAgICAgICAgJGVkZ2U6IGxhc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQGlmICRlZGdlID09IGFscGhhIG9yICRlZGdlID09IG9tZWdhIHtcbiAgICAkZWRnZTogaWYoJGVkZ2UgPT0gYWxwaGEsIGZpcnN0LCBsYXN0KTtcbiAgfVxuXG4gIEByZXR1cm4gJGVkZ2U7XG59XG5cblxuLy8gR2V0IExvY2F0aW9uXG4vLyAtLS0tLS0tLS0tLS1cbi8vIENhbGN1bGF0ZSBsb2NhdGlvbiB2YWx1ZSBiYXNlZCBvbiBlZGdlLCBpZiBwb3NzaWJsZVxuQGZ1bmN0aW9uIGdldC1sb2NhdGlvbihcbiAgJHNwYW5cbikge1xuICAkc3BhbiAgICAgICA6IHBhcnNlLXNwYW4oJHNwYW4pO1xuICAkbG9jYXRpb24gICA6IHN1c3ktZ2V0KGxvY2F0aW9uLCAkc3Bhbik7XG4gICRlZGdlICAgICAgIDogZ2V0LWVkZ2UoJHNwYW4pO1xuICAkbiAgICAgICAgICA6IHN1c3ktZ2V0KHNwYW4sICRzcGFuKTtcblxuICBAaWYgJGVkZ2UgYW5kIG5vdCgkbG9jYXRpb24pIGFuZCB0eXBlLW9mKCRuKSA9PSBudW1iZXIgYW5kIHVuaXRsZXNzKCRuKSB7XG4gICAgQGlmICRlZGdlID09IGZpcnN0IHtcbiAgICAgICRsb2NhdGlvbjogMTtcbiAgICB9IEBlbHNlIGlmICRlZGdlID09IGxhc3Qge1xuICAgICAgJGxvY2F0aW9uOiBzdXN5LWNvdW50KHN1c3ktZ2V0KGNvbHVtbnMsICRzcGFuKSkgLSAkbiArIDE7XG4gICAgfVxuICB9XG5cbiAgQHJldHVybiAkbG9jYXRpb25cbn1cbiIsIi8vIE1hcmdpbiBTeW50YXhcbi8vID09PT09PT09PT09PT1cblxuLy8gUHJlXG4vLyAtLS1cbi8vIEFkZCBzcGFubmluZy1tYXJnaW5zIGJlZm9yZSBhbiBlbGVtZW50LlxuLy8gLSAkc3BhbiAgOiA8c3Bhbj5cbkBtaXhpbiBwcmUoXG4gICRzcGFuXG4pIHtcbiAgJGluc3BlY3Q6ICRzcGFuO1xuICAkc3BhbiAgIDogbWFwLW1lcmdlKChzcHJlYWQ6IHdpZGUpLCBwYXJzZS1zcGFuKCRzcGFuKSk7XG4gICRmbG93ICAgOiBzdXN5LWdldChmbG93LCAkc3Bhbik7XG4gICRzcGxpdCAgOiBpZihzdXN5LWdldChndXR0ZXItcG9zaXRpb24sICRzcGFuKSA9PSBzcGxpdCwgdHJ1ZSwgZmFsc2UpO1xuICAkZ3V0dGVyIDogZ3V0dGVyKCRzcGFuKTtcbiAgJHNwYW4gICA6IHNwYW4oJHNwYW4pO1xuICAkd2lkdGggIDogaWYoJHNwbGl0IGFuZCAkZ3V0dGVyLCAkc3BhbiArICRndXR0ZXIsICRzcGFuKTtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QocHJlLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIG1hcmdpbi1vdXRwdXQoJHdpZHRoLCBudWxsLCAkZmxvdyk7XG59XG5cbi8vIFBvc3Rcbi8vIC0tLS1cbi8vIEFkZCBzcGFubmluZy1tYXJnaW5zIGFmdGVyIGFuIGVsZW1lbnQuXG4vLyAtICRzcGFuICA6IDxzcGFuPlxuQG1peGluIHBvc3QoXG4gICRzcGFuXG4pIHtcbiAgJGluc3BlY3QgIDogJHNwYW47XG4gICRzcGFuICAgICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3Bhbigkc3BhbikpO1xuICAkZmxvdyAgICAgOiBzdXN5LWdldChmbG93LCAkc3Bhbik7XG4gICRzcGxpdCAgICA6IGlmKHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJHNwYW4pID09IHNwbGl0LCB0cnVlLCBmYWxzZSk7XG4gICR3aWR0aCAgICA6IGlmKCRzcGxpdCwgc3Bhbigkc3BhbikgKyBndXR0ZXIoJHNwYW4pLCBzcGFuKCRzcGFuKSk7XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHBvc3QsICRpbnNwZWN0KTtcbiAgQGluY2x1ZGUgbWFyZ2luLW91dHB1dChudWxsLCAkd2lkdGgsICRmbG93KTtcbn1cblxuLy8gUHVzaFxuLy8gLS0tLVxuLy8gU2ltcGxlIHN5bm9ueW1uIGZvciBwcmUuXG4vLyAtICRzcGFuICA6IDxzcGFuPlxuQG1peGluIHB1c2goXG4gICRzcGFuXG4pIHtcbiAgQGluY2x1ZGUgcHJlKCRzcGFuKTtcbn1cblxuLy8gUHVsbFxuLy8gLS0tLVxuLy8gQWRkIG5lZ2F0aXZlIHNwYW5uaW5nLW1hcmdpbnMgYmVmb3JlIGFuIGVsZW1lbnQuXG4vLyAtICRzcGFuICA6IDxzcGFuPlxuQG1peGluIHB1bGwoXG4gICRzcGFuXG4pIHtcbiAgJGluc3BlY3QgIDogJHNwYW47XG4gICRzcGFuICAgICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3Bhbigkc3BhbikpO1xuICAkZmxvdyAgICAgOiBzdXN5LWdldChmbG93LCAkc3Bhbik7XG4gICRzcGxpdCAgICA6IGlmKHN1c3ktZ2V0KGd1dHRlci1wb3NpdGlvbiwgJHNwYW4pID09IHNwbGl0LCB0cnVlLCBmYWxzZSk7XG4gICR3aWR0aCAgICA6IGlmKCRzcGxpdCwgMCAtIHNwYW4oJHNwYW4pICsgZ3V0dGVyKCRzcGFuKSwgMCAtIHNwYW4oJHNwYW4pKTtcblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QocHVsbCwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBtYXJnaW4tb3V0cHV0KCR3aWR0aCwgbnVsbCwgJGZsb3cpO1xufVxuXG4vLyBTcXVpc2hcbi8vIC0tLS0tLVxuLy8gQWRkIHNwYW5uaW5nLW1hcmdpbnMgYmVmb3JlIGFuZCBhZnRlciBhbiBlbGVtZW50LlxuLy8gLSAkcHJlICAgICA6IDxzcGFuPlxuLy8gLSBbJHBvc3RdICA6IDxzcGFuPlxuQG1peGluIHNxdWlzaChcbiAgJHByZSxcbiAgJHBvc3Q6IGZhbHNlXG4pIHtcbiAgJGluc3BlY3QgICAgICA6ICgkcHJlLCAkcG9zdCk7XG4gICRwcmUgICAgICAgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHByZSkpO1xuXG4gIEBpZiAkcG9zdCB7XG4gICAgJHBvc3Q6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3BhbigkcG9zdCkpO1xuICB9IEBlbHNlIHtcbiAgICAkc3Bhbjogc3VzeS1nZXQoc3BhbiwgJHByZSk7XG4gICAgQGlmIGxlbmd0aCgkc3BhbikgPiAxIHtcbiAgICAgICRwcmU6IG1hcC1tZXJnZSgkcHJlLCAoc3BhbjogbnRoKCRzcGFuLCAxKSkpO1xuICAgICAgJHBvc3Q6IG1hcC1tZXJnZSgkcHJlLCAoc3BhbjogbnRoKCRzcGFuLCAyKSkpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJHBvc3Q6ICRwcmU7XG4gICAgfVxuICB9XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHNxdWlzaCwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBwcmUoJHByZSk7XG4gIEBpbmNsdWRlIHBvc3QoJHBvc3QpO1xufVxuIiwiLy8gUGFkZGluZyBTeW50YXhcbi8vID09PT09PT09PT09PT09XG5cbi8vIFByZWZpeFxuLy8gLS0tLS0tXG4vLyBBZGQgc3Bhbm5pbmctcGFkZGluZyBiZWZvcmUgYW4gZWxlbWVudC5cbi8vIC0gJHNwYW4gIDogPHNwYW4+XG5AbWl4aW4gcHJlZml4KFxuICAkc3BhblxuKSB7XG4gICRpbnNwZWN0ICA6ICRzcGFuO1xuICAkc3BhbiAgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJHNwYW4pKTtcbiAgJGZsb3cgICAgIDogc3VzeS1nZXQoZmxvdywgJHNwYW4pO1xuICAkd2lkdGggICAgOiBzcGFuKCRzcGFuKTtcblxuICBAaWYgaXMtaW5zaWRlKCRzcGFuKSB7XG4gICAgJGd1dHRlcjogZ3V0dGVyKCRzcGFuKTtcbiAgICAkd2lkdGg6IGlmKCRndXR0ZXIgYW5kIGNvbXBhcmFibGUoJHdpZHRoLCAkZ3V0dGVyKSwgJHdpZHRoICsgJGd1dHRlciwgJHdpZHRoKTtcbiAgfVxuXG4gIEBpbmNsdWRlIHN1c3ktaW5zcGVjdChwcmVmaXgsICRpbnNwZWN0KTtcbiAgQGluY2x1ZGUgcGFkZGluZy1vdXRwdXQoJHdpZHRoLCBudWxsLCAkZmxvdyk7XG59XG5cbi8vIFN1ZmZpeFxuLy8gLS0tLS0tXG4vLyBBZGQgc3Bhbm5pbmctcGFkZGluZyBhZnRlciBhbiBlbGVtZW50LlxuLy8gLSAkc3BhbiAgOiA8c3Bhbj5cbkBtaXhpbiBzdWZmaXgoXG4gICRzcGFuXG4pIHtcbiAgJGluc3BlY3QgIDogJHNwYW47XG4gICRzcGFuICAgICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3Bhbigkc3BhbikpO1xuICAkZmxvdyAgICAgOiBzdXN5LWdldChmbG93LCAkc3Bhbik7XG4gICR3aWR0aCAgICA6IHNwYW4oJHNwYW4pO1xuXG4gIEBpZiBpcy1pbnNpZGUoJHNwYW4pIHtcbiAgICAkZ3V0dGVyOiBndXR0ZXIoJHNwYW4pO1xuICAgICR3aWR0aDogaWYoJGd1dHRlciBhbmQgY29tcGFyYWJsZSgkd2lkdGgsICRndXR0ZXIpLCAkd2lkdGggKyAkZ3V0dGVyLCAkd2lkdGgpO1xuICB9XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KHN1ZmZpeCwgJGluc3BlY3QpO1xuICBAaW5jbHVkZSBwYWRkaW5nLW91dHB1dChudWxsLCAkd2lkdGgsICRmbG93KTtcbn1cblxuLy8gUGFkXG4vLyAtLS1cbi8vIEFkZCBzcGFubmluZy1wYWRkaW5nIGJlZm9yZSBhbmQgYWZ0ZXIgYW4gZWxlbWVudC5cbi8vIC0gJHByZSAgICAgOiA8c3Bhbj5cbi8vIC0gWyRwb3N0XSAgOiA8c3Bhbj5cbkBtaXhpbiBwYWQoXG4gICRwcmUsXG4gICRwb3N0OiBmYWxzZVxuKSB7XG4gICRpbnNwZWN0ICA6ICgkcHJlLCAkcG9zdCk7XG4gICRwcmUgICAgICA6IG1hcC1tZXJnZSgoc3ByZWFkOiB3aWRlKSwgcGFyc2Utc3BhbigkcHJlKSk7XG5cbiAgQGlmICRwb3N0IHtcbiAgICAkcG9zdDogbWFwLW1lcmdlKChzcHJlYWQ6IHdpZGUpLCBwYXJzZS1zcGFuKCRwb3N0KSk7XG4gIH0gQGVsc2Uge1xuICAgICRzcGFuOiBzdXN5LWdldChzcGFuLCAkcHJlKTtcbiAgICBAaWYgbGVuZ3RoKCRzcGFuKSA+IDEge1xuICAgICAgJHByZTogbWFwLW1lcmdlKCRwcmUsIChzcGFuOiBudGgoJHNwYW4sIDEpKSk7XG4gICAgICAkcG9zdDogbWFwLW1lcmdlKCRwcmUsIChzcGFuOiBudGgoJHNwYW4sIDIpKSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAkcG9zdDogJHByZTtcbiAgICB9XG4gIH1cblxuICBAaW5jbHVkZSBzdXN5LWluc3BlY3QocGFkLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIHByZWZpeCgkcHJlKTtcbiAgQGluY2x1ZGUgc3VmZml4KCRwb3N0KTtcblxufVxuIiwiLy8gQmxlZWQgU3ludGF4XG4vLyA9PT09PT09PT09PT1cblxuLy8gQmxlZWRcbi8vIC0tLS0tXG4vLyBBZGQgbmVnYXRpdmUgbWFyZ2lucywgYW5kIGVxdWFsIHBvc2l0aXZlIHBhZGRpbmcgdG8gY3JlYXRlIGJsZWVkLlxuLy8gLSAkYmxlZWQgIDogPHNwYW4+XG5AbWl4aW4gYmxlZWQoXG4gICRibGVlZDogMCBndXR0ZXIoKVxuKSB7XG4gICRpbnNwZWN0ICA6ICRibGVlZDtcbiAgJG91dHB1dCAgIDogZ2V0LWJsZWVkKCRibGVlZCk7XG5cbiAgQGlmIHN1c3ktZ2V0KGdsb2JhbC1ib3gtc2l6aW5nKSAhPSBjb250ZW50LWJveCB7XG4gICAgJG91dHB1dDogbWFwLW1lcmdlKChib3gtc2l6aW5nOiBjb250ZW50LWJveCksICRvdXRwdXQpO1xuICB9XG5cbiAgQGluY2x1ZGUgc3VzeS1pbnNwZWN0KGJsZWVkLCAkaW5zcGVjdCk7XG4gIEBpbmNsdWRlIG91dHB1dCgkb3V0cHV0KTtcbn1cblxuXG4vLyBCbGVlZC14XG4vLyAtLS0tLS0tXG4vLyBTaG9ydGN1dCBmb3IgaG9yaXpvbnRhbCBibGVlZC5cbi8vIC0gJGJsZWVkICA6IDxzcGFuPlxuQG1peGluIGJsZWVkLXgoXG4gICRibGVlZDogZ3V0dGVyKClcbikge1xuICAkYmxlZWQgIDogcGFyc2Utc3BhbigkYmxlZWQpO1xuICAkdHJibCAgIDogc3VzeS1nZXQoc3BhbiwgJGJsZWVkKTtcblxuICBAaWYgbGVuZ3RoKCR0cmJsKSA9PSAxIHtcbiAgICAkYmxlZWQ6IG1hcC1tZXJnZSgkYmxlZWQsIChzcGFuOiAwIG50aCgkdHJibCwgMSkpKTtcbiAgfSBAZWxzZSBpZiBsZW5ndGgoJHRyYmwpID09IDIge1xuICAgICRibGVlZDogbWFwLW1lcmdlKCRibGVlZCwgKHNwYW46IDAgbnRoKCR0cmJsLCAyKSAwIG50aCgkdHJibCwgMSkpKTtcbiAgfSBAZWxzZSB7XG4gICAgQHdhcm4gJ2JsZWVkLXggb25seSB0YWtlcyAyIGxlbmd0aHMsIGJ1dCAje2xlbmd0aCgkdHJibCl9IHdlcmUgcGFzc2VkLic7XG4gIH1cblxuICBAaW5jbHVkZSBibGVlZCgkYmxlZWQpO1xufVxuXG5cbi8vIEJsZWVkLXlcbi8vIC0tLS0tLS1cbi8vIFNob3J0Y3V0IGZvciB2ZXJ0aWNhbCBibGVlZC5cbi8vIC0gJGJsZWVkICA6IDxzcGFuPlxuQG1peGluIGJsZWVkLXkoXG4gICRibGVlZDogaWYoZnVuY3Rpb24tZXhpc3RzKHJoeXRobSksIHJoeXRobSgxKSwgMWVtKVxuKSB7XG4gICRibGVlZCAgOiBwYXJzZS1zcGFuKCRibGVlZCk7XG4gICR0cmJsICAgOiBzdXN5LWdldChzcGFuLCAkYmxlZWQpO1xuXG4gIEBpZiBsZW5ndGgoJHRyYmwpID09IDEge1xuICAgICRibGVlZDogbWFwLW1lcmdlKCRibGVlZCwgKHNwYW46IG50aCgkdHJibCwgMSkgMCkpO1xuICB9IEBlbHNlIGlmIGxlbmd0aCgkdHJibCkgPT0gMiB7XG4gICAgJGJsZWVkOiBtYXAtbWVyZ2UoJGJsZWVkLCAoc3BhbjogbnRoKCR0cmJsLCAxKSAwIG50aCgkdHJibCwgMikgMCkpO1xuICB9IEBlbHNlIHtcbiAgICBAd2FybiAnYmxlZWQteSBvbmx5IHRha2VzIDIgbGVuZ3RocywgYnV0ICN7bGVuZ3RoKCR0cmJsKX0gd2VyZSBwYXNzZWQuJztcbiAgfVxuXG4gIEBpbmNsdWRlIGJsZWVkKCRibGVlZCk7XG59XG5cblxuLy8gR2V0IEJsZWVkXG4vLyAtLS0tLS0tLS1cbi8vIFJldHVybiBibGVlZCBvdXRwdXQgdmFsdWVzXG4vLyAtICRibGVlZDogPHNwYW4+XG5AZnVuY3Rpb24gZ2V0LWJsZWVkKFxuICAkYmxlZWRcbikge1xuICAkYmxlZWQgICAgOiBtYXAtbWVyZ2UoKHNwcmVhZDogd2lkZSksIHBhcnNlLXNwYW4oJGJsZWVkKSk7XG4gICR0cmJsICAgICA6IHN1c3ktZ2V0KHNwYW4sICRibGVlZCk7XG4gICRzaG9ydCAgICA6IG51bGw7XG4gICRvdXRwdXQgICA6ICgpO1xuXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCR0cmJsKSB7XG4gICAgJHRoaXM6IG50aCgkdHJibCwgJGkpO1xuICAgICRuZXc6ICgpO1xuICAgICRtYXJnaW46IG51bGw7XG4gICAgJHBhZGRpbmc6IG51bGw7XG4gICAgJHBhZGRpbmcteDogbnVsbDtcblxuICAgIEBpZiAkdGhpcyA+IDAge1xuICAgICAgJHRoaXM6IG1hcC1tZXJnZSgkYmxlZWQsIChzcGFuOiAkdGhpcykpO1xuICAgICAgJG1hcmdpbjogc3BhbigkdGhpcyk7XG4gICAgICAkcGFkZGluZzogJG1hcmdpbjtcbiAgICAgICRwYWRkaW5nLXg6ICRwYWRkaW5nO1xuICAgIH1cblxuICAgIEBpZiAkbWFyZ2luIGFuZCAkbWFyZ2luID4gMCB7XG4gICAgICAkbWFyZ2luOiAtICRtYXJnaW47XG5cbiAgICAgIEBpZiBpcy1pbnNpZGUoJHRoaXMpIHtcbiAgICAgICAgJGd1dHRlcjogZ3V0dGVyKCR0aGlzKTtcbiAgICAgICAgJGpvaW46IGlmKCRndXR0ZXIgYW5kIGNvbXBhcmFibGUoJHBhZGRpbmcsICRndXR0ZXIpLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICRwYWRkaW5nLXg6IGlmKCRqb2luIGFuZCAkcGFkZGluZyA+IDAsICRwYWRkaW5nICsgJGd1dHRlciwgJHBhZGRpbmcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBpZiAkaSA9PSAxIHtcbiAgICAgICRuZXc6IChcbiAgICAgICAgbWFyZ2luLXRvcDogJG1hcmdpbixcbiAgICAgICAgcGFkZGluZy10b3A6ICRwYWRkaW5nLFxuICAgICAgICBtYXJnaW4tcmlnaHQ6ICRtYXJnaW4sXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6ICRwYWRkaW5nLXgsXG4gICAgICAgIG1hcmdpbi1ib3R0b206ICRtYXJnaW4sXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAkcGFkZGluZyxcbiAgICAgICAgbWFyZ2luLWxlZnQ6ICRtYXJnaW4sXG4gICAgICAgIHBhZGRpbmctbGVmdDogJHBhZGRpbmcteCxcbiAgICAgICk7XG4gICAgfSBAZWxzZSBpZiAkaSA9PSAyIHtcbiAgICAgICRuZXc6IChcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAkbWFyZ2luLFxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkcGFkZGluZy14LFxuICAgICAgICBtYXJnaW4tbGVmdDogJG1hcmdpbixcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAkcGFkZGluZy14LFxuICAgICAgKTtcbiAgICB9IEBlbHNlIGlmICRpID09IDMge1xuICAgICAgJG5ldzogKFxuICAgICAgICBtYXJnaW4tYm90dG9tOiAkbWFyZ2luLFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogJHBhZGRpbmcsXG4gICAgICApO1xuICAgIH0gQGVsc2UgaWYgJGkgPT0gNCB7XG4gICAgICAkbmV3OiAoXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAkbWFyZ2luLFxuICAgICAgICBwYWRkaW5nLWxlZnQ6ICRwYWRkaW5nLXgsXG4gICAgICApO1xuICAgIH1cblxuICAgICRvdXRwdXQ6IG1hcC1tZXJnZSgkb3V0cHV0LCAkbmV3KTtcbiAgfVxuXG4gIEBlYWNoICRwcm9wLCAkdmFsdWUgaW4gJG91dHB1dCB7XG4gICAgJG91dHB1dDogaWYoJHZhbHVlID09IDAsIG1hcC1tZXJnZSgkb3V0cHV0LCAoJHByb3A6IG51bGwpKSwgJG91dHB1dCk7XG4gIH1cblxuICBAcmV0dXJuIGJsZWVkLXNob3J0aGFuZCgkb3V0cHV0KTtcbn1cblxuLy8gQmxlZWQgU2hvcnRoYW5kXG4vLyAtLS0tLS0tLS0tLS0tLS1cbi8vIENvbnZlcnQgYmxlZWQgb3V0cHV0IGludG8gc2hvcnRoYW5kIHdoZW4gcG9zc2libGUuXG4vLyAtICRibGVlZDogPG91dHB1dCBtYXA+XG5AZnVuY3Rpb24gYmxlZWQtc2hvcnRoYW5kKFxuICAkYmxlZWRcbikge1xuICAkbWFyZ2luOiAoKTtcbiAgJHBhZGRpbmc6ICgpO1xuICAkcmV0dXJuOiAoKTtcblxuICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJGJsZWVkIHtcbiAgICBAaWYgc3RyLWluZGV4KCRrZXksIG1hcmdpbikge1xuICAgICAgJG1hcmdpbjogbWFwLW1lcmdlKCRtYXJnaW4sICgka2V5OiAkdmFsdWUpKTtcbiAgICB9IEBlbHNlIGlmIHN0ci1pbmRleCgka2V5LCBwYWRkaW5nKSA+IDAge1xuICAgICAgJHBhZGRpbmc6IG1hcC1tZXJnZSgkcGFkZGluZywgKCRrZXk6ICR2YWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gICRwcm9wczogKFxuICAgIG1hcmdpbjogJG1hcmdpbixcbiAgICBwYWRkaW5nOiAkcGFkZGluZyxcbiAgKTtcblxuICBAZWFjaCAkbmFtZSwgJG1hcCBpbiAkcHJvcHMge1xuICAgICRmb3VyOiBpZihsZW5ndGgobWFwLWtleXMoJG1hcCkpID09IDQsIHRydWUsIGZhbHNlKTtcbiAgICAkbnVsbDogaWYoaW5kZXgobWFwLXZhbHVlcygkbWFwKSwgbnVsbCksIHRydWUsIGZhbHNlKTtcblxuICAgIEBpZiAkZm91ciBhbmQgbm90KCRudWxsKSB7XG4gICAgICAkdG9wOiBtYXAtZ2V0KCRtYXAsICcjeyRuYW1lfS10b3AnKTtcbiAgICAgICRyaWdodDogbWFwLWdldCgkbWFwLCAnI3skbmFtZX0tcmlnaHQnKTtcbiAgICAgICRib3R0b206IG1hcC1nZXQoJG1hcCwgJyN7JG5hbWV9LWJvdHRvbScpO1xuICAgICAgJGxlZnQ6IG1hcC1nZXQoJG1hcCwgJyN7JG5hbWV9LWxlZnQnKTtcblxuICAgICAgJHRiOiBpZigkdG9wID09ICRib3R0b20sICR0b3AsIG51bGwpO1xuICAgICAgJHJsOiBpZigkcmlnaHQgPT0gJGxlZnQsICRyaWdodCwgbnVsbCk7XG4gICAgICAkYWxsOiBpZigkdGIgPT0gJHJsLCAkdGIsIG51bGwpO1xuXG4gICAgICAkbmV3OiBpZigkYWxsLCAkYWxsLCBudWxsKTtcblxuICAgICAgQGlmIG5vdCgkbmV3KSB7XG4gICAgICAgIEBpZiAkdGIgYW5kICRybCB7XG4gICAgICAgICAgJG5ldzogJHRiICRybDtcbiAgICAgICAgfSBAZWxzZSBpZiAkcmwge1xuICAgICAgICAgICRuZXc6ICR0b3AgJHJsICRib3R0b207XG4gICAgICAgIH0gQGVsc2Uge1xuICAgICAgICAgICRuZXc6ICR0b3AgJHJpZ2h0ICRib3R0b20gJGxlZnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJHJldHVybjogbWFwLW1lcmdlKCRyZXR1cm4sICgkbmFtZTogJG5ldykpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJHJldHVybjogbWFwLW1lcmdlKCRyZXR1cm4sICRtYXApO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJHJldHVybjtcbn1cbiIsIi8vIEJyZWFrcG9pbnQgSW50ZWdyYXRpb25cbi8vID09PT09PT09PT09PT09PT09PT09PT1cblxuJHN1c3ktbWVkaWE6ICgpICFkZWZhdWx0O1xuJHN1c3ktbWVkaWEtZmFsbGJhY2s6IGZhbHNlICFkZWZhdWx0O1xuXG4kX3N1c3ktbWVkaWEtY29udGV4dDogKCk7XG5cblxuLy8gU3VzeSBCcmVha3BvaW50XG4vLyAtLS0tLS0tLS0tLS0tLS1cbi8vIENoYW5nZSBncmlkcyBhdCBkaWZmZXJlbnQgbWVkaWEgcXVlcnkgYnJlYWtwb2ludHMuXG4vLyAtICRxdWVyeSAgICAgOiA8bWluLXdpZHRoPiBbPG1heC13aWR0aD5dIHwgPHByb3BlcnR5PiA8dmFsdWU+IHwgPG1hcD5cbi8vIC0gJGxheW91dCAgICA6IDxzZXR0aW5ncz5cbi8vIC0gJG5vLXF1ZXJ5ICA6IDxib29sZWFuPiB8IDxzZWxlY3Rvcj5cbkBtaXhpbiBzdXN5LWJyZWFrcG9pbnQoXG4gICRxdWVyeSxcbiAgJGxheW91dDogZmFsc2UsXG4gICRuby1xdWVyeTogJHN1c3ktbWVkaWEtZmFsbGJhY2tcbikge1xuICBAaW5jbHVkZSBzdXN5LW1lZGlhLXJvdXRlcigkcXVlcnksICRuby1xdWVyeSkge1xuICAgIEBpZiAkbGF5b3V0IHtcbiAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRsYXlvdXQpIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSBAZWxzZSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuXG4vLyBTdXN5IE1lZGlhXG4vLyAtLS0tLS0tLS0tXG4vLyAtICRxdWVyeTogPG1pbi13aWR0aD4gWzxtYXgtd2lkdGg+XSB8IDxwcm9wZXJ0eT4gPHZhbHVlPlxuLy8gLSAkbm8tcXVlcnk6IDxib29sZWFuPiB8IDxzZWxlY3Rvcj5cbkBtaXhpbiBzdXN5LW1lZGlhKFxuICAkcXVlcnksXG4gICRuby1xdWVyeTogJHN1c3ktbWVkaWEtZmFsbGJhY2tcbikge1xuICAkb2xkLWNvbnRleHQ6ICRfc3VzeS1tZWRpYS1jb250ZXh0O1xuICAkbmFtZTogaWYobWFwLWhhcy1rZXkoJHN1c3ktbWVkaWEsICRxdWVyeSksICRxdWVyeSwgbnVsbCk7XG4gICRxdWVyeTogc3VzeS1nZXQtbWVkaWEoJHF1ZXJ5KTtcbiAgJHF1ZXJ5OiBzdXN5LXBhcnNlLW1lZGlhKCRxdWVyeSk7XG5cbiAgQGluY2x1ZGUgc3VzeS1tZWRpYS1jb250ZXh0KCRxdWVyeSwgJG5hbWUpO1xuXG4gIEBpZiAkbm8tcXVlcnkgYW5kIHR5cGUtb2YoJG5vLXF1ZXJ5KSAhPSBzdHJpbmcge1xuICAgIEBjb250ZW50O1xuICB9IEBlbHNlIHtcbiAgICBAbWVkaWEgI3tzdXN5LXJlbmRlci1tZWRpYSgkcXVlcnkpfSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG5cbiAgICBAaWYgdHlwZS1vZigkbm8tcXVlcnkpID09IHN0cmluZyB7XG4gICAgICAjeyRuby1xdWVyeX0gJiB7XG4gICAgICAgIEBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBpbmNsdWRlIHN1c3ktbWVkaWEtY29udGV4dCgkb2xkLWNvbnRleHQsICRjbGVhbjogdHJ1ZSk7XG59XG5cblxuLy8gTWVkaWEgUm91dGVyXG4vLyAtLS0tLS0tLS0tLS1cbi8vIFJvdXQgbWVkaWEgYXJndW1lbnRzIHRvIHRoZSBjb3JyZWN0IG1peGluLlxuQG1peGluIHN1c3ktbWVkaWEtcm91dGVyKFxuICAkcXVlcnksXG4gICRuby1xdWVyeTogJHN1c3ktbWVkaWEtZmFsbGJhY2tcbikge1xuICBAaWYgc3VzeS1zdXBwb3J0KGJyZWFrcG9pbnQsIChtaXhpbjogYnJlYWtwb2ludCksICR3YXJuOiBmYWxzZSkge1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQoJHF1ZXJ5LCAkbm8tcXVlcnkpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgc3VzeS1tZWRpYSgkcXVlcnksICRuby1xdWVyeSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cblxuLy8gVXBkYXRlIENvbnRleHRcbi8vIC0tLS0tLS0tLS0tLS1cbi8vIFNldCB0aGUgbmV3IG1lZGlhIGNvbnRleHRcbkBtaXhpbiBzdXN5LW1lZGlhLWNvbnRleHQoXG4gICRxdWVyeSxcbiAgJG5hbWU6IG51bGwsXG4gICRjbGVhbjogZmFsc2Vcbikge1xuICAkcXVlcnk6IG1hcC1tZXJnZSgobmFtZTogJG5hbWUpLCAkcXVlcnkpO1xuXG4gIEBpZiAkY2xlYW4ge1xuICAgICRfc3VzeS1tZWRpYS1jb250ZXh0OiAkcXVlcnkgIWdsb2JhbDtcbiAgfSBAZWxzZSB7XG4gICAgJF9zdXN5LW1lZGlhLWNvbnRleHQ6IG1hcC1tZXJnZSgkX3N1c3ktbWVkaWEtY29udGV4dCwgJHF1ZXJ5KSAhZ2xvYmFsO1xuICB9XG59XG5cblxuLy8gTWVkaWEgQ29udGV4dFxuLy8gLS0tLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHRoZSBmdWxsIG1lZGlhIGNvbnRleHQsIG9yIGEgc2luZ2xlIG1lZGlhIHByb3BlcnR5IChlLmcuIG1pbi13aWR0aClcbkBmdW5jdGlvbiBzdXN5LW1lZGlhLWNvbnRleHQoXG4gICRwcm9wZXJ0eTogZmFsc2Vcbikge1xuICBAaWYgJHByb3BlcnR5IHtcbiAgICBAcmV0dXJuIG1hcC1nZXQoJF9zdXN5LW1lZGlhLWNvbnRleHQsICRwcm9wZXJ0eSk7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gJF9zdXN5LW1lZGlhLWNvbnRleHQ7XG4gIH1cbn1cblxuXG4vLyBHZXQgTWVkaWFcbi8vIC0tLS0tLS0tLVxuLy8gUmV0dXJuIGEgbmFtZWQgbWVkaWEtcXVlcnkgZnJvbSAkc3VzeS1tZWRpYS5cbi8vIC0gJG5hbWU6IDxrZXk+XG5AZnVuY3Rpb24gc3VzeS1nZXQtbWVkaWEoXG4gICRuYW1lXG4pIHtcbiAgQGlmIG1hcC1oYXMta2V5KCRzdXN5LW1lZGlhLCAkbmFtZSkge1xuICAgICRtYXAtdmFsdWU6IG1hcC1nZXQoJHN1c3ktbWVkaWEsICRuYW1lKTtcbiAgICBAaWYgKCRuYW1lID09ICRtYXAtdmFsdWUpIHtcbiAgICAgICRuYW1lOiAkbWFwLXZhbHVlO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJG5hbWU6IHN1c3ktZ2V0LW1lZGlhKCRtYXAtdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJG5hbWU7XG59XG5cblxuLy8gUmVuZGVyIE1lZGlhXG4vLyAtLS0tLS0tLS0tLS1cbi8vIEJ1aWxkIGEgbWVkaWEtcXVlcnkgc3RyaW5nIGZyb20gdmFyaW91cyBtZWRpYSBzZXR0aW5nc1xuQGZ1bmN0aW9uIHN1c3ktcmVuZGVyLW1lZGlhKFxuICAkcXVlcnlcbikge1xuICAkb3V0cHV0OiBudWxsO1xuICBAZWFjaCAkcHJvcGVydHksICR2YWx1ZSBpbiAkcXVlcnkge1xuICAgICRzdHJpbmc6IG51bGw7XG5cbiAgICBAaWYgJHByb3BlcnR5ID09IG1lZGlhIHtcbiAgICAgICRzdHJpbmc6ICR2YWx1ZTtcbiAgICB9IEBlbHNlIHtcbiAgICAgICRzdHJpbmc6ICcoI3skcHJvcGVydHl9OiAjeyR2YWx1ZX0pJztcbiAgICB9XG5cbiAgICAkb3V0cHV0OiBpZigkb3V0cHV0LCAnI3skb3V0cHV0fSBhbmQgI3skc3RyaW5nfScsICRzdHJpbmcpO1xuICB9XG5cbiAgQHJldHVybiAkb3V0cHV0O1xufVxuXG5cbi8vIFBhcnNlIE1lZGlhXG4vLyAtLS0tLS0tLS0tLVxuLy8gUmV0dXJuIHBhcnNlZCBtZWRpYS1xdWVyeSBzZXR0aW5ncyBiYXNlZCBvbiBzaG9ydGhhbmRcbkBmdW5jdGlvbiBzdXN5LXBhcnNlLW1lZGlhKFxuICAkcXVlcnlcbikge1xuICAkbXE6IG51bGw7XG4gIEBpZiB0eXBlLW9mKCRxdWVyeSkgPT0gbWFwIHtcbiAgICAkbXE6ICRxdWVyeTtcbiAgfSBAZWxzZSBpZiB0eXBlLW9mKCRxdWVyeSkgPT0gbnVtYmVyIHtcbiAgICAkbXE6IChtaW4td2lkdGg6ICRxdWVyeSk7XG4gIH0gQGVsc2UgaWYgdHlwZS1vZigkcXVlcnkpID09IGxpc3QgYW5kIGxlbmd0aCgkcXVlcnkpID09IDIge1xuICAgIEBpZiB0eXBlLW9mKG50aCgkcXVlcnksIDEpKSA9PSBudW1iZXIge1xuICAgICAgJG1xOiAoXG4gICAgICAgIG1pbi13aWR0aDogbWluKCRxdWVyeS4uLiksXG4gICAgICAgIG1heC13aWR0aDogbWF4KCRxdWVyeS4uLiksXG4gICAgICApO1xuICAgIH0gQGVsc2Uge1xuICAgICAgJG1xOiAobnRoKCRxdWVyeSwgMSk6IG50aCgkcXVlcnksIDIpKTtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgICRtcTogKG1lZGlhOiAnI3skcXVlcnl9Jyk7XG4gIH1cblxuICBAcmV0dXJuICRtcTtcbn1cbiIsIi8vIE1hcHB5IGJyZWFrcG9pbnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3V0cHV0IG1lZGlhIHF1ZXJ5IHdpdGggZm9jdXMgb24gbWluLXdpZHRoLCBtYXgtd2lkdGgsIG1pbi1oZWlnaHQgYW5kIG1heC1oZWlnaHQuXG4vLyBPdGhlciBtZWRpYSBydWxlcyBhcmUgcGFzc2VkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgaW4gYSBtYXBcbi8vXG4vLyBAYXV0aG9yIFplbGwgTGlld1xuLy8gPT09PT09PT09PT09PT09PT1cbiRicmVha3BvaW50czogKCkgIWRlZmF1bHQ7XG4kbWFwcHktcXVlcmllczogKCkgIWRlZmF1bHQ7XG5cbi8vIE1hcHB5IEJQIFtNaXhpbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS1cbi8vIC0gJHF1ZXJpZXMgICAgICAgICA6IDxzdHJpbmc+IG9yIDxudW1iZXI+IGluIHRoZSBmb3JtYXQ6XG4vLyAgICAgICAgICAgICAgICAgICAgICA8bWluLXdpZHRoPiA8bWF4LXdpZHRoPiBoIDxtaW4taGVpZ2h0PiA8bWF4LWhlaWdodD4gPGtleT4gPHZhbHVlPlxuLy8gLSAkdHlwZSAgICAgICAgICAgIDogPG1lZGlhLXR5cGU+XG4vLyAtICRxdWVyeS1mYWxsYmFjayAgOiA8c3RyaW5nPiBzZWxlY3RvciBjbGFzc1xuLy8gLSAkYnJlYWtwb2ludHMgICAgIDogPG1hcD5cbkBtaXhpbiBtYXBweS1icCgkcXVlcmllcywgJHR5cGU6IGFsbCwgJHF1ZXJ5LWZhbGxiYWNrOiBudWxsLCAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cykge1xuXG4gIC8vIEdldHMgbWFwcHkgbWFwIHRocm91Z2ggbWFwcHktYnAgZm5cbiAgJG1hcHB5LW1hcDogbWFwcHktYnAoJHF1ZXJpZXMsICR0eXBlLCAkcXVlcnktZmFsbGJhY2ssICRicmVha3BvaW50cyk7XG5cbiAgLy8gT3V0cHV0cyBtZWRpYSBzdHJpbmdcbiAgQG1lZGlhICN7bWFwLWdldCgkbWFwcHktbWFwLCB0eXBlKX0gYW5kICN7bWFwLWdldCgkbWFwcHktbWFwLCBtZWRpYS1zdHJpbmcpfSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cblxuICAvLyBJZiBhIHF1ZXJ5IGZhbGxiYWNrIGlzIHByb3ZpZGVkXG4gIEBpZiAkcXVlcnktZmFsbGJhY2sge1xuICAgICN7JHF1ZXJ5LWZhbGxiYWNrfSAmIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLyBNYXBweSBRdWVyeSBbTWl4aW5dXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPdXRwdXQgcXVlcnkgZnJvbSAkbWFwcHktcXVlcmllcyBtYXAuXG4vLyAkcXVlcnkgOiA8c3RyaW5nPiBmcm9tICRtYXBweS1xdWVyaWVzIGtleVxuQG1peGluIG1hcHB5LXF1ZXJ5KCRxdWVyeSwgJG1hcHB5LXF1ZXJpZXM6ICRtYXBweS1xdWVyaWVzKSB7XG4gIEBpZiBub3QgbWFwLWhhcy1rZXkoJG1hcHB5LXF1ZXJpZXMsICRxdWVyeSkge1xuICAgIEBlcnJvciBcIiN7JG1hcHB5LXF1ZXJpZXN9IGRvZXMgbm90IGNvbnRhaW4gI3skcXVlcnl9XCI7XG4gIH1cblxuICAkbWFwcHktbWFwOiBtYXAtZ2V0KCRtYXBweS1xdWVyaWVzLCAkcXVlcnkpO1xuXG4gIEBtZWRpYSAje21hcC1nZXQoJG1hcHB5LW1hcCwgdHlwZSl9IGFuZCAje21hcC1nZXQoJG1hcHB5LW1hcCwgbWVkaWEtc3RyaW5nKX0ge1xuICAgIEBjb250ZW50O1xuICB9XG5cbiAgLy8gSWYgYSBxdWVyeSBmYWxsYmFjayBpcyBwcm92aWRlZFxuICBAaWYgbWFwLWdldCgkbWFwcHktbWFwLCBxdWVyeS1mYWxsYmFjaykge1xuICAgICN7bWFwLWdldCgkbWFwcHktbWFwLCBxdWVyeS1mYWxsYmFjayl9ICYge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cbi8vIE1hcHB5IEJQIFtGdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFJldHVybnMgYSBtYXAgd2l0aCAzIGtleXNcbi8vIC0gdHlwZSAgICAgICAgICAgOiBNZWRpYSB0eXBlXG4vLyAtIG1lZGlhLXN0cmluZyAgIDogbWVkaWEgcXVlcnkgc3RyaW5nXG4vLyAtIHF1ZXJ5LWZhbGxiYWNrIDogcXVlcnkgZmFsbGJhY2sgKGlmIGFueSlcbkBmdW5jdGlvbiBtYXBweS1icCgkcXVlcmllcywgJHR5cGU6IGFsbCwgJHF1ZXJ5LWZhbGxiYWNrOiBudWxsLCAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cykge1xuICAkbWVkaWEtc3RyaW5nOiAoKTtcbiAgJF9yZXR1cm46ICgpO1xuICAkbWVkaWEtbWFwOiBwYXJzZS1icCgkcXVlcmllcywgJGJyZWFrcG9pbnRzKTtcblxuICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJG1lZGlhLW1hcCB7XG4gICAgQGlmICR2YWx1ZSBhbmQgJHZhbHVlICE9IDAge1xuICAgICAgQGlmICRtZWRpYS1zdHJpbmcgPT0gKCgpKSB7XG4gICAgICAgICRtZWRpYS1zdHJpbmc6IGFwcGVuZCgkbWVkaWEtc3RyaW5nLCB1bnF1b3RlKFwiKCN7JGtleX06ICN7JHZhbHVlfSlcIikpO1xuICAgICAgfVxuXG4gICAgICBAZWxzZSB7XG4gICAgICAgICRtZWRpYS1zdHJpbmc6IGFwcGVuZCgkbWVkaWEtc3RyaW5nLCB1bnF1b3RlKFwiYW5kICgjeyRrZXl9OiAjeyR2YWx1ZX0pXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgJF9yZXR1cm46IChcbiAgICB0eXBlOiAkdHlwZSxcbiAgICBtZWRpYS1zdHJpbmc6IGltcGxvZGUoJG1lZGlhLXN0cmluZyksXG4gICAgcXVlcnktZmFsbGJhY2s6ICRxdWVyeS1mYWxsYmFja1xuICApO1xuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cbi8vIEJQIFtNaXhpbl1cbi8vIC0tLS0tLS0tLS1cbi8vIENvbnZlbmllbmNlIG1peGluIGZvciBNYXBweSBCcmVha3BvaW50c1xuQG1peGluIGJwKCRxdWVyaWVzLCAkdHlwZTogYWxsLCAkcXVlcnktZmFsbGJhY2s6IG51bGwsICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzKSB7XG4gIEBpbmNsdWRlIG1hcHB5LWJwKCRxdWVyaWVzLCAkdHlwZSwgJHF1ZXJ5LWZhbGxiYWNrLCAkYnJlYWtwb2ludHMpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyBQYXJzZSBCUCBbZnVuY3Rpb25dXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQYXJzZXMgYXJndW1lbnRzIGFuZCByZXR1cm5zIGEgbWFwIHdpdGggNCBrZXlzXG5AZnVuY3Rpb24gcGFyc2UtYnAoJHF1ZXJpZXMsICRicmVha3BvaW50cykge1xuICAkX3JldHVybjogKCk7XG4gICRfaTogMTtcbiAgJF9taW53OiBudWxsO1xuICAkX21heHc6IG51bGw7XG4gICRfbWluaDogbnVsbDtcbiAgJF9tYXhoOiBudWxsO1xuICAkX2xlbmd0aDogbGVuZ3RoKCRxdWVyaWVzKTtcblxuICAvLyBDaGVja3MgZm9yIHdpZHRoIHF1ZXJpZXNcbiAgJF9taW53OiBudGgoJHF1ZXJpZXMsIDEpO1xuICAkX21pbnc6IG1hcHB5LXZhbGlkYXRlKCRfbWludywgJGJyZWFrcG9pbnRzKTtcblxuICAvLyBDaGVjayBmb3Igd2lkdGggcXVlcmllc1xuICBAaWYgJF9taW53IHtcbiAgICAkX21pbnc6IG1hcHB5LWNvbnZlcnQtdG8tZW0oJF9taW53KTtcbiAgICAkX3JldHVybjogbWFwLW1lcmdlKCRfcmV0dXJuLCAobWluLXdpZHRoOiAkX21pbncpKTtcbiAgICAkcXVlcmllczogc2V0LW50aCgkcXVlcmllcywgMSwgbnVsbCk7XG4gIH1cblxuICAvLyBDaGVja3MgaWYgdGhlcmUgaXMgYSBtYXggd2lkdGggcXVlcnlcbiAgQGlmICRfbWludyBhbmQgJF9sZW5ndGggPj0gMiB7XG4gICAgJF9tYXh3OiBudGgoJHF1ZXJpZXMsIDIpO1xuICAgICRfbWF4dzogbWFwcHktdmFsaWRhdGUoJF9tYXh3LCAkYnJlYWtwb2ludHMpO1xuICB9XG5cbiAgQGlmICRfbWF4dyB7XG4gICAgJF9tYXh3OiBtYXBweS1jb252ZXJ0LXRvLWVtKCRfbWF4dyAtIDFweCk7XG4gICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKG1heC13aWR0aDogJF9tYXh3KSk7XG4gICAgJHF1ZXJpZXM6IHNldC1udGgoJHF1ZXJpZXMsIDIsIG51bGwpO1xuICB9XG5cbiAgLy8gQ2hlY2tzIGZvciBoZWlnaHQgcXVlcmllc1xuICAkX2g6IGluZGV4KCRxdWVyaWVzLCBoKSBvciBpbmRleCgkcXVlcmllcywgaGVpZ2h0KTtcblxuICBAaWYgJF9oIHtcbiAgICAkX21pbmg6IG50aCgkcXVlcmllcywgJF9oICsgMSk7XG4gICAgJF9taW5oOiBtYXBweS12YWxpZGF0ZSgkX21pbmgsICRicmVha3BvaW50cyk7XG5cbiAgICBAaWYgJF9taW5oIHtcbiAgICAgICRfbWluaDogbWFwcHktY29udmVydC10by1lbSgkX21pbmgpO1xuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKG1pbi1oZWlnaHQ6ICRfbWluaCkpO1xuICAgICAgJHF1ZXJpZXM6IHNldC1udGgoJHF1ZXJpZXMsICRfaCArIDEsIG51bGwpO1xuICAgIH1cblxuICAgIC8vIENoZWNrcyBpZiB0aGVyZSBpcyBhIG1heCBoZWlnaHQgcXVlcnlcbiAgICBAaWYgJF9sZW5ndGggLSAkX2ggPj0gMiB7XG4gICAgICAkX21heGg6IG50aCgkcXVlcmllcywgJF9oICsgMik7XG4gICAgICAkX21heGg6IG1hcHB5LXZhbGlkYXRlKCRfbWF4aCwgJGJyZWFrcG9pbnRzKTtcbiAgICB9XG5cbiAgICBAaWYgJF9tYXhoIHtcbiAgICAgICRfbWF4aDogbWFwcHktY29udmVydC10by1lbSgkX21heGggLSAxcHgpO1xuICAgICAgJF9yZXR1cm46IG1hcC1tZXJnZSgkX3JldHVybiwgKG1heC1oZWlnaHQ6ICRfbWF4aCkpO1xuICAgICAgJHF1ZXJpZXM6IHNldC1udGgoJHF1ZXJpZXMsICRfaCArIDIsIG51bGwpO1xuICAgIH1cbiAgICAvLyBSZXNldCBoIG1hcmtlclxuICAgICRxdWVyaWVzOiBzZXQtbnRoKCRxdWVyaWVzLCAkX2gsIG51bGwpO1xuICB9XG5cbiAgLy8gQ2hlY2tzIGZvciBvdGhlciBxdWVyaWVzXG4gIEB3aGlsZSAkX2kgPD0gbGVuZ3RoKCRxdWVyaWVzKSB7XG4gICAgJF9rZXk6IG50aCgkcXVlcmllcywgJF9pKTtcblxuICAgIEBpZiAkX2tleSBhbmQgJF9sZW5ndGggLSAkX2kgPj0gMSB7XG4gICAgICAkX3ZhbDogbnRoKCRxdWVyaWVzLCAkX2kgKyAxKTtcbiAgICAgICRfcmV0dXJuOiBtYXAtbWVyZ2UoJF9yZXR1cm4sICgjeyRfa2V5fTogJF92YWwpKTtcbiAgICAgICRxdWVyaWVzOiBzZXQtbnRoKCRxdWVyaWVzLCAkX2ksIG51bGwpO1xuICAgICAgJHF1ZXJpZXM6IHNldC1udGgoJHF1ZXJpZXMsICRfaSArIDEsIG51bGwpO1xuICAgIH1cblxuICAgIEBlbHNlIGlmICRfa2V5IHtcbiAgICAgIEB3YXJuIHVucXVvdGUoJ1wiTWFwcHkgQnJlYWtwb2ludHMgaXMgbWlzc2luZyB2YWx1ZSBmb3IgbWVkaWEgZmVhdHVyZSBcIiN7JF9rZXl9XCJcIicpO1xuICAgIH1cbiAgICAkX2k6ICRfaSArIDE7XG4gIH1cbiAgQHJldHVybiAkX3JldHVybjtcbn1cblxuLy8gTWFwcHkgVmFsaWRhdGUgW0Z1bmN0aW9uXVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQ2hlY2tzIGlmICRxdWVyeSBnaXZlbiBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbi8vIDEpIElzIGEgJGtleSBpbiB0aGUgJGJyZWFrcG9pbnRzIG1hcFxuLy8gMikgSXMgYSBudW1iZXJcbi8vIDMpIElzIGEgXCJtYXhcIiwgXCJtYXgtd2lkdGhcIiBvciBcIm1heC1oZWlnaHRcIiBzdHJpbmdcbkBmdW5jdGlvbiBtYXBweS12YWxpZGF0ZSgkcXVlcnksICRicmVha3BvaW50cykge1xuICAkX3JldHVybjogbnVsbDtcblxuICBAaWYgbWFwLWhhcy1rZXkoJGJyZWFrcG9pbnRzLCAkcXVlcnkpIHtcbiAgICAkX3JldHVybjogbWFwLWdldCgkYnJlYWtwb2ludHMsICRxdWVyeSk7XG4gIH1cblxuICBAZWxzZSBpZiB0eXBlLW9mKCRxdWVyeSkgPT0gbnVtYmVyIHtcbiAgICAkX3JldHVybjogJHF1ZXJ5O1xuICB9XG5cbiAgQGVsc2UgaWYgJHF1ZXJ5ID09IFwibWF4XCIgb3IgJHF1ZXJ5ID09IFwibWF4LWhlaWdodFwiIG9yICRxdWVyeSA9PSBcIm1heC13aWR0aFwiIHtcbiAgICAkX3JldHVybjogMDtcbiAgfVxuXG4gIEBlbHNlIHtcbiAgICAkX3JldHVybjogbnVsbDtcbiAgfVxuICBAcmV0dXJuICRfcmV0dXJuO1xufVxuXG4vLyBNYXBweSBDb252ZXJ0IFRvIEVtIFtGdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIENoZWNrcyBhbmQgY29udmVydHMgcHggdmFsdWVzIHRvIGVtLiBMZWF2ZSBvdGhlciB1bml0cyB1bnRvdWNoZWQuXG5cbkBmdW5jdGlvbiBtYXBweS1jb252ZXJ0LXRvLWVtKCR2YWwpIHtcbiAgQGlmIHVuaXQoJHZhbCkgPT0gXCJweFwiIG9yICR2YWwgPT0gMCB7XG4gICAgQHJldHVybiBtYXBweS1lbSgkdmFsKTtcbiAgfSBAZWxzZSBpZiB1bml0KCR2YWwpID09IFwiZW1cIiB7XG4gICAgQHJldHVybiAkdmFsO1xuICB9IEBlbHNlIGlmIHVuaXQoJHZhbCkgPT0gXCJyZW1cIiB7XG4gICAgQHJldHVybiBtYXBweS1zdHJpcC11bml0KCR2YWwpICogMWVtO1xuICB9IEBlbHNlIHtcbiAgICBAZXJyb3IgdW5xdW90ZShcIkJyZWFrcG9pbnQgdmFsdWUgbXVzdCBoYXZlIGEgdW5pdCBpZiBpdCdzIGEgbnVtYmVyXCIpO1xuICB9XG59XG5cbi8vIE1hcHB5IEVtIFtGdW5jdGlvbl1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDb252ZXJ0cyBwaXhlbHMgdG8gZW0gd2l0aCAkYmFzZS1mb250LXNpemVcbi8vIC0gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vaWp5LzE0NDE5NjdcbkBmdW5jdGlvbiBtYXBweS1lbSgkdGFyZ2V0LCAkY29udGV4dDogMTZweCkge1xuICBAaWYgJHRhcmdldCA9PSAwIHtcbiAgICBAcmV0dXJuIDA7XG4gIH1cbiAgQHJldHVybiAkdGFyZ2V0IC8gJGNvbnRleHQgKiAxZW07XG59XG5cbkBmdW5jdGlvbiBtYXBweS1zdHJpcC11bml0KCRudW0pIHtcbiAgQHJldHVybiAkbnVtIC8gKCRudW0gKiAwICsgMSk7XG59XG5cbi8vIEltcGxvZGUgW0Z1bmN0aW9uXVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcGxvZGUgYSBsaXN0IGludG8gYSBzdHJpbmdcbkBmdW5jdGlvbiBpbXBsb2RlKCRsaXN0LCAkZ2x1ZTogJyAnKSB7XG4gICRyZXM6IG51bGw7XG4gICRsZW46IGxlbmd0aCgkbGlzdCk7XG5cbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkbGVuIHtcbiAgICAkZTogbnRoKCRsaXN0LCAkaSk7XG4gICAgQGlmICRpID09ICRsZW4ge1xuICAgICAgJHJlczogdW5xdW90ZShcIiN7JHJlc30jeyRlfVwiKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgJHJlczogdW5xdW90ZShcIiN7JHJlc30jeyRlfSN7JGdsdWV9XCIpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJHJlcztcbn0iLCJcbkBpbXBvcnQgJ3ByaXZhdGUnO1xuQGltcG9ydCAncHVibGljJztcblxuLy8vL1xuLy8vIEBhdXRob3IgWmVsbCBMaWV3XG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAZ3JvdXAgY29uZmlnXG4vLy8vXG5cbi8vIEJyZWFrcG9pbnRzIE1hcFxuLy8gLS0tLS0tLS0tLVxuLy8vIENvbnRhaW5zIGFsbCBicmVha3BvaW50cyBUeXBpIHVzZXMgd2hlbmV2ZXIgd3JpdGVzIG1lZGlhIHF1ZXJpZXMuXG4vLy8gUG9zc2libGUgdG8gb3V0cHV0IG1lZGlhIHF1ZXJpZXMgaW4gZW0gKGV2ZW4gd2hlbiB5b3Ugd3JpdGUgaW4gcGl4ZWxzKVxuLy8vIEBleGFtcGxlXG4vLy8gICAkYnJlYWtwb2ludHM6IChcbi8vLyAgICAgc21hbGw6IDQwMHB4LFxuLy8vICAgICBtZWQ6ICAgNjAwcHgsXG4vLy8gICAgIGxhcmdlOiA4MDBweFxuLy8vICAgKTtcbi8vLyBAc2VlIHR5cGktYnJlYWtwb2ludFxuJGJyZWFrcG9pbnRzOiAoKSAhZGVmYXVsdDtcblxuLy8gVHlwZWZhY2VzIE1hcFxuLy8gLS0tLS0tLS0tLVxuLy8vIENvbnRhaW5zIHR5cGVmYWNlcyB0aGF0IFR5cGkgdXNlcy5cbi8vLyBAcHJvcCB7TnVtYmVyfSBmb250LXNpemUtcmF0aW8gWzFdIC0gcmF0aW8gb2YgZm9udC1zaXplIHRvIHByaW1hcnkgZm9udC1zaXplXG4vLy8gQHByb3Age01hcH0gc3RhY2sgLSBmb250IHN0YWNrXG4vLy8gQHByb3Age01hcH0gd2VpZ2h0cyAtIGZvbnQgd2VpZ2h0c1xuLy8vIEBleGFtcGxlXG4vLy8gICAkdHlwZWZhY2VzOiAoXG4vLy8gICAgIHByaW1hcnk6IChcbi8vLyAgICAgICBmb250LXNpemUtcmF0aW86IDEsXG4vLy8gICAgICAgc3RhY2s6IChIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmKSxcbi8vLyAgICAgICB3ZWlnaHRzOiAoXG4vLy8gICAgICAgICBsaWdodDogMzAwLFxuLy8vICAgICAgICAgbm9ybWFsOiA0MDAsXG4vLy8gICAgICAgICBib2xkOiA3MDBcbi8vLyAgICAgICApLFxuLy8vICAgICApXG4vLy8gICApO1xuJHR5cGVmYWNlczogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIFR5cGlcbi8vIC0tLS0tLS0tLS1cbi8vLyBDb250YWlucyBmb250LW1hcCwgd2hpY2ggaW4gdHVybiBjb250YWlucyBmb250LXNpemUgYW5kXG4vLy8gbGluZS1oZWlnaHQgcHJvcGVydGllcyB1c2VkIGF0IGFsbCBicmVha3BvaW50cy5cbi8vL1xuLy8vIC0gKipGaXJzdCB2YWx1ZSoqIC0gZm9udC1zaXplIChzZWUgYmVsb3cpXG4vLy8gLSAqKnNlY29uZCB2YWx1ZSoqIC0gbGluZS1oZWlnaHQgKG11c3QgYmUgdW5pdGxlc3MpXG4vLy9cbi8vLyAqKkZvbnQtc2l6ZSoqXG4vLy9cbi8vLyBGb250LXNpemUgY2FuIGVpdGhlciBiZSBlaXRoZXIgb2YgdGhlc2UgdmFsdWVzLiBUaGV5IHdpbGxcbi8vLyBhdXRvbWF0aWNhbGx5IGJlIGNvbnZlcnRlZCBpbnRvIGByZW1gIG9yIGBlbWBcbi8vL1xuLy8vIC0gYHB4YCAtIGJhc2UgZm9udC1zaXplcyBtdXN0IGJlIHdyaXR0ZW4gaW4gcGl4ZWxzXG4vLy8gLSBgZW1gXG4vLy8gLSB1bml0bGVzcyAocmVxdWlyZXMgdHlwaS1tcylcbi8vL1xuLy8vIEBwcm9wIHtNYXB9ICRmb250LW1hcCAtIEZvbnQgbWFwIHRoYXQgaG9sZHMgYnJlYWtwb2ludCBrZXlcbi8vLyBAcHJvcCB7c3RyaW5nfSAkYnJlYWtwb2ludCAtIGhvbGRzIGZvbnQtc2l6ZSBhbmQgbGluZS1oZWlnaHQgbGlzdFxuLy8vXG4vLy8gQGV4YW1wbGVcbi8vLyAgICR0eXBpOiAoXG4vLy8gICAgIGJhc2U6IChcbi8vLyAgICAgICBudWxsOiAoMThweCwgMS41KSxcbi8vLyAgICAgICBzbWFsbDogMjBweCxcbi8vLyAgICAgICBtZWQ6IDIycHgsXG4vLy8gICAgICAgbGFyZ2U6ICgyNHB4LCAxLjYpXG4vLy8gICAgICksXG4vLy8gICAgIGgxOiAoXG4vLy8gICAgICAgbnVsbDogKDI0cHgsIDEuMyksXG4vLy8gICAgICAgbWVkOiAyZW0sXG4vLy8gICAgICAgbGFyZ2U6IDNlbVxuLy8vICAgICApXG4vLy8gICApO1xuLy8vIEBzZWUgdHlwaS1tc1xuLy8vIEByZXF1aXJlcyAkYnJlYWtwb2ludHNcbiR0eXBpOiAoXG4gIGJhc2U6IChcbiAgICBudWxsOiAoMTZweCwgMS41KVxuICApXG4pICFkZWZhdWx0O1xuXG4vLyBUeXBpLW1zXG4vLyAtLS0tLS0tLS0tXG4vLy8gQ29udGFpbnMgbW9kdWxhciBzY2FsZSBiYXNlIGFuZCByYXRpb3MgZm9yXG4vLy8geW91IHRvIGNoYW5nZSByYXRpb3MgYW5kIGJhc2VzIGF0IGRpZmZlcmVudFxuLy8vIGJyZWFrcG9pbnRzLlxuLy8vXG4vLy8gKipNYWtlIHN1cmUqKiAkdHlwaS1tcywgJHR5cGkgYW5kICRicmVha3BvaW50cyAqKmNvbnRhaW5cbi8vLyBhbGwgYnJlYWtwb2ludHMqKiAoZXhjZXB0IG51bGwpIGlmIHlvdSB1c2UgdGhpcyBmdW5jdGlvbmFsaXR5XG4vLy9cbi8vLyBAcmVxdWlyZXMgJHR5cGlcbi8vLyBAcmVxdWlyZXMgJGJyZWFrcG9pbnRzXG4vLy9cbi8vLyBAZXhhbXBsZVxuLy8vICAgJHR5cGktbXM6IChcbi8vLyAgICAgbnVsbDogMS4yLCAvLyBvbmUgcmF0aW86IDEuMlxuLy8vICAgICBzbWFsbDogMS4yLFxuLy8vICAgICBtZWQ6ICgxLjIgMS41KSwgLy8gdHdvIHJhdGlvczogMS4yLCAxLjVcbi8vLyAgICAgbGFyZ2U6ICgxZW0gMmVtIDEuMiksIC8vIHR3byBiYXNlczogMWVtLCAyZW0gfCBvbmUgcmF0aW86IDEuMlxuLy8vICAgICBodWdlOiAoMS41ZW0gMS4yIDEuNSkgLy8gb25lIGJhc2U6IDEuNWVtIHwgdHdvIHJhdGlvczogMS4yLCAxLjVcbi8vLyAgICk7XG4kdHlwaS1tczogZmFsc2UgIWRlZmF1bHQ7XG5cbi8vIFR5cGktYnJlYWtwb2ludFxuLy8gLS0tLS0tLS0tLVxuLy8vIEludGVncmF0ZXMgVHlwaSB3aXRoIE1hcHB5IEJyZWFrcG9pbnRzIG9yIEJyZWFrcG9pbnQtc2Fzc1xuLy8vIEBleGFtcGxlXG4vLy8gICAkdHlwaS1icmVha3BvaW50OiAnbWFwcHktYnAnOyAvLyB1c2VzIG1hcHB5LWJyZWFrcG9pbnQgdG8gY3JlYXRlIG1lZGlhIHF1ZXJpZXNcbi8vLyAgICR0eXBpLWJyZWthcG9pbnQ6ICdicmVha3BvaW50JzsgLy8gdXNlcyBicmVha3BvaW50LXNhc3MgdG8gY3JlYXRlIG1lZGlhIHF1ZXJpZXNcbi8vLyBAbGluayBodHRwczovL2dpdGh1Yi5jb20vemVsbHdrL21hcHB5LWJyZWFrcG9pbnRzIE1hcHB5LWJyZWFrcG9pbnRzXG4vLy8gQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2F0LWltcG9ydC9icmVha3BvaW50IEJyZWFrcG9pbnQgU2Fzc1xuJHR5cGktYnJlYWtwb2ludDogbnVsbCAhZGVmYXVsdDtcbiIsIkBpbXBvcnQgJ3ByaXZhdGUvYmFzZWxpbmUvYmFzZWxpbmUnO1xuQGltcG9ydCAncHJpdmF0ZS9icmVha3BvaW50cy9icmVha3BvaW50cyc7XG5AaW1wb3J0ICdwcml2YXRlL2NhbGMvY2FsYyc7XG5AaW1wb3J0ICdwcml2YXRlL3R5cGVmYWNlcy90eXBlZmFjZXMnO1xuQGltcG9ydCAncHJpdmF0ZS91dGlscy91dGlscyc7XG5AaW1wb3J0ICdwcml2YXRlL3dyaXRlL3dyaXRlJztcbiIsIi8vIFJlcXVpcmVzXG4vLyB0eXBlZmFjZVxuLy8gdHlwZWZhY2VzXG4vLyB0YXJnZXQgbWFwXG4vLyBiYXNlIG1hcFxuQG1peGluIF90eS13cml0ZS1iYXNlbGluZS1wdXNoIChcbiAgJGZvbnQtc2l6ZTogJGZvbnQtc2l6ZSxcbiAgJGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQsXG4gICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgJF9tYXA6ICRfbWFwXG4pIHtcbiAgJHR5cGVmYWNlOiBtYXAtZ2V0KCRfbWFwLCB0eXBlZmFjZSk7XG4gICR0eXBlZmFjZXM6IG1hcC1nZXQoJF9tYXAsIHR5cGVmYWNlcyk7XG5cbiAgJGxpbmUtaGVpZ2h0OiBfdHktZ2V0LWxpbmUtaGVpZ2h0LWZvci1iYXNlbGluZS1wdXNoKFxuICAgICRsaW5lLWhlaWdodCxcbiAgICAkYnJlYWtwb2ludCxcbiAgICAkX21hcFxuICApO1xuXG4gICRwdXNoLWFtdDogX3R5LWdldC1iYXNlbGluZS1wdXNoLWFtdChcbiAgICAkZm9udC1zaXplOiAkZm9udC1zaXplLFxuICAgICRsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LFxuICAgICR0eXBlZmFjZTogJHR5cGVmYWNlLFxuICAgICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbiAgKTtcblxuICAvLyBXcml0ZSBvdXRwdXRcbiAgcGFkZGluZy10b3A6ICRwdXNoLWFtdDtcbiAgbWFyZ2luLWJvdHRvbTogJHB1c2gtYW10ICogLTE7XG59XG5cbi8vIF90eS1nZXQtYmFzZWxpbmUtcHVzaC1hbXRcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgYW1vdW50IHRvIHB1c2ggYmFzZWxpbmUgYnlcbi8vID09PT09PT09PT1cbkBmdW5jdGlvbiBfdHktZ2V0LWJhc2VsaW5lLXB1c2gtYW10KFxuICAkZm9udC1zaXplOiAkZm9udC1zaXplLFxuICAkbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodCxcbiAgJHR5cGVmYWNlOiBudWxsLFxuICAkdHlwZWZhY2VzOiAkdHlwZWZhY2VzXG4pIHtcbiAgJGNhcC1oZWlnaHQ6IDE7XG4gIEBpZiB1bml0KCRmb250LXNpemUpICE9ICdlbScge1xuICAgIEBlcnJvciAnJGZvbnQtc2l6ZSBtdXN0IGJlIGluIGVtJztcbiAgfVxuICBAaWYgbm90IHVuaXRsZXNzKCRsaW5lLWhlaWdodCkge1xuICAgIEBlcnJvciAnJGxpbmUtaGVpZ2h0IG11c3QgYmUgdW5pdGxlc3MnO1xuICB9XG4gIEBpZiAkdHlwZWZhY2Uge1xuICAgICRjYXAtaGVpZ2h0OiBfdHktcGFyc2UtY2FwLWhlaWdodCgkdHlwZWZhY2UsICR0eXBlZmFjZXMpO1xuICB9XG4gIEByZXR1cm4gJGZvbnQtc2l6ZSAqICgkbGluZS1oZWlnaHQgLSAkY2FwLWhlaWdodCkgKiAwLjU7XG59XG5cbi8vIF90eS1nZXQtbGluZS1oZWlnaHQtZm9yLWJhc2VsaW5lLXB1c2hcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgbGluZS1oZWlnaHQgdmFsdWUgdXNlZCB0byBjYWxjIGJhc2VsaW5lLXB1c2ggYW10XG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWdldC1saW5lLWhlaWdodC1mb3ItYmFzZWxpbmUtcHVzaChcbiAgJGxpbmUtaGVpZ2h0LFxuICAkYnJlYWtwb2ludDogbnVsbCxcbiAgJF9tYXA6IG51bGxcbikge1xuICAvLyBzaG91bGQgdXNlIG93biBsaW5lLWhlaWdodCBpZiBwcmVzZW50XG4gIEBpZiAkbGluZS1oZWlnaHQge1xuICAgIEByZXR1cm4gJGxpbmUtaGVpZ2h0O1xuICB9XG5cbiAgQGlmIG5vdCAkX21hcCB7IEBlcnJvciBcIiRfbWFwIG5vdCBmb3VuZFwiOyB9XG5cbiAgLy8gRmFsbHMgYmFjayB0byBvd24gbGluZS1oZWlnaHQgZnJvbSBwcmV2aW91cyBicmVha3BvaW50XG4gICR0YXJnZXQtbWFwOiBtYXAtZ2V0KCRfbWFwLCB0YXJnZXQtbWFwKTtcbiAgJF9saW5lLWhlaWdodDogX3R5LWdldC1jbG9zZXN0LWxpbmUtaGVpZ2h0KCR0YXJnZXQtbWFwLCAkYnJlYWtwb2ludCk7XG5cbiAgQGlmICRfbGluZS1oZWlnaHQge1xuICAgIEByZXR1cm4gJF9saW5lLWhlaWdodDtcbiAgfVxuXG4gIC8vIEZhbGxzIGJhY2sgdG8gbGluZS1oZWlnaHQgZnJvbSBiYXNlIG1hcCwgc2FtZSBicmVha3BvaW50XG4gICRfYmFzZS1tYXA6IG1hcC1nZXQoJF9tYXAsIGJhc2VtYXApO1xuICAkX3RhcmdldC1icmVha3BvaW50LW1hcDogbWFwLWdldCgkX2Jhc2UtbWFwLCAkYnJlYWtwb2ludCk7XG4gICRfbGluZS1oZWlnaHQ6IF90eS1nZXQtbGluZS1oZWlnaHQoJF90YXJnZXQtYnJlYWtwb2ludC1tYXApO1xuXG4gIEBpZiAkX2xpbmUtaGVpZ2h0IHtcbiAgICBAcmV0dXJuICRfbGluZS1oZWlnaHQ7XG4gIH1cblxuICAvLyBGYWxscyBiYWNrIHRvIGxpbmUtaGVpZ2h0IGZyb20gYmFzZSBtYXAsIHByZXZpb3VzIGJyZWFrcG9pbnRcbiAgJF9saW5lLWhlaWdodDogX3R5LWdldC1jbG9zZXN0LWxpbmUtaGVpZ2h0KCRfYmFzZS1tYXAsICRicmVha3BvaW50KTtcblxuICBAaWYgJF9saW5lLWhlaWdodCB7XG4gICAgQHJldHVybiAkX2xpbmUtaGVpZ2h0O1xuICB9XG5cbiAgQHJldHVybiAxO1xufVxuXG4vLyBfdHktZ2V0LWNsb3Nlc3QtbGluZS1oZWlnaHRcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgY2xvc2VzdCBsaW5lLWhlaWdodCB2YWx1ZSBmb3IgYmFzZWxpbmUgcHVzaCBjYWxjXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWdldC1jbG9zZXN0LWxpbmUtaGVpZ2h0KFxuICAkX3RhcmdldC1tYXAsXG4gICRicmVha3BvaW50XG4pIHtcbiAgJF9tYXAta2V5czogbWFwLWtleXMoJF90YXJnZXQtbWFwKTtcbiAgJF9jdXJyZW50LWJwLWluZGV4OiBpbmRleCgkX21hcC1rZXlzLCAkYnJlYWtwb2ludCk7XG4gICRfY2xvc2VzdC1saDogbnVsbDtcblxuICBAd2hpbGUgJF9jdXJyZW50LWJwLWluZGV4ID4gMSB7XG4gIC8vIEB3aGlsZSBub3QgJF9jbG9zZXN0LWxoIHtcbiAgICAkX2Nsb3Nlc3QtaW5kZXg6ICRfY3VycmVudC1icC1pbmRleCAtIDE7XG4gICAgJF9wcmV2LWJyZWFrcG9pbnQta2V5OiBudGgoJF9tYXAta2V5cywgJF9jbG9zZXN0LWluZGV4KTtcbiAgICAkX3ByZXYtZm9udC1tYXAtYnA6IG1hcC1nZXQoJF90YXJnZXQtbWFwLCAkX3ByZXYtYnJlYWtwb2ludC1rZXkpO1xuICAgICRfbGluZS1oZWlnaHQ6IF90eS1nZXQtbGluZS1oZWlnaHQoJF9wcmV2LWZvbnQtbWFwLWJwKTtcblxuICAgIC8vIEJyZWFrcyBsb29wXG4gICAgQGlmICRfbGluZS1oZWlnaHQge1xuICAgICAgJF9jbG9zZXN0LWxoOiAkX2xpbmUtaGVpZ2h0O1xuICAgICAgJF9jdXJyZW50LWJwLWluZGV4OiAxO1xuICAgICAgQHJldHVybiAkX2Nsb3Nlc3QtbGg7XG4gICAgfVxuXG4gICAgQGVsc2Uge1xuICAgICAgJF9jdXJyZW50LWJwLWluZGV4OiAkX2Nsb3Nlc3QtaW5kZXg7XG5cbiAgICAgIC8vIENvbXBsZXRlZCBvd24gbWFwLCBidXQgY291bGRuJ3QgZmluZCBpbmRleC5cbiAgICAgIC8vIEJyZWFrcyBsb29wLiBGYWxsIGJhY2sgb24gbmV4dC5cbiAgICAgIEBpZiAoJF9jbG9zZXN0LWluZGV4ID09IDEpIHtcbiAgICAgICAgJF9jbG9zZXN0LWxoOiB0cnVlO1xuICAgICAgICBAcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gZmFsc2U7XG59XG5cbi8vIF90eS1wYXJzZS1jYXAtaGVpZ2h0XG4vLyAtLS0tLS0tLS0tXG4vLyBHZXRzIGFuZCBlbnN1cmVzIGNhcC1oZWlnaHQgaXMgcHJlc2VudFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1wYXJzZS1jYXAtaGVpZ2h0KFxuICAkdHlwZWZhY2UsXG4gICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbikge1xuICAkdHlwZWZhY2UtbWFwOiBfdHktZ2V0LXR5cGVmYWNlLW1hcCgkdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xuICBAaWYgbWFwLWhhcy1rZXkoJHR5cGVmYWNlLW1hcCwgY2FwLWhlaWdodCkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkdHlwZWZhY2UtbWFwLCBjYXAtaGVpZ2h0KTtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yICdjYXAtaGVpZ2h0IG5vdCBmb3VuZCBpbiAjeyR0eXBlZmFjZS1tYXB9JztcbiAgfVxufVxuIiwiQGltcG9ydCAndXRpbHMnO1xuXG4vLyBfdHktd3JpdGUtYnJlYWtwb2ludHNcbi8vIC0tLS0tLS0tLS1cbi8vIC0gd3JpdGVzIHByb3BzIGZvciBldmVyeSB2YWxpZCBicmVha3BvaW50XG4vLyA9PT09PT09PT09XG5AbWl4aW4gX3R5LXdyaXRlLWJyZWFrcG9pbnRzIChcbiAgJF9tYXBcbikge1xuICAkdGFyZ2V0OiBtYXAtZ2V0KCRfbWFwLCB0YXJnZXQpO1xuICAkYnJlYWtwb2ludHM6IG1hcC1nZXQoJF9tYXAsIGJyZWFrcG9pbnRzKTtcbiAgJHR5cGk6IG1hcC1nZXQoJF9tYXAsIHR5cGkpO1xuICAkcmVtOiBtYXAtZ2V0KCRfbWFwLCByZW0pO1xuICAkYnJlYWtwb2ludC1saWI6IG1hcC1nZXQoJF9tYXAsIGJyZWFrcG9pbnQtbGliKTtcblxuICAkYmFzZW1hcDogbnVsbDtcbiAgJHRhcmdldC1tYXA6IG51bGw7XG5cbiAgLy8gRW5zdXJlcyB0YXJnZXQgbWFwIGlzIHByZXNlbnRcbiAgQGlmIG5vdCBtYXAtaGFzLWtleSgkdHlwaSwgJHRhcmdldCkge1xuICAgIEBlcnJvciBcIiN7JHRhcmdldH0gbm90IGZvdW5kIGluICR0eXBpIG1hcFwiO1xuICB9XG5cbiAgJHRhcmdldC1tYXA6IG1hcC1nZXQoJHR5cGksICR0YXJnZXQpO1xuXG4gIC8vIEVuc3VyZXMgYmFzZSBtYXAgaXMgcHJlc2VudFxuICBAaWYgbm90IG1hcC1oYXMta2V5KCR0eXBpLCBiYXNlKSB7XG4gICAgQGVycm9yIFwiYmFzZSBrZXkgaXMgbWlzc2luZyBmcm9tICR0eXBpIG1hcFwiO1xuICB9XG5cbiAgJGJhc2VtYXA6IG1hcC1nZXQoJHR5cGksIGJhc2UpO1xuXG4gICRfbWFwOiBtYXAtbWVyZ2UoJF9tYXAsIChcbiAgICBiYXNlbWFwOiAkYmFzZW1hcCxcbiAgICB0YXJnZXQtbWFwOiAkdGFyZ2V0LW1hcFxuICApKTtcblxuICBAZWFjaCAkYnJlYWtwb2ludCwgJHRhcmdldC12YWx1ZSBpbiAkdGFyZ2V0LW1hcCB7XG4gICAgQGlmICRicmVha3BvaW50ID09IG51bGwge1xuICAgICAgQGluY2x1ZGUgX3R5LW91dHB1dC1wcm9wcyhcbiAgICAgICAgJF9tYXA6ICRfbWFwLFxuICAgICAgICAkYnJlYWtwb2ludDogJGJyZWFrcG9pbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgQGVsc2Uge1xuICAgICAgQGluY2x1ZGUgX3R5LW91dHB1dC13aXRoLWJyZWFrcG9pbnQtbGlicmFyeShcbiAgICAgICAgJGJyZWFrcG9pbnQtbGliLFxuICAgICAgICAkYnJlYWtwb2ludDogJGJyZWFrcG9pbnQsXG4gICAgICAgICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzXG4gICAgICApIHtcbiAgICAgICAgQGluY2x1ZGUgX3R5LW91dHB1dC1wcm9wcyhcbiAgICAgICAgICAkX21hcDogJF9tYXAsXG4gICAgICAgICAgJGJyZWFrcG9pbnQ6ICRicmVha3BvaW50XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIF90eS1vdXRwdXQtd2l0aC1icmVha3BvaW50LWxpYnJhcnlcbi8vIC0tLS0tLS0tLS1cbi8vIE91dHB1dHMgd2l0aCBicmVha3BvaW50IGxpYnJhcnlcbi8vID09PT09PT09PT1cbkBtaXhpbiBfdHktb3V0cHV0LXdpdGgtYnJlYWtwb2ludC1saWJyYXJ5IChcbiAgJGxpYnJhcnk6IGZhbHNlLFxuICAkYnJlYWtwb2ludDogbnVsbCxcbiAgJGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHNcbikge1xuICAkbGliOiBudWxsO1xuXG4gIC8vIFBhcnNlcyBsaWJyYXJ5XG4gIEBpZiAkbGlicmFyeSB7XG4gICAgJGxpYjogX3R5LXBhcnNlLWJyZWFrcG9pbnQtbGliKCRsaWJyYXJ5KTtcbiAgICBAaWYgbm90ICRsaWIge1xuICAgICAgQGVycm9yIFwiI3skbGlifSBtaXhpbiBub3QgZm91bmRcIjtcbiAgICB9XG4gIH1cblxuXG4gIEBpZiAkbGliID09ICdicmVha3BvaW50JyB7XG4gICAgQGluY2x1ZGUgYnJlYWtwb2ludC1zZXQoJ3RvIGVtcycsIHRydWUpO1xuICAgIEBpbmNsdWRlIGJyZWFrcG9pbnQobWFwLWdldCgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRsaWIgPT0gJ21hcHB5LWJwJyB7XG4gICAgQGluY2x1ZGUgbWFwcHktYnAobWFwLWdldCgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRsaWIgPT0gJ21xJyB7XG4gICAgQGluY2x1ZGUgbXEobWFwLWdldCgkbXEtYnJlYWtwb2ludHMsICRicmVha3BvaW50KSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAje21hcC1nZXQoJGJyZWFrcG9pbnRzLCAkYnJlYWtwb2ludCl9KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn0iLCIvLyBfdHktaGFzLWJyZWFrcG9pbnRcbi8vIC0tLS0tLS0tLS1cbi8vIC0gRW5zdXJlcyAkYnJlYWtwb2ludHMgYW5kICR0eXBpIGhhcyBicmVha3BvaW50XG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWhhcy1icmVha3BvaW50IChcbiAgJHRhcmdldDogbnVsbCxcbiAgJGJyZWFrcG9pbnQ6ICRicmVha3BvaW50LFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cyxcbiAgJGJhc2VtYXA6ICRiYXNlbWFwXG4gICkge1xuXG4gIEBpZiAkdGFyZ2V0ID09ICdiYXNlJyB7XG4gICAgQHJldHVybiB0cnVlO1xuICB9XG5cbiAgQGlmIG5vdCBtYXAtaGFzLWtleSgkYnJlYWtwb2ludHMsICRicmVha3BvaW50KSB7XG4gICAgQGVycm9yIFwiJGJyZWFrcG9pbnRzIG1hcCBpcyBtaXNzaW5nICN7JGJyZWFrcG9pbnR9IGtleVwiO1xuICB9XG5cbiAgLy8gQGlmIG5vdCBtYXAtaGFzLWtleSgkYmFzZW1hcCwgJGJyZWFrcG9pbnQpIHtcbiAgLy8gICBAZXJyb3IgXCIkdHlwaSBiYXNlIGtleSBpcyBtaXNzaW5nICN7JGJyZWFrcG9pbnR9IGtleVwiO1xuICAvLyB9XG5cbiAgQHJldHVybiB0cnVlO1xufVxuXG4vLyBfaGFzLWJyZWFrcG9pbnQtbGlicmFyeVxuLy8gLSBDaGVja3MgaWYgYnJlYWtwb2ludCBsaWJyYXJ5IGlzIGluc3RhbGxlZFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1oYXMtYnJlYWtwb2ludC1saWJyYXJ5KCRsaWIpIHtcbiAgLy8gQWN0aXZhdGVzIGlmICR0eXBpLWJyZWFrcG9pbnQgPSBtZW50aW9uZWQgYnJlYWtwb2ludFxuICBAaWYgJHR5cGktYnJlYWtwb2ludCA9PSAkbGliIHtcbiAgICBAaWYgbWl4aW4tZXhpc3RzKCRsaWIpIHsgQHJldHVybiB0cnVlOyB9XG4gICAgQGVsc2UgeyBAZXJyb3IgXCIjeyRsaWJ9IG5vdCBmb3VuZFwiOyB9XG4gIH1cbiAgLy8gRWxzZSB1c2UgZGVmYXVsdCBicmVha3BvaW50IGJ1aWx0IGluIHR5cGlcbiAgQGVsc2Uge1xuICAgIEByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gX3R5LXBhcnNlLWJyZWFrcG9pbnQtbGliXG4vLyAtLS0tLS0tLS0tXG4vLyBDaGVja3MgaWYgYnJlYWtwb2ludCBsaWJyYXJ5IGlzIHN1cHBvcnRlZFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1wYXJzZS1icmVha3BvaW50LWxpYigkbGliKSB7XG4gIEBpZiBtaXhpbi1leGlzdHMoJGxpYikge1xuICAgIEByZXR1cm4gJGxpYjtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufSIsIkBpbXBvcnQgJ2NhbGMtZm9udC1zaXplJztcbkBpbXBvcnQgJ2NhbGMtbXMtc2l6ZSc7XG4iLCIvLyBDYWxjdWxhdGVzIGZvbnQgc2l6ZSB0byByZXR1cm4gdG8gdHlwaVxuLy8gLS0tLS0tLS0tLVxuLy8gLSByZXR1cm4gZm9udC1zaXplIGluIHJlbSBvciBlbVxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1jYWxjLWZvbnQtc2l6ZSAoXG4gICRmb250LXNpemU6ICRmb250LXNpemUsXG4gICRiYXNlbWFwOiAkYmFzZW1hcCxcbiAgJHJlbTogJHJlbSxcbiAgJGJyZWFrcG9pbnQ6IG51bGwsXG4gICR0eXBlZmFjZS1tdWx0aXBsaWVyOiAxXG4pIHtcbiAgLy8gVXNpbmcgdHlwaS1tcyBpZiBmb250LXNpemUgaXMgdW5pdGxlc3NcbiAgQGlmIHVuaXRsZXNzKCRmb250LXNpemUpIHtcbiAgICAkc3RlcDogJGZvbnQtc2l6ZTtcbiAgICBAaWYgJHJlbSB7XG4gICAgICBAcmV0dXJuIF90eS1tcy10by1yZW0oJHN0ZXAsICRicmVha3BvaW50KSAqICR0eXBlZmFjZS1tdWx0aXBsaWVyO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQHJldHVybiBfdHktbXMtdG8tZW0oJHN0ZXAsICRicmVha3BvaW50KSAqICR0eXBlZmFjZS1tdWx0aXBsaWVyO1xuICAgIH1cbiAgfVxuXG4gICRiYXNlLW51bGw6IG51bGw7XG4gICRiYXNlLWZvbnQtc2l6ZTogbnVsbDtcblxuICAvLyBDYWxjdWxhdGlvbiB1c2VzIGJhc2UtbnVsbCBiZWNhc2UgZXZlcnl0aGluZ1xuICAvLyBpcyByZWxhdGl2ZSB0byB0aGUgYmFzZSBmb250LXNpemUuXG4gIEBpZiBtYXAtaGFzLWtleSgkYmFzZW1hcCwgbnVsbCkge1xuICAgICRiYXNlLW51bGw6IG1hcC1nZXQoJGJhc2VtYXAsIG51bGwpO1xuICAgICRiYXNlLWZvbnQtc2l6ZTogbnRoKCRiYXNlLW51bGwsIDEpO1xuICB9IEBlbHNlIHtcbiAgICBAZXJyb3IgJ0Jhc2UgbWFwIG11c3QgaGF2ZSBudWxsIGtleSdcbiAgfVxuXG4gIC8vIENvbnZlcnRzIHRvIHJlbVxuICBAaWYgJHJlbSB7XG4gICAgQGlmIHVuaXQoJGZvbnQtc2l6ZSkgPT0gJ3B4JyB7XG4gICAgICBAcmV0dXJuIF90eS10by1yZW0oJGZvbnQtc2l6ZSwgJGJhc2UtZm9udC1zaXplKSAqICR0eXBlZmFjZS1tdWx0aXBsaWVyO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQHJldHVybiBfdHktdG8tcmVtKCRmb250LXNpemUpICogJHR5cGVmYWNlLW11bHRpcGxpZXI7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29udmVydHMgdG8gZW1cbiAgQGVsc2Uge1xuICAgIEBpZiB1bml0KCRmb250LXNpemUpID09ICdweCcge1xuICAgICAgQHJldHVybiBfdHktdG8tZW0oJGZvbnQtc2l6ZSwgJGJhc2UtZm9udC1zaXplKSAqICR0eXBlZmFjZS1tdWx0aXBsaWVyO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQHJldHVybiBfdHktdG8tZW0oJGZvbnQtc2l6ZSkgKiAkdHlwZWZhY2UtbXVsdGlwbGllcjtcbiAgICB9XG4gIH1cbn0iLCIvLyBfdHktY2FsYy1tc1xuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1jYWxjLW1zKFxuICAkc3RlcCxcbiAgJGJyZWFrcG9pbnQ6IG51bGwsXG4gICR0eXBpLW1zOiAkdHlwaS1tc1xuKSB7XG4gICRtcy1zZXR0aW5nOiBudWxsO1xuICAkdHktbXMtYmFzZTogKCk7XG4gICR0eS1tcy1yYXRpbzogKCk7XG5cbiAgQGlmIHR5cGUtb2YoJHR5cGktbXMpICE9ICdtYXAnIHtcbiAgICBAZXJyb3IgXCIkdHlwaS1tcyBtYXAgbm90IGZvdW5kXCI7XG4gIH1cblxuICBAaWYgbWFwLWhhcy1rZXkoJHR5cGktbXMsICRicmVha3BvaW50KSB7XG4gICAgJG1zLXNldHRpbmc6IG1hcC1nZXQoJHR5cGktbXMsICRicmVha3BvaW50KTtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yIFwiJHR5cGktbXMgZG9lcyBub3QgY29udGFpbiAjeyRicmVha3BvaW50fVwiO1xuICB9XG5cbiAgQGlmIGxlbmd0aCgkbXMtc2V0dGluZykgPT0gMCB7XG4gICAgQGVycm9yIFwiJHR5cGktbXMgYXQgI3skYnJlYWtwb2ludH0gbXVzdCBub3QgYmUgZW1wdHlcIjtcbiAgfVxuXG4gIC8vIE9ubHkgcmF0aW8gaWYgbGVuZ3RoID09IDFcbiAgQGlmIGxlbmd0aCgkbXMtc2V0dGluZykgPT0gMSB7XG4gICAgJF9pcy1yYXRpbzogX3R5LWlzLXJhdGlvKCRtcy1zZXR0aW5nKTtcblxuICAgIEBpZiAkX2lzLXJhdGlvIHtcbiAgICAgIEByZXR1cm4gbXMoJHN0ZXAsIDFlbSwgJG1zLXNldHRpbmcpO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQGVycm9yIFwiJHR5cGktbXMgcmF0aW8gYXQgI3skYnJlYWtwb2ludH0gbXVzdCBiZSB1bml0bGVzc1wiO1xuICAgIH1cbiAgfVxuXG4gIC8vIFR3byBvciBtb3JlIHZhbHVlcy5cbiAgLy8gQWxsIHZhbHVlcyB3aXRoIGVtIHVuaXRzIGFyZSBmb250LXNpemVzLlxuICAvLyBBbGwgdW5pdGxlc3MgdmFsdWVzIGFyZSByYXRpb3MuXG4gIEBlbHNlIHtcbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkbXMtc2V0dGluZykge1xuICAgICAgJF9jdXJyZW50OiBudGgoJG1zLXNldHRpbmcsICRpKTtcbiAgICAgICRfaXMtYmFzZTogX3R5LWlzLWJhc2UoJF9jdXJyZW50KTtcbiAgICAgICRfaXMtcmF0aW86IF90eS1pcy1yYXRpbygkX2N1cnJlbnQpO1xuXG4gICAgICBAaWYgJF9pcy1iYXNlIHtcbiAgICAgICAgJHR5LW1zLWJhc2U6IF90eS1hcHBlbmQoJHR5LW1zLWJhc2UsICRfY3VycmVudClcbiAgICAgIH1cblxuICAgICAgQGlmICRfaXMtcmF0aW8ge1xuICAgICAgICAkdHktbXMtcmF0aW86IF90eS1hcHBlbmQoJHR5LW1zLXJhdGlvLCAkX2N1cnJlbnQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0cyBiYXNlIHRvIDFlbSBpZiB0aGVyZSdzIG5vIGJhc2VcbiAgICBAaWYgbGVuZ3RoKCR0eS1tcy1iYXNlKSA9PSAwIHtcbiAgICAgICR0eS1tcy1iYXNlOiAxZW07XG4gICAgfVxuXG4gICAgQGlmIGxlbmd0aCgkdHktbXMtcmF0aW8pID09IDAge1xuICAgICAgQGVycm9yIFwiJHR5cGktbXMgYXQgI3skYnJlYWtwb2ludH0gbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSByYXRpb1wiO1xuICAgIH1cblxuICAgIEByZXR1cm4gbXMoJHN0ZXAsICR0eS1tcy1iYXNlLCAkdHktbXMtcmF0aW8pO1xuICB9XG59XG5cbi8vIENoZWNrcyBpZiAkbnVtIGlzIGJhc2UgZm9yIG1zIGNhbGNcbi8vID09PT09PT09PT1cbkBmdW5jdGlvbiBfdHktaXMtYmFzZSgkbnVtKSB7XG4gIEBpZiB1bml0KCRudW0pID09ICdlbScge1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfSBAZWxzZSBpZiB1bml0bGVzcygkbnVtKSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yICckdHlwaS1tcyBvbmx5IGFjY2VwdHMgZW0gYmFzZSB2YWx1ZXMnO1xuICB9XG59XG5cbi8vIENoZWNrcyBpZiAkbnVtIGlzIHJhdGlvIGZvciBtcyBjYWxjXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWlzLXJhdGlvKCRudW0pIHtcbiAgQGlmIHVuaXRsZXNzKCRudW0pIHtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsIi8vIF90eS1wYXJzZS10eXBlZmFjZVxuLy8gLS0tLS0tLS0tLVxuLy8gRW5zdXJlcyB0eXBlZmFjZSBrZXkgcHJlc2VudCBpbiAkdHlwZWZhY2VzLlxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1wYXJzZS10eXBlZmFjZShcbiAgJHR5cGVmYWNlLFxuICAkdHlwZWZhY2VzXG4pIHtcbiAgQGlmIG1hcC1oYXMta2V5KCR0eXBlZmFjZXMsICR0eXBlZmFjZSkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xuICB9IEBlbHNlIHtcbiAgICBAZXJyb3IgXCIkdHlwZWZhY2VzIGRvZXMgbm90IGhhdmUgI3skdHlwZWZhY2V9IHR5cGVmYWNlXCI7XG4gIH1cbn1cblxuQGZ1bmN0aW9uIF90eS1nZXQtdHlwZWZhY2UtbWFwKFxuICAkdHlwZWZhY2VzLFxuICAkdHlwZWZhY2Vcbikge1xuICAvLyBSZXR1cm5zIGZhbHNlIGlmIHR5cGVmYWNlIG1hcCBpcyBub3QgdXNlZCxcbiAgLy8gc28gY2FsbGVyIGNhbiBoYW5kbGUgdGhlaXIgb3duLlxuICBAaWYgdHlwZS1vZigkdHlwZWZhY2VzKSAhPSAnbWFwJyB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxuICBAaWYgbm90IG1hcC1oYXMta2V5KCR0eXBlZmFjZXMsICR0eXBlZmFjZSkge1xuICAgIEBlcnJvciAnI3skdHlwZWZhY2V9JyBub3QgZm91bmQgaW4gJHR5cGVmYWNlc1xuICB9XG4gIEByZXR1cm4gbWFwLWdldCgkdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xufVxuXG5AaW1wb3J0ICdtdWx0aXBsaWVyJzsiLCIvLyAtdHlfZ2V0LXR5cGVmYWNlLW11bHRpcGxpZXJcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgdHlwZWZhY2UgbXVsdGlwbGllclxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1nZXQtdHlwZWZhY2UtbXVsdGlwbGllcihcbiAgJHR5cGVmYWNlLFxuICAkdHlwZWZhY2VzXG4pIHtcbiAgJF9mb250LXNpemUtcmF0aW86IG51bGw7XG4gICRfdHlwZWZhY2UtbWFwOiBfdHktZ2V0LXR5cGVmYWNlLW1hcCgkdHlwZWZhY2VzLCAkdHlwZWZhY2UpO1xuXG4gIEBpZiAkX3R5cGVmYWNlLW1hcCB7XG4gICAgJF9mb250LXNpemUtcmF0aW86IG1hcC1nZXQoJF90eXBlZmFjZS1tYXAsIGZvbnQtc2l6ZS1yYXRpbyk7XG4gIH1cblxuICBAaWYgJF9mb250LXNpemUtcmF0aW8ge1xuICAgIEByZXR1cm4gMSAvICRfZm9udC1zaXplLXJhdGlvO1xuICB9IEBlbHNlIHtcbiAgICBAcmV0dXJuIDE7XG4gIH1cbn1cbiIsIkBpbXBvcnQgJ2NvbnZlcnRlcnMnO1xuQGltcG9ydCAnYmFzZXMnO1xuQGltcG9ydCAnbWFwcyc7XG5AaW1wb3J0ICdsaXN0cyc7XG5AaW1wb3J0ICdleHRlbmRlcic7IiwiLy8gX3R5LXN0cmlwLXVuaXRcbi8vID09PT09PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LXN0cmlwLXVuaXQoJG51bSkge1xuICBAcmV0dXJuICRudW0gLyAoJG51bSAqIDAgKyAxKTtcbn1cblxuXG4vLyBfdHktdG8tcGVyY2VudGFnZVxuLy8gPT09PT09PT1cbkBmdW5jdGlvbiBfdHktdG8tcGVyY2VudGFnZSgkZm9udC1zaXplKSB7XG4gIEBpZiB1bml0KCRmb250LXNpemUpICE9ICdweCcge1xuICAgIEBlcnJvciBcIl90eS10by1wZXJjZW50YWdlKCkgb25seSBhY2NlcHRzIHBpeGVsIHNpemVzXCJcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiAkZm9udC1zaXplIC8gMTZweCAqIDEwMCU7XG4gIH1cbn1cblxuLy8gX3R5LXRvLWVtXG4vLyA9PT09PT09PVxuQGZ1bmN0aW9uIF90eS10by1lbSgkZm9udC1zaXplLCAkcmVmLXNpemU6IG51bGwpIHtcbiAgQGlmIHVuaXQoJGZvbnQtc2l6ZSkgPT0gXCJweFwiIHtcbiAgICBAaWYgbm90ICRyZWYtc2l6ZSB7XG4gICAgICBAZXJyb3IgXCIkcmVmLXNpemUgbXVzdCBiZSBwcmVzZW50IGZvciBweCAtPiBlbSBjb252ZXJzaW9uXCI7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAcmV0dXJuIF90eS1zdHJpcC11bml0KCRmb250LXNpemUpIC8gX3R5LXN0cmlwLXVuaXQoJHJlZi1zaXplKSAqIDFlbTtcbiAgICB9XG4gIH1cblxuICBAZWxzZSBpZiB1bml0KCRmb250LXNpemUpID09ICdlbScge1xuICAgIEBpZiAkcmVmLXNpemUge1xuICAgICAgQHJldHVybiBfdHktc3RyaXAtdW5pdCgkZm9udC1zaXplKSAvIF90eS1zdHJpcC11bml0KCRyZWYtc2l6ZSkgKiAxZW07XG4gICAgfSBAZWxzZSB7XG4gICAgICBAcmV0dXJuIF90eS1zdHJpcC11bml0KCRmb250LXNpemUpICogMWVtO1xuICAgIH1cbiAgfVxuXG4gIEBlbHNlIGlmIHVuaXQoJGZvbnQtc2l6ZSkgPT0gXCJyZW1cIiB7XG4gICAgQHJldHVybiBfdHktc3RyaXAtdW5pdCgkZm9udC1zaXplKSAqIDFlbTtcbiAgfVxuXG4gIEBlbHNlIHtcbiAgICBAZXJyb3IgXCJfdHktdG8tZW0oKSBvbmx5IHN1cHBvcnRzIHB4IC0+IGVtLCBlbSAtPiBlbSBhbmQgcmVtIC0+IGVtIGNvbnZlcnNpb25cIjtcbiAgfVxufVxuXG4vLyBfdHktdG8tcmVtXG4vLyA9PT09PT09PT1cbkBmdW5jdGlvbiBfdHktdG8tcmVtKCRmb250LXNpemUsICRyZWYtc2l6ZTogbnVsbCkge1xuICBAaWYgdW5pdCgkZm9udC1zaXplKSA9PSBcInB4XCIge1xuICAgIEBpZiBub3QgJHJlZi1zaXplIHtcbiAgICAgIEBlcnJvciBcIiRyZWYtc2l6ZSBtdXN0IGJlIHByZXNlbnQgZm9yIHB4IC0+IHJlbSBjb252ZXJzaW9uXCI7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAcmV0dXJuIF90eS1zdHJpcC11bml0KCRmb250LXNpemUpIC8gX3R5LXN0cmlwLXVuaXQoJHJlZi1zaXplKSAqIDFyZW07XG4gICAgfVxuICB9XG5cbiAgQGVsc2UgaWYgdW5pdCgkZm9udC1zaXplKSA9PSBcImVtXCIge1xuICAgIEByZXR1cm4gX3R5LXN0cmlwLXVuaXQoJGZvbnQtc2l6ZSkgKiAxcmVtO1xuICB9XG5cbiAgQGVsc2Uge1xuICAgIEBlcnJvciBcIl90eS10by1yZW0oKSBvbmx5IHN1cHBvcnRzIHB4IC0+IHJlbSBhbmQgZW0gLT4gcmVtIGNvbnZlcnNpb25cIjtcbiAgfVxufVxuXG4vLyBfdHktbXMtdG8tcmVtXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LW1zLXRvLXJlbSgkc3RlcCwgJGJyZWFrcG9pbnQpIHtcbiAgQGlmIG5vdCB1bml0bGVzcygkc3RlcCkge1xuICAgIEBlcnJvciBcInN0ZXBzIG11c3QgYmUgdW5pdGxlc3Mgd2hlbiB5b3UncmUgdXNpbmcgVHlwaS1tc1wiO1xuICB9XG5cbiAgJGZvbnQtc2l6ZTogX3R5LWNhbGMtbXMoJHN0ZXAsICRicmVha3BvaW50KTtcbiAgQHJldHVybiBfdHktdG8tcmVtKCRmb250LXNpemUpO1xufVxuXG5AZnVuY3Rpb24gX3R5LW1zLXRvLWVtKCRzdGVwLCAkYnJlYWtwb2ludCkge1xuICBAaWYgbm90IHVuaXRsZXNzKCRzdGVwKSB7XG4gICAgQGVycm9yIFwic3RlcHMgbXVzdCBiZSB1bml0bGVzcyB3aGVuIHlvdSdyZSB1c2luZyBUeXBpLW1zXCI7XG4gIH1cblxuICBAcmV0dXJuIF90eS1jYWxjLW1zKCRzdGVwLCAkYnJlYWtwb2ludCk7XG59IiwiLy8gX3R5LWdldC1mb250LXNpemVcbi8vIC0tLS0tLS0tLS1cbi8vIEdldHMgZm9udC1zaXplIGZyb20gZm9udC1tYXAtYnJlYWtwb2ludFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1nZXQtZm9udC1zaXplICgkZm9udC1tYXAtYnJlYWtwb2ludCkge1xuICBAaWYgdHlwZS1vZigkZm9udC1tYXAtYnJlYWtwb2ludCkgPT0gJ251bWJlcicge1xuICAgIEByZXR1cm4gJGZvbnQtbWFwLWJyZWFrcG9pbnQ7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gbnRoKCRmb250LW1hcC1icmVha3BvaW50LCAxKTtcbiAgfVxufVxuXG4vLyBfdHktZ2V0LWxpbmUtaGVpZ2h0XG4vLyAtLS0tLS0tLS0tXG4vLyBHZXRzIGxpbmUtaGVpZ2h0IGZyb20gZm9udC1tYXAtYnJlYWtwb2ludFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1nZXQtbGluZS1oZWlnaHQgKCRmb250LW1hcC1icmVha3BvaW50KSB7XG4gIEBpZiB0eXBlLW9mKCRmb250LW1hcC1icmVha3BvaW50KSA9PSAnbGlzdCcge1xuICAgIEByZXR1cm4gbnRoKCRmb250LW1hcC1icmVha3BvaW50LCAyKTtcbiAgfSBAZWxzZSB7XG4gICAgQHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBfdHktZ2V0LWJhc2UtZm9udC1zaXplXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWdldC1iYXNlLWZvbnQtc2l6ZSgkYmFzZW1hcCkge1xuICAkYmFzZS1udWxsOiBtYXAtZ2V0KCRiYXNlbWFwLCBudWxsKTtcbiAgQHJldHVybiBfdHktZ2V0LWZvbnQtc2l6ZSgkYmFzZS1udWxsKTtcbn1cblxuLy8gX3R5LWdldC1iYXNlLWxpbmUtaGVpZ2h0XG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWdldC1iYXNlLWxpbmUtaGVpZ2h0KCRiYXNlbWFwKSB7XG4gICRiYXNlLW51bGw6IG1hcC1nZXQoJGJhc2VtYXAsIG51bGwpO1xuICAkYmFzZS1saW5lLWhlaWdodDogX3R5LWdldC1saW5lLWhlaWdodCgkYmFzZS1udWxsKTtcblxuICBAaWYgbm90ICRiYXNlLWxpbmUtaGVpZ2h0IHtcbiAgICBAZXJyb3IgXCJUeXBpIGJhc2UgbWFwIHJlcXVpcmVzIGxpbmUtaGVpZ2h0IG11bHRpcGxlIGluIG51bGwga2V5XCJcbiAgfVxuXG4gIEBpZiBub3QgdW5pdGxlc3MoJGJhc2UtbGluZS1oZWlnaHQpIHtcbiAgICBAZXJyb3IgXCJMaW5lLWhlaWdodCBpbiAkdHlwaSBiYXNlIG1hcCBzaG91bGQgYmUgdW5pdGxlc3NcIlxuICB9XG5cbiAgQHJldHVybiAkYmFzZS1saW5lLWhlaWdodDtcbn1cblxuLy8gX3R5LWdldC1iYXNlLW1hcFxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuQGZ1bmN0aW9uIF90eS1nZXQtYmFzZS1tYXAoJHR5cGk6ICR0eXBpKSB7XG4gIEBpZiBtYXAtaGFzLWtleSgkdHlwaSwgYmFzZSkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkdHlwaSwgYmFzZSk7XG4gIH0gQGVsc2Uge1xuICAgIEBlcnJvciBcIkJhc2Uga2V5IG5vdCBmb3VuZCBpbiAkdHlwaVwiO1xuICB9XG59IiwiLy8gTWFwLWZldGNoXG4vLyAtLS0tLS0tLS0tXG4vLy8gQW4gZWFzeSB3YXkgdG8gZmV0Y2ggYSBkZWVwIHZhbHVlIGluIGEgbXVsdGktbGV2ZWwgbWFwLlxuLy8vICAgV29ya3MgbXVjaCBsaWtlIG1hcC1nZXQoKSBleGNlcHQgdGhhdCB5b3UgcGFzcyBtdWx0aXBsZVxuLy8vICAga2V5cyBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlciB0byBnbyBkb3duIG11bHRpcGxlIGxldmVsc1xuLy8vICAgaW4gdGhlIG5lc3RlZCBtYXAuXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAcGFyYW0ge01hcH0gJG1hcCAtIE1hcFxuLy8vIEBwYXJhbSB7TGlzdH0gJGtleXMgLSBLZXkgY2hhaW4uXG4vLy8gQHJldHVybiB7Kn0gLSBEZXNpcmVkIHZhbHVlXG4vLy8gQGxpbmsgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamxvbmcvODc2MDI3NVxuLy8vIEBncm91cCB1dGlsc1xuQGZ1bmN0aW9uIG1hcC1mZXRjaCgkbWFwLCAka2V5cykge1xuICAka2V5OiBudGgoJGtleXMsIDEpO1xuICAkbGVuZ3RoOiBsZW5ndGgoJGtleXMpO1xuICAkdmFsdWU6IG1hcC1nZXQoJG1hcCwgJGtleSk7XG4gIEBpZiAkbGVuZ3RoID4gMSB7XG4gICAgJHJlc3Q6ICgpO1xuICAgIEBmb3IgJGkgZnJvbSAyIHRocm91Z2ggJGxlbmd0aCB7XG4gICAgICAkcmVzdDogYXBwZW5kKCRyZXN0LCBudGgoJGtleXMsICRpKSk7XG4gICAgfVxuICAgIEByZXR1cm4gbWFwLWZldGNoKCR2YWx1ZSwgJHJlc3QpO1xuICB9IEBlbHNlIHtcbiAgICBAcmV0dXJuICR2YWx1ZTtcbiAgfVxufVxuXG4vLy8gTWFwIGRlZXAgZ2V0XG4vLy8gQGF1dGhvciBIdWdvIEdpcmF1ZGVsXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAcGFyYW0ge01hcH0gJG1hcCAtIE1hcFxuLy8vIEBwYXJhbSB7QXJnbGlzdH0gJGtleXMgLSBLZXkgY2hhaW5cbi8vLyBAcmV0dXJuIHsqfSAtIERlc2lyZWQgdmFsdWVcbi8vLyBAZ3JvdXAgdXRpbHNcbkBmdW5jdGlvbiBtYXAtZGVlcC1nZXQoJG1hcCwgJGtleXMuLi4pIHtcbiAgICBAZWFjaCAka2V5IGluICRrZXlzIHtcbiAgICAgICAgJG1hcDogbWFwLWdldCgkbWFwLCAka2V5KTtcbiAgICB9XG4gICAgQHJldHVybiAkbWFwO1xufVxuXG5cbi8vLyBEZWVwIHNldCBmdW5jdGlvbiB0byBzZXQgYSB2YWx1ZSBpbiBuZXN0ZWQgbWFwc1xuLy8vIEBhdXRob3IgSHVnbyBHaXJhdWRlbFxuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8gQHBhcmFtIHtNYXB9ICRtYXAgLSBNYXBcbi8vLyBAcGFyYW0ge0xpc3R9ICRrZXlzIC0gIEtleSBjaGFpbmVcbi8vLyBAcGFyYW0geyp9ICR2YWx1ZSAtIFZhbHVlIHRvIGFzc2lnblxuLy8vIEByZXR1cm4ge01hcH1cbi8vLyBAZ3JvdXAgdXRpbHNcbkBmdW5jdGlvbiBtYXAtZGVlcC1zZXQoJG1hcCwgJGtleXMsICR2YWx1ZSkge1xuICAkbWFwczogKCRtYXAsKTtcbiAgJHJlc3VsdDogbnVsbDtcblxuICAvLyBJZiB0aGUgbGFzdCBrZXkgaXMgYSBtYXAgYWxyZWFkeVxuICAvLyBXYXJuIHRoZSB1c2VyIHdlIHdpbGwgYmUgb3ZlcnJpZGluZyBpdCB3aXRoICR2YWx1ZVxuICBAaWYgdHlwZS1vZihudGgoJGtleXMsIC0xKSkgPT0gXCJtYXBcIiB7XG4gICAgQHdhcm4gXCJUaGUgbGFzdCBrZXkgeW91IHNwZWNpZmllZCBpcyBhIG1hcDsgaXQgd2lsbCBiZSBvdmVycmlkZWQgd2l0aCBgI3skdmFsdWV9YC5cIjtcbiAgfVxuXG4gIC8vIElmICRrZXlzIGlzIGEgc2luZ2xlIGtleVxuICAvLyBKdXN0IG1lcmdlIGFuZCByZXR1cm5cbiAgQGlmIGxlbmd0aCgka2V5cykgPT0gMSB7XG4gICAgQHJldHVybiBtYXAtbWVyZ2UoJG1hcCwgKCRrZXlzOiAkdmFsdWUpKTtcbiAgfVxuXG4gIC8vIExvb3AgZnJvbSB0aGUgZmlyc3QgdG8gdGhlIHNlY29uZCB0byBsYXN0IGtleSBmcm9tICRrZXlzXG4gIC8vIFN0b3JlIHRoZSBhc3NvY2lhdGVkIG1hcCB0byB0aGlzIGtleSBpbiB0aGUgJG1hcHMgbGlzdFxuICAvLyBJZiB0aGUga2V5IGRvZXNuJ3QgZXhpc3QsIHRocm93IGFuIGVycm9yXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRrZXlzKSAtIDEge1xuICAgICRjdXJyZW50LWtleTogbnRoKCRrZXlzLCAkaSk7XG4gICAgJGN1cnJlbnQtbWFwOiBudGgoJG1hcHMsIC0xKTtcbiAgICAkY3VycmVudC1nZXQ6IG1hcC1nZXQoJGN1cnJlbnQtbWFwLCAkY3VycmVudC1rZXkpO1xuICAgIEBpZiAkY3VycmVudC1nZXQgPT0gbnVsbCB7XG4gICAgICBAZXJyb3IgXCJLZXkgYCN7JGtleX1gIGRvZXNuJ3QgZXhpc3QgYXQgY3VycmVudCBsZXZlbCBpbiBtYXAuXCI7XG4gICAgfVxuICAgICRtYXBzOiBhcHBlbmQoJG1hcHMsICRjdXJyZW50LWdldCk7XG4gIH1cblxuICAvLyBMb29wIGZyb20gdGhlIGxhc3QgbWFwIHRvIHRoZSBmaXJzdCBvbmVcbiAgLy8gTWVyZ2UgaXQgd2l0aCB0aGUgcHJldmlvdXMgb25lXG4gIEBmb3IgJGkgZnJvbSBsZW5ndGgoJG1hcHMpIHRocm91Z2ggMSB7XG4gICAgJGN1cnJlbnQtbWFwOiBudGgoJG1hcHMsICRpKTtcbiAgICAkY3VycmVudC1rZXk6IG50aCgka2V5cywgJGkpO1xuICAgICRjdXJyZW50LXZhbDogaWYoJGkgPT0gbGVuZ3RoKCRtYXBzKSwgJHZhbHVlLCAkcmVzdWx0KTtcbiAgICAkcmVzdWx0OiBtYXAtbWVyZ2UoJGN1cnJlbnQtbWFwLCAoJGN1cnJlbnQta2V5OiAkY3VycmVudC12YWwpKTtcbiAgfVxuXG4gIC8vIFJldHVybiByZXN1bHRcbiAgQHJldHVybiAkcmVzdWx0O1xufSIsIi8vIF90eS1hcHBlbmRcbi8vIC0tLS0tLS0tLS1cbi8vIEFwcGVuZGluZyB0byBlbXB0eSBsaXN0IGlzIHdvbmt5LiBUaGlzIGZ1bmN0aW9uIGZpeGVzXG4vLyBhcHBlbmQgYnkgc2V0dGluZyBmaXJzdCBpdGVtIHRvIGJlIGFwcGVuZGVkIGFzIGEgbGlzdCBpdGVtXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWFwcGVuZCgkbGlzdCwgJHZhbHVlKSB7XG4gIEBpZiBsZW5ndGgoJGxpc3QpID09IDAge1xuICAgIEByZXR1cm4gKCR2YWx1ZSk7XG4gIH0gQGVsc2Uge1xuICAgIEByZXR1cm4gYXBwZW5kKCRsaXN0LCAkdmFsdWUpO1xuICB9XG59XG5cbi8vIF90eS1pbnNlcnQtbnRoXG4vLyAtLS0tLS0tLS0tXG4vLyBJbnNlcnRpbmcgdmFsdWUgYXQgaW5kZXggblxuLy8gaHR0cDovL2h1Z29naXJhdWRlbC5jb20vMjAxMy8wOC8wOC9hZHZhbmNlZC1zYXNzLWxpc3QtZnVuY3Rpb25zLyNhZGRpbmctdmFsdWVzLXRvLWEtbGlzdFxuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1pbnNlcnQtbnRoKCRsaXN0LCAkaW5kZXgsICR2YWx1ZSkge1xuICAkcmVzdWx0OiBudWxsO1xuXG4gIEBpZiB0eXBlLW9mKCRpbmRleCkgIT0gbnVtYmVyIHtcbiAgICBAd2FybiBcIiRpbmRleDogI3txdW90ZSgkaW5kZXgpfSBpcyBub3QgYSBudW1iZXIgZm9yIGBpbnNlcnQtbnRoYC5cIjtcbiAgfVxuXG4gIEBlbHNlIGlmICRpbmRleCA8IDEge1xuICAgIEB3YXJuIFwiTGlzdCBpbmRleCAwIG11c3QgYmUgYSBub24temVybyBpbnRlZ2VyIGZvciBgaW5zZXJ0LW50aGBcIjtcbiAgfVxuXG4gIEBlbHNlIGlmICRpbmRleCA+IGxlbmd0aCgkbGlzdCkge1xuICAgIEB3YXJuIFwiTGlzdCBpbmRleCBpcyAjeyRpbmRleH0gYnV0IGxpc3QgaXMgb25seSAje2xlbmd0aCgkbGlzdCl9IGl0ZW0gbG9uZyBmb3IgYGluc2VydC1udGgnLlwiO1xuICB9XG5cbiAgQGVsc2Uge1xuICAgICRyZXN1bHQ6ICgpO1xuXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJGxpc3QpIHtcbiAgICAgIEBpZiAkaSA9PSAkaW5kZXgge1xuICAgICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgJHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsIG50aCgkbGlzdCwgJGkpKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICRyZXN1bHQ7XG59XG5cbi8vIF90eS1yZW1vdmVcbi8vIC0tLS0tLS0tLS1cbi8vIC0gUmVtb3ZlcyBpdGVtIGZyb20gbGlzdFxuLy8gaHR0cDovL2h1Z29naXJhdWRlbC5jb20vMjAxMy8wOC8wOC9hZHZhbmNlZC1zYXNzLWxpc3QtZnVuY3Rpb25zLyNyZW1vdmluZy12YWx1ZXMtZnJvbS1saXN0XG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LXJlbW92ZSgkbGlzdCwgJHZhbHVlLCAkcmVjdXJzaXZlOiBmYWxzZSkge1xuICAkcmVzdWx0OiAoKTtcblxuICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIGxlbmd0aCgkbGlzdCkge1xuICAgIEBpZiB0eXBlLW9mKG50aCgkbGlzdCwgJGkpKSA9PSBsaXN0IGFuZCAkcmVjdXJzaXZlIHtcbiAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCByZW1vdmUobnRoKCRsaXN0LCAkaSksICR2YWx1ZSwgJHJlY3Vyc2l2ZSkpO1xuICAgIH1cblxuICAgIEBlbHNlIGlmIG50aCgkbGlzdCwgJGkpICE9ICR2YWx1ZSB7XG4gICAgICAkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgbnRoKCRsaXN0LCAkaSkpO1xuICAgIH1cbiAgfVxuXG4gIEByZXR1cm4gJHJlc3VsdDtcbn0iLCIvLyBfdHktbWFwLWV4dGVuZGVyXG4vLyAtLS0tLS0tLS0tXG4vLyAtIEV4dGVuZHMgJHR5cGktbXMgYW5kIGFsbCB0YXJnZXQgbWFwc1xuLy8gICB0byBpbmNsdWRlIGJyZWFrcG9pbnRzIGZyb20gYnJlYWtwb2ludHMgbWFwXG4vLyBUT0RPOiBVcGRhdGUgd2hlbiBsaWJzYXNzIHYzLjRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZWxsd2svdHlwaS9pc3N1ZXMvMTdcbi8vID09PT09PT09PT1cblxuQGZ1bmN0aW9uIF90eS1tYXAtZXh0ZW5kZXIoXG4gICR0YXJnZXQ6IG51bGwsXG4gICR0eXBpOiAkdHlwaSxcbiAgJHR5cGktbXM6ICR0eXBpLW1zLFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50c1xuKSB7XG4gICRfbzogbnVsbDtcblxuICAvLyBFeHRlbmRzICR0eXBpIG1hcFxuICBAaWYgJHRhcmdldCB7XG4gICAgJF9vOiBfdHktZXh0ZW5kLXR5cGkoJHRhcmdldCk7XG4gIH1cblxuICAvLyBFeHRlbmRzICR0eXBpLW1zXG4gIEBlbHNlIHtcbiAgICAkX286IF90eS1leHRlbmQtdHlwaS1tcygpXG4gIH1cblxuICBAcmV0dXJuICRfbztcbn1cblxuLy8gX3R5LWV4dGVuZC10eXBpXG4vLyA9PT09PT09PT09XG5AZnVuY3Rpb24gX3R5LWV4dGVuZC10eXBpKCR0YXJnZXQpIHtcbiAgJF9yZXR1cm46ICR0eXBpO1xuICAkX3RhcmdldC1tYXA6IG51bGw7XG4gICRfcHJldi1icmVha3BvaW50OiBudWxsO1xuICAkX292ZXJ3cml0ZS12YWx1ZTogbnVsbDtcblxuICAvLyBEb2VzIG5vdCBleHRlbmQgdHlwaSBiYXNlXG4gIEBpZiAkdGFyZ2V0ID09ICdiYXNlJyB7XG4gICAgQHJldHVybiAkX3JldHVybjtcbiAgfVxuXG4gIEBpZiBtYXAtaGFzLWtleSgkdHlwaSwgJHRhcmdldCkge1xuICAgICRfdGFyZ2V0LW1hcDogbWFwLWdldCgkdHlwaSwgJHRhcmdldCk7XG4gIH0gQGVsc2Uge1xuICAgIEBlcnJvciAnJHR5cGkgc2hvdWxkIGNvbnRhaW4gI3skdGFyZ2V0fSc7XG4gIH1cblxuICAvLyBJbml0aWFsaXplcyAkX292ZXJ3cml0ZS12YWx1ZVxuICBAaWYgbWFwLWhhcy1rZXkoJF90YXJnZXQtbWFwLCBudWxsKSB7XG4gICAgJF9vdmVyd3JpdGUtdmFsdWU6IG1hcC1nZXQoJF90YXJnZXQtbWFwLCBudWxsKTtcbiAgfSBAZWxzZSB7XG4gICAgQGVycm9yIFwiI3skX3RhcmdldC1tYXB9IG11c3QgY29udGFpbiBhIG51bGwga2V5XCI7XG4gIH1cblxuICBAZWFjaCAkYnJlYWtwb2ludCwgJHZhbHVlIGluICRicmVha3BvaW50cyB7XG4gICAgLy8gVXBkYXRlcyBvdmVyd3JpdGUgdmFsdWUgaWYgaGFzIHRhcmdldCBtYXBcbiAgICBAaWYgbWFwLWhhcy1rZXkoJF90YXJnZXQtbWFwLCAkYnJlYWtwb2ludCkge1xuICAgICAgJF9vdmVyd3JpdGUtdmFsdWU6IG1hcC1nZXQoJF90YXJnZXQtbWFwLCAkYnJlYWtwb2ludCk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcndyaXRlcyByZWxldmFudCBtYXAgb3RoZXJ3aXNlXG4gICAgLy8gVE9ETzogTmVlZHMgdG8gZ2V0IG1hcCBhbmQgb3ZlcnJpZGUgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIE5lZWRzIExpYnNhc3MgdjMuNFxuICAgIC8vIFNlZSBtYW51YWwvdHlwaS1tcy5zY3NzIGZvciBkZXRhaWxzXG4gICAgQGVsc2Uge1xuICAgICAgJF9yZXR1cm46IG1hcC1kZWVwLXNldChcbiAgICAgICAgJF9yZXR1cm4sXG4gICAgICAgICR0YXJnZXQgJGJyZWFrcG9pbnQsXG4gICAgICAgICRfb3ZlcndyaXRlLXZhbHVlXG4gICAgICApO1xuICAgICAgJHR5cGk6IG1hcC1tZXJnZSgkdHlwaSwgJF9yZXR1cm4pICFnbG9iYWw7XG4gICAgfVxuXG4gICAgLy8gU2V0cyB2YWx1ZXMgZm9yIG5leHQgbG9vcFxuICAgICRfcHJldi1icmVha3BvaW50OiAkYnJlYWtwb2ludDtcbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cbi8vIF90eS1leHRlbmQtdHlwaS1tc1xuLy8gPT09PT09PT09PVxuQGZ1bmN0aW9uIF90eS1leHRlbmQtdHlwaS1tcygpIHtcbiAgJF9yZXR1cm46ICR0eXBpLW1zO1xuICAkX3ByZXYtYnJlYWtwb2ludDogJ251bGwnO1xuICAkX292ZXJ3cml0ZS12YWx1ZTogbnVsbDtcblxuICAvLyBUYXJnZXQgbWFwIG11c3QgYWx3YXlzIGhhdmUgYSBudWxsIGtleVxuICBAaWYgbm90IG1hcC1oYXMta2V5KCRfcmV0dXJuLCBudWxsKSB7XG4gICAgQGVycm9yIFwiJHR5cGktbXMgbXVzdCBjb250YWluIGEgbnVsbCBrZXlcIjtcbiAgfVxuXG4gIC8vIEluaXRpYWxpemVzICRfb3ZlcndyaXRlLXZhbHVlXG4gICRfb3ZlcndyaXRlLXZhbHVlOiBtYXAtZ2V0KCRfcmV0dXJuLCBudWxsKTtcblxuICBAZWFjaCAkYnJlYWtwb2ludCwgJHZhbHVlIGluICRicmVha3BvaW50cyB7XG4gICAgLy8gVXBkYXRlcyBvdmVyd3JpdGUgdmFsdWUgaWYgYWxyZWFkeSBpbiAkdHlwaS1tc1xuICAgIEBpZiBtYXAtaGFzLWtleSgkX3JldHVybiwgJGJyZWFrcG9pbnQpIHtcbiAgICAgICRfb3ZlcndyaXRlLXZhbHVlOiBtYXAtZ2V0KCRfcmV0dXJuLCAkYnJlYWtwb2ludCk7XG4gICAgfVxuXG4gICAgLy8gT3ZlcndyaXRlcyByZWxldmFudCBtYXAgb3RoZXJ3aXNlXG4gICAgQGVsc2Uge1xuICAgICAgJF9yZXR1cm46IG1hcC1kZWVwLXNldChcbiAgICAgICAgJF9yZXR1cm4sXG4gICAgICAgICRicmVha3BvaW50LFxuICAgICAgICAkX292ZXJ3cml0ZS12YWx1ZVxuICAgICAgKTtcbiAgICAgICR0eXBpLW1zOiBtYXAtbWVyZ2UoJHR5cGktbXMsICRfcmV0dXJuKSAhZ2xvYmFsO1xuICAgIH1cblxuICAgIC8vIFNldHMgdmFsdWVzIGZvciBuZXh0IGxvb3BcbiAgICAkX3ByZXYtYnJlYWtwb2ludDogJGJyZWFrcG9pbnRcbiAgfVxuXG4gIEByZXR1cm4gJF9yZXR1cm47XG59XG5cbi8vIF90eS1jaGVjay1leHRlbmRlZC1tYXBcbi8vID09PT09PT09PT1cbkBtaXhpbiBfdHktY2hlY2stZXh0ZW5kZWQtbWFwKFxuICAkbWFwOiAndHlwaScsXG4gICR0eXBpOiAkdHlwaSxcbiAgJHR5cGktbXM6ICR0eXBpLW1zLFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50c1xuKSB7XG4gICRicmVha3BvaW50LWxpc3Q6IG1hcC1rZXlzKCRicmVha3BvaW50cyk7XG4gICRmb250LW1hcC1saXN0OiBtYXAta2V5cygkdHlwaSk7XG4gICRmb250LW1hcC1saXN0OiBfdHktcmVtb3ZlKCRmb250LW1hcC1saXN0LCAnYmFzZScpO1xuXG4gIC8vIExvb3BzIHRocm91Z2ggZXZlcnkgZm9udC1tYXAgdG8gZW5zdXJlIHRoYXRcbiAgLy8gZWFjaCBtYXAgY29udGFpbnMgYWxsIGJyZWFrcG9pbnQga2V5c1xuICBAZWFjaCAkbWFwLWtleSBpbiAkZm9udC1tYXAtbGlzdCB7XG4gICAgJGZvbnQtbWFwOiBtYXAtZ2V0KCR0eXBpLCAkbWFwLWtleSk7XG4gICAgQGVhY2ggJGJyZWFrcG9pbnQgaW4gJGJyZWFrcG9pbnQtbGlzdCB7XG4gICAgICBAaWYgbm90IG1hcC1oYXMta2V5KCRmb250LW1hcCwgJGJyZWFrcG9pbnQpIHtcbiAgICAgICAgQHdhcm4gXCIjeyRicmVha3BvaW50fSBicmVha3BvaW50IG5vdCBmb3VuZCBpbiAkdHlwaSdzICN7JG1hcC1rZXl9IGtleS4gTWFrZSBzdXJlIGV2ZXJ5IGJyZWFrcG9pbnQgaXMgcHJlc2VudCBpbiBldmVyeSBmb250LW1hcCB3aGVuIHVzaW5nICR0eXBpLW1zIVwiO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrcyAkdHlwaS1tc1xuICBAZWFjaCAkYnJlYWtwb2ludCBpbiAkYnJlYWtwb2ludC1saXN0IHtcbiAgICBAaWYgbm90IG1hcC1oYXMta2V5KCR0eXBpLW1zLCAkYnJlYWtwb2ludCkge1xuICAgICAgQHdhcm4gXCIjeyRicmVha3BvaW50fSBicmVha3BvaW50IG5vdCBmb3VuZCBpbiAkdHlwaS1tcy4gTWFrZSBzdXJlIGV2ZXJ5IGJyZWFrcG9pbnQgaXMgcHJlc2VudCBpbiBldmVyeSBmb250LW1hcCB3aGVuIHVzaW5nICR0eXBpLW1zIVwiO1xuICAgIH1cbiAgfVxufSIsIi8vIF90eS1vdXRwdXQtcHJvcHNcbi8vIC0tLS0tLS0tLS1cbi8vIERlY2lkZXMgbWl4aW5zIHVzZWQgdG8gd3JpdGUgcHJvcGVydGllc1xuLy8gPT09PT09PT09PVxuQG1peGluIF90eS1vdXRwdXQtcHJvcHMgKFxuICAkX21hcDogJF9tYXAsXG4gICRicmVha3BvaW50OiAkYnJlYWtwb2ludFxuKSB7XG4gICR0YXJnZXQ6IG1hcC1nZXQoJF9tYXAsIHRhcmdldCk7XG4gICR0YXJnZXQtbWFwOiBtYXAtZ2V0KCRfbWFwLCB0YXJnZXQtbWFwKTtcbiAgJG91dHB1dDogbWFwLWdldCgkX21hcCwgb3V0cHV0KTtcbiAgJGJhc2VsaW5lLXB1c2g6IG1hcC1nZXQoJF9tYXAsIGJhc2VsaW5lLXB1c2gpO1xuXG4gIC8vIEVuc3VyZXMgYnJlYWtwb2ludCBpcyBwcmVzZW50IGluIHRhcmdldFxuICBAaWYgbm90IG1hcC1oYXMta2V5KCR0YXJnZXQtbWFwLCAkYnJlYWtwb2ludCkge1xuICAgIEBlcnJvciBcIiN7JHRhcmdldH0gZG9lcyBub3QgaGF2ZSAjeyRicmVha3BvaW50fSBicmVha3BvaW50XCJcbiAgfVxuXG4gIEBpZiAkdGFyZ2V0ID09ICdiYXNlJyB7XG4gICAgQGluY2x1ZGUgX3R5LXdyaXRlLWJhc2UoJF9tYXAsICRicmVha3BvaW50KTtcbiAgICBAaWYgJGJhc2VsaW5lLXB1c2gge1xuICAgICAgQGVycm9yIFwiJGJhc2VsaW5lIG9wdGlvbiBub3QgYWxsb3dlZCBvbiBiYXNlIG1hcFwiO1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkb3V0cHV0ID09ICdwcm9wcycge1xuICAgIEBpbmNsdWRlIF90eS13cml0ZS1wcm9wcygkX21hcCwgJGJyZWFrcG9pbnQpO1xuICB9IEBlbHNlIGlmICRvdXRwdXQgPT0gJ3ZyJyB7XG4gICAgQGluY2x1ZGUgX3R5LXdyaXRlLXZyKCRfbWFwLCAkYnJlYWtwb2ludCk7XG4gIH1cbn1cblxuLy8gX3R5LXdyaXRlLWJhc2Vcbi8vIC0tLS0tLS0tLS1cbi8vIENyZWF0ZXMgZm9udC1zaXplIGFuZCBsaW5lLWhlaWdodCBmb3IgYmFzZSBtYXBcbi8vID09PT09PT09PT1cbkBtaXhpbiBfdHktd3JpdGUtYmFzZSAoJF9tYXAsICRicmVha3BvaW50KSB7XG4gICR0YXJnZXQtbWFwOiBtYXAtZ2V0KCRfbWFwLCB0YXJnZXQtbWFwKTtcbiAgJGZvbnQtbWFwLWJyZWFrcG9pbnQ6IG1hcC1nZXQoJHRhcmdldC1tYXAsICRicmVha3BvaW50KTtcbiAgJGZvbnQtc2l6ZTogX3R5LWdldC1mb250LXNpemUoJGZvbnQtbWFwLWJyZWFrcG9pbnQpO1xuICAkbGluZS1oZWlnaHQ6IF90eS1nZXQtbGluZS1oZWlnaHQoJGZvbnQtbWFwLWJyZWFrcG9pbnQpO1xuXG4gIGZvbnQtc2l6ZTogX3R5LXRvLXBlcmNlbnRhZ2UoJGZvbnQtc2l6ZSk7XG4gIEBpZiAkbGluZS1oZWlnaHQge1xuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQ7XG4gIH1cbn1cblxuLy8gX3R5LXdyaXRlLXByb3BzXG4vLyAtLS0tLS0tLS0tXG4vLyBDcmVhdGVzIGZvbnQtc2l6ZSBhbmQgbGluZS1oZWlnaHQgcHJvcGVydGllc1xuLy8gPT09PT09PT09PVxuQG1peGluIF90eS13cml0ZS1wcm9wcygkX21hcCwgJGJyZWFrcG9pbnQpIHtcbiAgJHRhcmdldC1tYXA6IG1hcC1nZXQoJF9tYXAsIHRhcmdldC1tYXApO1xuICAkZm9udC1tYXAtYnJlYWtwb2ludDogbWFwLWdldCgkdGFyZ2V0LW1hcCwgJGJyZWFrcG9pbnQpO1xuICAkYmFzZW1hcDogbWFwLWdldCgkX21hcCwgYmFzZW1hcCk7XG4gICRyZW06IG1hcC1nZXQoJF9tYXAsIHJlbSk7XG4gICR0eXBlZmFjZXM6IG1hcC1nZXQoJF9tYXAsIHR5cGVmYWNlcyk7XG4gICR0eXBlZmFjZTogbWFwLWdldCgkX21hcCwgdHlwZWZhY2UpO1xuICAkYmFzZWxpbmUtcHVzaDogbWFwLWdldCgkX21hcCwgYmFzZWxpbmUtcHVzaCk7XG5cbiAgJHR5cGVmYWNlLW11bHRpcGxpZXI6IF90eS1nZXQtdHlwZWZhY2UtbXVsdGlwbGllcigkdHlwZWZhY2UsICR0eXBlZmFjZXMpO1xuICAkb3JpZy1mb250LXNpemU6IF90eS1nZXQtZm9udC1zaXplKCRmb250LW1hcC1icmVha3BvaW50KTtcbiAgJF9saW5lLWhlaWdodDogX3R5LWdldC1saW5lLWhlaWdodCgkZm9udC1tYXAtYnJlYWtwb2ludCk7XG4gICRfZm9udC1zaXplOiBfdHktY2FsYy1mb250LXNpemUoXG4gICAgJGZvbnQtc2l6ZTogJG9yaWctZm9udC1zaXplLFxuICAgICRiYXNlbWFwOiAkYmFzZW1hcCxcbiAgICAkcmVtOiAkcmVtLFxuICAgICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgICAkdHlwZWZhY2UtbXVsdGlwbGllcjogJHR5cGVmYWNlLW11bHRpcGxpZXJcbiAgKTtcblxuICBmb250LXNpemU6ICRfZm9udC1zaXplO1xuICBAaWYgJF9saW5lLWhlaWdodCB7XG4gICAgbGluZS1oZWlnaHQ6ICRfbGluZS1oZWlnaHQ7XG4gIH1cblxuICBAaWYgJGJhc2VsaW5lLXB1c2gge1xuICAgICRfZm9udC1zaXplOiBfdHktY2FsYy1mb250LXNpemUoXG4gICAgICAkZm9udC1zaXplOiAkb3JpZy1mb250LXNpemUsXG4gICAgICAkYmFzZW1hcDogJGJhc2VtYXAsXG4gICAgICAkcmVtOiBmYWxzZSxcbiAgICAgICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgICAgICR0eXBlZmFjZS1tdWx0aXBsaWVyOiAkdHlwZWZhY2UtbXVsdGlwbGllclxuICAgICk7XG4gICAgQGluY2x1ZGUgX3R5LXdyaXRlLWJhc2VsaW5lLXB1c2goXG4gICAgICAkZm9udC1zaXplOiAkX2ZvbnQtc2l6ZSxcbiAgICAgICRsaW5lLWhlaWdodDogJF9saW5lLWhlaWdodCxcbiAgICAgICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgICAgICRfbWFwOiAkX21hcFxuICAgICk7XG4gIH1cbn1cblxuLy8gX3R5LXdyaXRlLXZyXG4vLyAtLS0tLS0tLS0tXG4vLyBDcmVhdGVzIHZhbHVlcyBmb3IgbXMtdnIgbWl4aW4uXG4vLyA9PT09PT09PT09XG5AbWl4aW4gX3R5LXdyaXRlLXZyKCRfbWFwLCAkYnJlYWtwb2ludCkge1xuICAkdnI6IG1hcC1nZXQoJF9tYXAsIHZyKTtcbiAgJHByb3BlcnRpZXM6IG1hcC1nZXQoJF9tYXAsIHByb3BlcnRpZXMpO1xuICAkdGFyZ2V0LW1hcDogbWFwLWdldCgkX21hcCwgdGFyZ2V0LW1hcCk7XG4gICRiYXNlbWFwOiBtYXAtZ2V0KCRfbWFwLCBiYXNlbWFwKTtcbiAgJHR5cGVmYWNlOiBtYXAtZ2V0KCRfbWFwLCB0eXBlZmFjZSk7XG4gICR0eXBlZmFjZXM6IG1hcC1nZXQoJF9tYXAsIHR5cGVmYWNlcyk7XG5cbiAgJGZvbnQtbWFwLWJyZWFrcG9pbnQ6IG1hcC1nZXQoJHRhcmdldC1tYXAsICRicmVha3BvaW50KTtcbiAgJHN0ZXA6IF90eS1nZXQtZm9udC1zaXplKCRmb250LW1hcC1icmVha3BvaW50KTtcblxuICBAaWYgbm90IHVuaXRsZXNzKCRzdGVwKSB7XG4gICAgJHRhcmdldDogbWFwLWdldCgkX21hcCwgdGFyZ2V0KTtcbiAgICBAZXJyb3IgJ1N0ZXAgI3skc3RlcH0gaW4gI3skdGFyZ2V0fSwgI3skYnJlYWtwb2ludH0gbXVzdCBiZSB1bml0bGVzcyc7XG4gIH1cblxuICAkZm9udC1zaXplOiBfdHktbXMtdG8tZW0oJHN0ZXAsICRicmVha3BvaW50KTtcbiAgJHJoeXRobTogdnIoJHZyLCAkZm9udC1zaXplLCAkdHlwZWZhY2UsICRiYXNlbWFwLCAkdHlwZWZhY2VzOiAkdHlwZWZhY2VzKTtcblxuICBAZWFjaCAkcHJvcGVydHkgaW4gJHByb3BlcnRpZXMge1xuICAgICN7JHByb3BlcnR5fTogJHJoeXRobTtcbiAgfVxufSIsIkBpbXBvcnQgJ3B1YmxpYy9yaHl0aG0vcmh5dGhtJztcbkBpbXBvcnQgJ3B1YmxpYy90eXBpL3R5cGknO1xuQGltcG9ydCAncHVibGljL3R5cGVmYWNlcy90eXBlZmFjZXMnOyIsIkBpbXBvcnQgJ2Jhc2VsaW5lJztcbi8vLy9cbi8vLyBAcGFyYW0ge01hcH0gJHR5cGVmYWNlcyBbJHR5cGVmYWNlc11cbi8vL1xuLy8vL1xuXG4vLyB2clxuLy8gLS0tLS0tLS0tLVxuLy8vIENhbGN1bGF0ZXMgVmVydGljYWwgUmh5dGhtLiBDYW4gb3V0cHV0IHVuaXRzIGVpdGhlciBpbiByZW0gb3IgZW1cbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdnIgLSBWZXJ0aWNhbCBSaHl0aG0gbXVsdGlwbGVcbi8vLyBAcGFyYW0ge051bWJlcn0gJGN1cnJlbnQtZm9udC1zaXplIFtudWxsXSAtIEN1cnJlbnQgZm9udC1zaXplIHZhbHVlLiBSZXF1aXJlZCB0byBvdXRwdXQgZW0uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR0eXBlZmFjZSBbbnVsbF0gLSBUeXBlZmFjZSBrZXkgaW4gJHR5cGVmYWNlcy4gUmVxdWlyZWQgdG8gYWRqdXN0IGVtIG91dHB1dCBhY2NvcmRpbmcgdG8gdHlwZWZhY2Ugc2l6ZVxuLy8vIEBzZWUgJHR5cGVmYWNlc1xuLy8vIEBncm91cCBjb3JlXG4vLy8gQGV4YW1wbGVcbi8vLyAgIC5zZWxlY3RvciB7XG4vLy8gICAgIG1hcmdpbi10b3A6IHZyKDMpO1xuLy8vICAgfVxuLy8vIEByZXR1cm4ge051bWJlcn0gLSBWYWx1ZSB0byBvdXRwdXQsIGVpdGhlciBpbiBgZW1gIG9yIGByZW1gXG5AZnVuY3Rpb24gdnIoXG4gICR2cixcbiAgJGN1cnJlbnQtZm9udC1zaXplOiBudWxsLFxuICAkdHlwZWZhY2U6IG51bGwsXG4gICRiYXNlbWFwOiBtYXAtZ2V0KCR0eXBpLCBiYXNlKSxcbiAgJHR5cGVmYWNlczogJHR5cGVmYWNlc1xuKSB7XG4gICRiYXNlLWZvbnQtc2l6ZTogX3R5LWdldC1iYXNlLWZvbnQtc2l6ZSgkYmFzZW1hcCk7XG4gICRiYXNlLWxpbmUtaGVpZ2h0OiBfdHktZ2V0LWJhc2UtbGluZS1oZWlnaHQoJGJhc2VtYXApO1xuICAkcmh5dGhtOiAkdnIgKiAkYmFzZS1saW5lLWhlaWdodDtcblxuICAvLyBSZXR1cm5zIHJlbSB2YWx1ZXNcbiAgQGlmIG5vdCAkY3VycmVudC1mb250LXNpemUge1xuICAgIEByZXR1cm4gX3R5LXRvLXJlbSgkcmh5dGhtICogMWVtKTtcbiAgfVxuXG4gIC8vIHJldHVybiBlbSB2YWx1ZXNcbiAgQGVsc2Uge1xuICAgICRfcmh5dGhtLW11bHRpcGxpZXI6IDE7XG4gICAgJF9yZXR1cm46IDE7XG4gICAgQGlmICR0eXBlZmFjZSB7XG4gICAgICAkX3JoeXRobS1tdWx0aXBsaWVyOiAxIC8gX3R5LWdldC10eXBlZmFjZS1tdWx0aXBsaWVyKCR0eXBlZmFjZSwgJHR5cGVmYWNlcyk7XG4gICAgfVxuXG4gICAgQGlmIHVuaXQoJGN1cnJlbnQtZm9udC1zaXplKSA9PSAncHgnIHtcbiAgICAgICRyaHl0aG0tcHg6ICRyaHl0aG0gKiAkYmFzZS1mb250LXNpemU7XG4gICAgICAkX3JldHVybjogX3R5LXRvLWVtKCRyaHl0aG0tcHgsICRjdXJyZW50LWZvbnQtc2l6ZSk7XG4gICAgfVxuICAgIEBlbHNlIGlmIHVuaXQoJGN1cnJlbnQtZm9udC1zaXplKSA9PSAnZW0nIHtcbiAgICAgICRfcmV0dXJuOiBfdHktdG8tZW0oJHJoeXRobSAqIDFlbSwgJGN1cnJlbnQtZm9udC1zaXplKTtcbiAgICB9XG5cblxuICAgIEByZXR1cm4gJF9yZXR1cm4gKiAkX3JoeXRobS1tdWx0aXBsaWVyO1xuICB9XG59XG5cbi8vIHZyLW1zXG4vLyAtLS0tLS0tLS0tXG4vLy8gVGhpcyBtaXhpbiBjb21lcyBpbiB3aGVuIHlvdSBuZWVkIHRvIHdyaXRlICoqcmh5dGhtcyoqIGluIGBlbWBcbi8vLyBhbmQgeW91J3JlICoqY2hhbmdpbmcgTW9kdWxhciBTY2FsZSByYXRpbyoqIGF0IGRpZmZlcmVudCBicmVha3BvaW50cy5cbi8vL1xuLy8vIElmIHlvdSBjaGFuZ2UgTW9kdWxhciBTY2FsZSByYXRpbyBhdCBkaWZmZXJlbnQgYnJlYWtwb2ludHMsXG4vLy8gZm9udC1zaXplcyB3aWxsIGJlIHJlY2FsY3VsYXRlZCwgd2hpY2ggbWVhbnMgdGhlcmUncyBubyB3YXlcbi8vLyB0byB0ZWxsIHdoYXQgZm9udC1zaXplIGlzIHByZXNlbnQgYXQgd2hpY2ggYnJlYWtwb2ludC4gVGhpc1xuLy8vIG1peGluIGhlbHBzIHRvIGNhbGN1bGF0ZSB0aGUgY3VycmVudCBmb250LXNpemUsIGFuZCBjcmVhdGVzXG4vLy8gdGhlIGNvcnJlc3BvbmRpbmcgcmh5dGhtIHZhbHVlLlxuLy8vXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vL1xuLy8vIEBwYXJhbSB7TGlzdH0gJHByb3BlcnRpZXMgLSBQcm9wZXJ0aWVzIHRvIG91dHB1dFxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdnIgLSBWZXJ0aWNhbCBSaHl0aG0gbXVsdGlwbGVcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHRhcmdldCAtIEZvbnQgbWFwIHVzZWRcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHR5cGVmYWNlIFtmYWxzZV0gLSBUeXBlZmFjZSB1c2VkXG4vLy8gQHNlZSAkdHlwZWZhY2VzXG4vLy8gQHJlcXVpcmVzICR0eXBpLW1zXG4vLy8gQGdyb3VwIGNvcmVcbi8vLyBAZXhhbXBsZVxuLy8vICAgLnNlbGVjdG9yIHtcbi8vLyAgICAgQGluY2x1ZGUgbXMtdnIobWFyZ2luLXRvcCwgMiwgJ2gxJyk7XG4vLy8gICB9XG4vLy8gQG91dHB1dFxuLy8vICAgLnNlbGVjdG9yIHtcbi8vLyAgICAgbWFyZ2luLXRvcDogM2VtO1xuLy8vICAgfVxuQG1peGluIHZyLW1zKFxuICAkcHJvcGVydGllcyxcbiAgJHZyLFxuICAkdGFyZ2V0LFxuICAkdHlwZWZhY2U6IGZhbHNlLFxuICAkdHlwaTogJHR5cGksXG4gICR0eXBpLW1zOiAkdHlwaS1tcyxcbiAgJHR5cGVmYWNlczogJHR5cGVmYWNlcyxcbiAgJGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHNcbikge1xuICBAaW5jbHVkZSBfdHktd3JpdGUtYnJlYWtwb2ludHMoKFxuICAgIGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHMsXG4gICAgb3V0cHV0OiAndnInLFxuICAgIHByb3BlcnRpZXM6ICRwcm9wZXJ0aWVzLFxuICAgIHJlbTogdHJ1ZSxcbiAgICB0YXJnZXQ6ICR0YXJnZXQsXG4gICAgdHlwZWZhY2U6ICR0eXBlZmFjZSxcbiAgICB0eXBlZmFjZXM6ICR0eXBlZmFjZXMsXG4gICAgdHlwaS1tczogJHR5cGktbXMsXG4gICAgdHlwaTogJHR5cGksXG4gICAgdnI6ICR2clxuICApKVxufVxuIiwiLy8gQmFzZWxpbmUgZ3JpZFxuLy8gLS0tLS0tLS0tLVxuLy8vIENyZWF0ZXMgYmFzZWxpbmUgZ3JpZFxuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRvZmZzZXQgWzBdIC0gT2Zmc2V0cyBiYXNlbGluZSBncmlkLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkYmFzZWxpbmUgW251bGxdIC0gR2VuZXJhdGVzIGEgYmFzZWxpbmUgb2YgeW91ciBjaG9pY2UuXG4vLy8gQHBhcmFtIHtIZXh9ICRjb2xvciBbcmdiYShibHVlLCAwLjE1KV0gLSBDb2xvciBvZiBiYXNlbGluZVxuLy8vIEBwYXJhbSB7TWFwfSAkdHlwaSBbJHR5cGldIC0gJHR5cGkgbWFwLlxuQG1peGluIGJhc2VsaW5lLWdyaWQoXG4gICRvZmZzZXQ6IDAsXG4gICRiYXNlbGluZTogbnVsbCxcbiAgJGNvbG9yOiByZ2JhKGJsdWUsIDAuMjUpLFxuICAkdHlwaTogJHR5cGlcbikge1xuICAvLyBDcmVhdGVzIHVzZXIgcmVxdWVzdGVkIGJhc2VsaW5lXG4gIEBpZiAkYmFzZWxpbmUge1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICRjb2xvciAxcHgsIHRyYW5zcGFyZW50IDAsIHRyYW5zcGFyZW50ICRiYXNlbGluZSk7XG4gICAgYmFja2dyb3VuZC1zaXplOiAxMDAlICRiYXNlbGluZTtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwICRvZmZzZXQ7XG4gIH1cblxuICAvLyBBdXRvbWF0aWNhbGx5IGdlbmVyYXRlIGJhc2VsaW5lIGZyb20gJHR5cGkgYmFzZVxuICBAZWxzZSB7XG4gICAgJGJhc2UtbWFwOiBfdHktZ2V0LWJhc2UtbWFwKCR0eXBpKTtcbiAgICAkX2Jhc2UtZm9udC1zaXplOiBfdHktZ2V0LWJhc2UtZm9udC1zaXplKCRiYXNlLW1hcCk7XG4gICAgJF9iYXNlLWxpbmUtaGVpZ2h0OiBfdHktZ2V0LWJhc2UtbGluZS1oZWlnaHQoJGJhc2UtbWFwKTtcbiAgICAkX3ByZXYtYnAtbGluZS1oZWlnaHQ6ICRfYmFzZS1saW5lLWhlaWdodDtcbiAgICAkYmFzZWxpbmU6ICRfYmFzZV9mb250LXNpemUgKiAkX2Jhc2UtbGluZS1oZWlnaHQ7XG5cbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCAkY29sb3IgMXB4LCB0cmFuc3BhcmVudCAwLCB0cmFuc3BhcmVudCAkYmFzZWxpbmUpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAkYmFzZWxpbmU7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAkb2Zmc2V0O1xuXG4gICAgQGVhY2ggJGJyZWFrcG9pbnQsICRicmVha3BvaW50LXZhbHVlIGluICRicmVha3BvaW50cyB7XG4gICAgICBAaWYgbWFwLWhhcy1rZXkoJGJhc2UtbWFwLCAkYnJlYWtwb2ludCkge1xuICAgICAgICAkZm9udC1tYXAtYnJlYWtwb2ludDogbWFwLWZldGNoKCR0eXBpLCBiYXNlICRicmVha3BvaW50KTtcbiAgICAgICAgJF9icC1iYXNlLWZvbnQtc2l6ZTogX3R5LWdldC1mb250LXNpemUoJGZvbnQtbWFwLWJyZWFrcG9pbnQpO1xuICAgICAgICAkX2JwLWxpbmUtaGVpZ2h0OiBfdHktZ2V0LWxpbmUtaGVpZ2h0KCRmb250LW1hcC1icmVha3BvaW50KTtcblxuICAgICAgICBAaWYgbm90ICRfYnAtbGluZS1oZWlnaHQge1xuICAgICAgICAgICRfYnAtbGluZS1oZWlnaHQ6ICRfcHJldi1icC1saW5lLWhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgICRfYnAtYmFzZWxpbmU6ICRfYnAtYmFzZS1mb250LXNpemUgKiAkX2JwLWxpbmUtaGVpZ2h0O1xuICAgICAgICBAbWVkaWEgYWxsIGFuZCAobWluLXdpZHRoOiAjeyRicmVha3BvaW50LXZhbHVlfSkge1xuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICRjb2xvciAxcHgsIHRyYW5zcGFyZW50IDAsIHRyYW5zcGFyZW50ICRfYnAtYmFzZWxpbmUpO1xuICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJSAkX2JwLWJhc2VsaW5lO1xuICAgICAgICB9XG5cbiAgICAgICAgJF9wcmV2LWJwLWxpbmUtaGVpZ2h0OiAkX2JwLWxpbmUtaGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gYmFzZWxpbmUtcHVzaCAoXG4gICR0eXBlZmFjZTogJ3ByaW1hcnknLFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cyxcbiAgJHR5cGk6ICR0eXBpLFxuICAkdHlwaS1tczogJHR5cGktbXMsXG4gICR0eXBpLWJyZWFrcG9pbnQ6ICR0eXBpLWJyZWFrcG9pbnQsXG4gICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbikge1xuICAkYmFzZS1tYXA6IG1hcC1nZXQoJHR5cGksIGJhc2UpO1xuICBAaWYgbm90ICRiYXNlLW1hcCB7XG4gICAgQGVycm9yIFwiJHR5cGkgbmVlZHMgdG8gaGF2ZSBhIGJhc2UgbWFwXCI7XG4gIH1cblxuICAkYmFzZS1mb250LXNpemU6IF90eS1nZXQtYmFzZS1mb250LXNpemUoJGJhc2UtbWFwKTtcblxuICBAZWFjaCAkYnJlYWtwb2ludCwgJGJyZWFrcG9pbnQtdmFsdWUgaW4gJGJhc2UtbWFwIHtcbiAgICAkZm9udC1zaXplOiBfdHktdG8tZW0oX3R5LWdldC1mb250LXNpemUoJGJyZWFrcG9pbnQtdmFsdWUpLCAkYmFzZS1mb250LXNpemUpO1xuICAgICRsaW5lLWhlaWdodDogX3R5LWdldC1saW5lLWhlaWdodCgkYnJlYWtwb2ludC12YWx1ZSk7XG5cbiAgICAvLyBPdXRwdXQgd2l0aG91dCBicmVha3BvaW50c1xuICAgIEBpZiAkYnJlYWtwb2ludCA9PSBudWxsIHtcbiAgICAgICBAaW5jbHVkZSBfdHktd3JpdGUtYmFzZWxpbmUtcHVzaChcbiAgICAgICAgJGZvbnQtc2l6ZTogJGZvbnQtc2l6ZSxcbiAgICAgICAgJGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQsXG4gICAgICAgICRicmVha3BvaW50OiAkYnJlYWtwb2ludCxcbiAgICAgICAgJF9tYXA6IChcbiAgICAgICAgICB0YXJnZXQtbWFwOiAkYmFzZS1tYXAsXG4gICAgICAgICAgYmFzZW1hcDogJGJhc2UtbWFwLFxuICAgICAgICAgIGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHMsXG4gICAgICAgICAgdHlwZWZhY2U6ICR0eXBlZmFjZSxcbiAgICAgICAgICB0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH1cblxuICAgIC8vIE91dHB1dCB3aXRoIGJyZWFrcG9pbnRzXG4gICAgQGVsc2Uge1xuICAgICAgQGluY2x1ZGUgX3R5LW91dHB1dC13aXRoLWJyZWFrcG9pbnQtbGlicmFyeSB7XG4gICAgICAgIEBpbmNsdWRlIF90eS13cml0ZS1iYXNlbGluZS1wdXNoKFxuICAgICAgICAgICRmb250LXNpemU6ICRmb250LXNpemUsXG4gICAgICAgICAgJGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQsXG4gICAgICAgICAgJGJyZWFrcG9pbnQ6ICRicmVha3BvaW50LFxuICAgICAgICAgICRfbWFwOiAoXG4gICAgICAgICAgICB0YXJnZXQtbWFwOiAkYmFzZS1tYXAsXG4gICAgICAgICAgICBiYXNlbWFwOiAkYmFzZS1tYXAsXG4gICAgICAgICAgICBicmVha3BvaW50czogJGJyZWFrcG9pbnRzLFxuICAgICAgICAgICAgdHlwZWZhY2U6ICR0eXBlZmFjZSxcbiAgICAgICAgICAgIHR5cGVmYWNlczogJHR5cGVmYWNlc1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cblxuICAvLyBAaWYgJGJhc2VsaW5lLXB1c2gge1xuICAvLyAgICRiYXNsaW5lLXB1c2gtcHJvcDogbWFwLWdldCgkX21hcCwgYmFzZWxpbmUtcHVzaC1wcm9wKTtcbiAgLy8gICAkX2xpbmUtaGVpZ2h0OiBfdHktZ2V0LWxpbmUtaGVpZ2h0LWZvci1iYXNlbGluZS1wdXNoKFxuICAvLyAgICAgJF9saW5lLWhlaWdodCxcbiAgLy8gICAgICRicmVha3BvaW50LFxuICAvLyAgICAgJF9tYXBcbiAgLy8gICApO1xuICAvLyAgICRwdXNoLWFtdDogX3R5LWdldC1iYXNlbGluZS1wdXNoLWFtdChcbiAgLy8gICAgICRmb250LXNpemU6ICRfZm9udC1zaXplLFxuICAvLyAgICAgJGxpbmUtaGVpZ2h0OiAkX2xpbmUtaGVpZ2h0LFxuICAvLyAgICAgJHR5cGVmYWNlOiAkdHlwZWZhY2UsXG4gIC8vICAgICAkdHlwZWZhY2VzOiAkdHlwZWZhY2VzXG4gIC8vICAgKTtcblxuICAvLyAgIHBhZGRpbmctdG9wOiAkcHVzaC1hbXQ7XG4gIC8vICAgbWFyZ2luLWJvdHRvbTogJHB1c2gtYW10ICogLTE7XG4gIC8vIH0iLCJAaW1wb3J0ICdpbml0JztcbkBpbXBvcnQgJ2NyZWF0ZS1jbGFzcyc7XG5cbi8vLy9cbi8vLyBAYXV0aG9yIFplbGwgTGlld1xuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy8gQHBhcmFtIHtNYXB9ICR0eXBpIFskdHlwaV0gLSAkdHlwaSBtYXBcbi8vLyBAcGFyYW0ge01hcH0gJHR5cGktbXMgWyR0eXBpLW1zXSAtICR0eXBpLW1zIG1hcFxuLy8vIEBwYXJhbSB7TWFwfSAkYnJlYWtwb2ludHMgWyRicmVha3BvaW50c10gLSAkYnJlYWtwb2ludHMgbWFwXG4vLy8gQGdyb3VwIENvcmVcbi8vLy9cblxuLy8gdHlwaVxuLy8gLS0tLS0tLS0tLVxuLy8vIENyZWF0ZXMgZm9udC1zaXplIGFuZCBsaW5lLWhlaWdodCBwcm9wZXJ0aWVzXG4vLy8gQGF1dGhvciBaZWxsIExpZXdcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdGFyZ2V0IC0gZm9udC1tYXAga2V5XG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR0eXBlZmFjZSBbJ3ByaW1hcnknXSAtIHR5cGVmYWNlIGtleVxuLy8vIEBwYXJhbSB7Qm9vbH0gJGJhc2VsaW5lIFtmYWxzZV0gLSBQdXNoZXMgdG8gYmFzZWxpbmUgd2l0aCBwYWRkaW5nLXRvcCBhbmQgbWFyZ2luLWJvdHRvbSBwcm9wc1xuLy8vIEBwYXJhbSB7Qm9vbH0gJHJlbSBbdHJ1ZV0gLSBPdXRwdXRzIHJlbSBvciBlbVxuLy8vIEBwYXJhbSB7TWFwfSAkdHlwaS1icmVha3BvaW50IFskdHlwaS1icmVha3BvaW50XSAtIEJyZWFrcG9pbnQgbGlicmFyeVxuLy8vIEBwYXJhbSB7TWFwfSAkdHlwZWZhY2VzIFskdHlwZWZhY2VzXSAtICR0eXBlZmFjZXMgbWFwXG5AbWl4aW4gdHlwaSAoXG4gICR0YXJnZXQsXG4gICR0eXBlZmFjZTogJ3ByaW1hcnknLFxuICAkYmFzZWxpbmU6IGZhbHNlLFxuICAkcmVtOiB0cnVlLFxuICAkdHlwaTogJHR5cGksXG4gICR0eXBpLW1zOiAkdHlwaS1tcyxcbiAgJHR5cGktYnJlYWtwb2ludDogJHR5cGktYnJlYWtwb2ludCxcbiAgJHR5cGVmYWNlczogJHR5cGVmYWNlcyxcbiAgJGJyZWFrcG9pbnRzOiAkYnJlYWtwb2ludHNcbikge1xuICBAaW5jbHVkZSBfdHktd3JpdGUtYnJlYWtwb2ludHMoKFxuICAgIGJhc2VsaW5lLXB1c2g6ICRiYXNlbGluZSxcbiAgICBicmVha3BvaW50czogJGJyZWFrcG9pbnRzLFxuICAgIGJyZWFrcG9pbnQtbGliOiAkdHlwaS1icmVha3BvaW50LFxuICAgIG91dHB1dDogJ3Byb3BzJyxcbiAgICByZW06ICRyZW0sXG4gICAgdGFyZ2V0OiAkdGFyZ2V0LFxuICAgIHR5cGVmYWNlOiAkdHlwZWZhY2UsXG4gICAgdHlwZWZhY2VzOiAkdHlwZWZhY2VzLFxuICAgIHR5cGktbXM6ICR0eXBpLW1zLFxuICAgIHR5cGk6ICR0eXBpXG4gICkpXG59XG5cbi8vIFR5cGktYmFzZVxuLy8gLS0tLS0tLS0tLVxuLy8vIENyZWF0ZXMgc3R5bGVzIGZvciByb290IHNlbGVjdG9yIChkZWZhdWx0cyB0byBIVE1MKVxuLy8vIEBhdXRob3IgWmVsbCBMaWV3XG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHNlbGVjdG9yIFtodG1sXSAtIERlZmF1bHQgc2VsZWN0b3IgZm9yIHJvb3QgZm9udC1zaXplIGFuZCBsaW5lLWhlaWdodFxuQG1peGluIHR5cGktYmFzZShcbiAgJHNlbGVjdG9yOiAnaHRtbCcsXG4gICR0eXBpOiAkdHlwaSxcbiAgJHR5cGktbXM6ICR0eXBpLW1zLFxuICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50c1xuKSB7XG4gICN7JHNlbGVjdG9yfSB7XG4gICAgQGluY2x1ZGUgdHlwaShcbiAgICAgICR0YXJnZXQ6IGJhc2UsXG4gICAgICAkdHlwaTogJHR5cGksXG4gICAgICAkdHlwaS1tczogJHR5cGktbXMsXG4gICAgICAkYnJlYWtwb2ludHM6ICRicmVha3BvaW50cyxcbiAgICAgICRyZW06IGZhbHNlXG4gICAgKVxuICB9XG59XG5cbiIsIi8vIFR5cGkgSW5pdGlhbGl6ZXJcbi8vIC0tLS0tLS0tLS1cbi8vIC0gQ3JlYXRlcyBiYXNlIG1hcFxuLy8gLSBDYWxscyBleHRlbmRlciAoaWYgdHlwaS1tcyBpcyB1c2VkKVxuLy8gPT09PT09PT09PVxuXG5AbWl4aW4gdHlwaS1pbml0KFxuICAkdHlwaTogJHR5cGksXG4gICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzLFxuICAkdHlwaS1tczogJHR5cGktbXMsXG4gICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbikge1xuICAkX3VwZGF0ZWQtdHlwaTogJHR5cGk7XG4gICRfdXBkYXRlZC10eXBpLW1zOiAkdHlwaS1tcztcblxuICAvLyBVbmNvbW1lbnQgd2hlbiBleHRlbmRlciBpcyBjb21wbGV0ZWQgKFJlcXVpcmVzIGxpYnNhc3MjMy40KVxuICAvLyBPbmx5IGludm9rdmUgZXh0ZW5kZXIgaWYgJHR5cGktbXMgaXMgcHJlc2VudFxuICAvLyAkdHlwaS1tcyBhbmQgJHR5cGkgbWFwIG11c3QgYmUgdGhlaXIgb3JpZ2luYWwgbmFtZXNcbiAgLy8gQGlmIHR5cGUtb2YoJHR5cGktbXMpID09ICdtYXAnIHtcbiAgLy8gICBAZWFjaCAka2V5LCAkdmFsdWUgaW4gJHR5cGktbXMge1xuICAvLyAgICAgJF91cGRhdGVkLXR5cGktbXM6IF90eS1tYXAtZXh0ZW5kZXIoJHR5cGktbXM6ICR0eXBpLW1zKTtcbiAgLy8gICB9XG4gIC8vICAgQGVhY2ggJGtleSwgJHZhbHVlIGluICR0eXBpIHtcbiAgLy8gICAgICRfdXBkYXRlZC10eXBpOiBfdHktbWFwLWV4dGVuZGVyKCRrZXkpO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIEBpZiB0eXBlLW9mKCR0eXBpLW1zKSA9PSAnbWFwJyB7XG4gICAgQGluY2x1ZGUgX3R5LWNoZWNrLWV4dGVuZGVkLW1hcDtcbiAgfVxuXG4gIC8vIElzIHRoZXJlIGEgbmVlZCBmb3IgcHJpbWFyeSB0eXBlZmFjZT8gQ29tbWVudGVkIHVudGlsIHRoZXJlIHJlYWxseSBpcy5cbiAgLy8gQGlmIHR5cGUtb2YoJHR5cGVmYWNlcykgPT0gJ21hcCcge1xuICAvLyAgICRfaGFzLXByaW1hcnktdHlwZWZhY2U6IF90eS1oYXMtdHlwZWZhY2UoJ3ByaW1hcnknLCAkdHlwZWZhY2VzKTtcbiAgLy8gfVxuXG4gIEBpbmNsdWRlIHR5cGktYmFzZShcbiAgICAkdHlwaTogJF91cGRhdGVkLXR5cGksXG4gICAgJHR5cGktbXM6ICRfdXBkYXRlZC10eXBpLW1zLFxuICAgICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzXG4gIClcbn1cblxuIiwiLy8gdHlwaS1jcmVhdGVzLWNsYXNzZXNcbi8vIC0tLS0tLS0tLS1cbi8vLyBUeXBpIGhlbHBzIGNyZWF0ZSBjbGFzc2VzIGFjY29yZGluZyB0byBmb250LW1hcCBrZXlzXG4vLy8gQGF1dGhvciBaZWxsIExpZXdcbi8vLyBAYWNjZXNzIHB1YmxpY1xuLy8vIEBwYXJhbSB7TWFwfSAkdHlwaSBbJHR5cGldIC0gJHR5cGkgbWFwXG5AbWl4aW4gdHlwaS1jcmVhdGUtY2xhc3NlcygkdHlwaTogJHR5cGkpIHtcbiAgQGVhY2ggJG1hcCwgJHZhbHVlcyBpbiAkdHlwaSB7XG4gICAgLiN7JG1hcH0ge1xuICAgICAgQGluY2x1ZGUgdHlwaSgkbWFwKTtcbiAgICB9XG4gIH1cbn1cblxuIiwiLy8vL1xuLy8vIEBhdXRob3IgWmVsbCBMaWV3XG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAZ3JvdXAgaGVscGVycy10eXBlZmFjZXNcbi8vLyBAcmVxdWlyZXMgJHR5cGVmYWNlc1xuLy8vIEBwYXJhbSB7TWFwfSAkdHlwZWZhY2VzIFskdHlwZWZhY2VzXSAtICR0eXBlZmFjZXMgbWFwXG4vLy8vXG5cbi8vIGZ3XG4vLyAtLS0tLS0tLS0tXG4vLy8gQ3JlYXRlcyBmb250IHdlaWdodCBwcm9wZXJ0eSBmcm9tICR0eXBlZmFjZXMgbWFwLlxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdHlwZWZhY2UgLSB0eXBlZmFjZSBrZXlcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHdlaWdodCAtIGtleSBvZiB3ZWlnaHRcbi8vLyBAb3V0cHV0IGZvbnQtd2VpZ2h0OiAzMDA7XG5AbWl4aW4gZncoXG4gICR0eXBlZmFjZSxcbiAgJHdlaWdodCxcbiAgJHR5cGVmYWNlczogJHR5cGVmYWNlc1xuKSB7XG4gIEBpZiB0eXBlLW9mKCR0eXBlZmFjZXMpICE9ICdtYXAnIHtcbiAgICBAZXJyb3IgXCJDYW5ub3QgZmluZCAjeyR0eXBlZmFjZXN9IG1hcCBmb3VuZFwiO1xuICB9XG5cbiAgZm9udC13ZWlnaHQ6IG1hcC1mZXRjaCgkdHlwZWZhY2VzLCAkdHlwZWZhY2Ugd2VpZ2h0cyAkd2VpZ2h0KTtcbn1cblxuLy8gZmZcbi8vIC0tLS0tLS0tLS1cbi8vLyBDcmVhdGVzIGZvbnQgZmFtaWx5IHByb3BlcnR5IGZyb20gJHR5cGVmYWNlcyBtYXAuXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR0eXBlZmFjZSAtIHR5cGVmYWNlIGtleVxuLy8vIEBvdXRwdXQgZm9udC1mYW1pbHk6ICdmb250LXN0YWNrJ1xuQG1peGluIGZmKFxuICAkdHlwZWZhY2UsXG4gICR0eXBlZmFjZXM6ICR0eXBlZmFjZXNcbikge1xuICBAaWYgdHlwZS1vZigkdHlwZWZhY2VzKSAhPSAnbWFwJyB7XG4gICAgQGVycm9yIFwiQ2Fubm90IGZpbmQgI3skdHlwZWZhY2VzfSBtYXAgZm91bmRcIjtcbiAgfVxuXG4gIGZvbnQtZmFtaWx5Om1hcC1mZXRjaCgkdHlwZWZhY2VzLCAkdHlwZWZhY2Ugc3RhY2spO1xufSIsIi8vID09PT09PT09PT1cbi8vIFRvb2xzXG4vLyA9PT09PT09PT09XG5cbi8vIE1peGluc1xuQG1peGluIGNmIHtcbiAgJjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgZGlzcGxheTogdGFibGU7XG4gIH1cblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgIGNsZWFyOiBib3RoO1xuICB9XG59XG5cbkBtaXhpbiBjZW50ZXIge1xuICBtYXJnaW4tbGVmdDogYXV0bztcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xufVxuXG5AbWl4aW4gYWJzb2x1dGUtY2VudGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtcbn1cblxuQG1peGluIHotaW5kZXgoJGxheWVyLCAkcG9zaXRpb246cmVsYXRpdmUpIHtcbiAgcG9zaXRpb246ICRwb3NpdGlvbjtcbiAgei1pbmRleDogbGF5ZXItaW5kZXgoJGxheWVyKTtcbn1cblxuQG1peGluIHZlcnRpY2FsLWFsaWduKCRwb3NpdGlvbjogcmVsYXRpdmUpIHtcbiAgcG9zaXRpb246ICRwb3NpdGlvbjtcbiAgdG9wOiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbn1cblxuQG1peGluIGltYWdlLTJ4KCRpbWFnZSkge1xuICBAbWVkaWEgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMS4zKSxcbiAgICAgICAgICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyLjYvMiksXG4gICAgICAgICAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAxLjMpLFxuICAgICAgICAgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDEuMyksXG4gICAgICAgICAobWluLXJlc29sdXRpb246IDEuM2RwcHgpIHtcbiAgICAvKiBvbiByZXRpbmEsIHVzZSBpbWFnZSB0aGF0J3Mgc2NhbGVkIGJ5IDIgKi9cbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJGltYWdlKTtcbiAgfVxufVxuXG5AbWl4aW4gcmVzcG9uc2l2ZS1iZy1pbWFnZSgkaW1hZ2Utd2lkdGgsICRpbWFnZS1oZWlnaHQpIHtcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlO1xuICBoZWlnaHQ6IDA7XG4gIHBhZGRpbmctYm90dG9tOiBwZXJjZW50YWdlKCRpbWFnZS1oZWlnaHQgLyAkaW1hZ2Utd2lkdGgpO1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLy8gRnVuY3Rpb25zXG5AZnVuY3Rpb24gbGF5ZXItaW5kZXgoJGxheWVyKSB7XG4gIEByZXR1cm4gaW5kZXgoJGxheWVycywgJGxheWVyKTtcbn0iLCIvLyA9PT09PT09PT09XG4vLyBCYXNlXG4vLyA9PT09PT09PT09XG5odG1sIHtcbiAgICBAaW5jbHVkZSB0eXBpLWJhc2UoKTtcblxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbioge1xuICAgIGJveC1zaXppbmc6IGluaGVyaXQ7XG5cbiAgICAmOmJlZm9yZSB7XG4gICAgICAgIGJveC1zaXppbmc6IGluaGVyaXQ7XG4gICAgfVxuXG4gICAgJjphZnRlciB7XG4gICAgICAgIGJveC1zaXppbmc6IGluaGVyaXQ7XG4gICAgfVxufVxuXG5ib2R5IHtcbiAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICBtYXJnaW4tdG9wOiAycmVtO1xuICAgIH1cblxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgZm9udC1zaXplOiAxNnB4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsgICAgXG4gICAgY29sb3I6ICRkYXJrLWdyZXk7XG4gICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICBmb250LWZhbWlseTogJHNhbnMtc2VyaWY7XG59XG5cbi8vIEVsZW1lbnRzXG5oMSB7XG4gICAgQGluY2x1ZGUgdHlwaShoMS1tYXApO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG59XG5cbmgyIHtcbiAgICBAaW5jbHVkZSB0eXBpKGgyLW1hcCk7XG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbn1cblxuaDMge1xuICAgIEBpbmNsdWRlIHR5cGkoaDMtbWFwKTtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xufVxuXG5oNCB7XG4gICAgQGluY2x1ZGUgdHlwaShoNC1tYXApO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG59XG5cbmg1IHtcbiAgICBAaW5jbHVkZSB0eXBpKGg1LW1hcCk7XG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbn1cblxuaDYge1xuICAgIEBpbmNsdWRlIHR5cGkoaDYtbWFwKTtcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xufVxuXG5zbWFsbCB7XG4gICAgQGluY2x1ZGUgdHlwaShzbWFsbC1tYXApO1xufVxuXG5wIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XG4gICAgbWFyZ2luLXRvcDogMDtcbn1cblxuYSB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3V0bGluZTogMDtcblxuICAgICY6Zm9jdXMge1xuICAgICAgICBvdXRsaW5lOiAwO1xuICAgIH1cbn1cblxuc3Ryb25nIHtcbiAgICBmb250LXdlaWdodDogYm9sZDtcbn1cblxudWwsIG9sIHtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG59XG5cbmhyIHtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZDogJGxpZ2h0LWdyZXk7XG59XG5cbi5pbWctcmVzcG9uc2l2ZSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IGF1dG87XG59IiwiLy8gPT09PT09PT09PVxuLy8gT2JqZWN0c1xuLy8gPT09PT09PT09PVxuXG4uby1jb250YWluZXIge1xuICAgIEBpbmNsdWRlIGNmO1xuXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgd2lkdGg6IDc1MHB4O1xuICAgIH1cblxuICAgIEBpbmNsdWRlIG1hcHB5LWJwKHhsYXJnZSkge1xuICAgICAgICB3aWR0aDogOTcwcHg7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgbWFwcHktYnAoeHhsKSB7XG4gICAgICAgIHdpZHRoOiAxMTcwcHg7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgbWFwcHktYnAoeHh4bCkge1xuICAgICAgICB3aWR0aDogMTM4MHB4O1xuICAgIH1cblxuICAgIHBhZGRpbmctbGVmdDogMC45Mzc1cmVtO1xuICAgIHBhZGRpbmctcmlnaHQ6IDAuOTM3NXJlbTtcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG59XG5cbi5vLWNvbnRhaW5lci0tZmx1aWQge1xuICAgIEBpbmNsdWRlIGNmO1xuXG4gICAgcGFkZGluZy1yaWdodDogMC45Mzc1cmVtO1xuICAgIHBhZGRpbmctbGVmdDogMC45Mzc1cmVtO1xufVxuXG4uby1yb3cge1xuICAgIEBpbmNsdWRlIGNmO1xuXG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0wLjkzNzVyZW07XG4gICAgICAgIG1hcmdpbi1yaWdodDogLTAuOTM3NXJlbTtcbiAgICB9XG5cbiAgICBbY2xhc3NePVwiby1jb2xcIl0ge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjkzNzVyZW07XG4gICAgfVxufVxuXG4uby1jb2wtLTEge1xuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDEgb2YgMTIpO1xuICAgICAgICB9XG4gICAgfVxuIFxuICAgIEBpbmNsdWRlIHNwYW4oMTIgb2YgMTIpO1xuIFxuICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oMSBvZiAxMiBsYXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLm8tY29sLS0yIHtcbiAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigyIG9mIDEyKTtcbiAgICAgICAgfVxuICAgIH1cbiBcbiAgICBAaW5jbHVkZSBzcGFuKDEyIG9mIDEyKTtcbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDIgb2YgMTIgbGFzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi5vLWNvbC0tMyB7XG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oMyBvZiAxMik7XG4gICAgICAgIH1cbiAgICB9XG4gXG4gICAgQGluY2x1ZGUgc3BhbigxMiBvZiAxMik7XG4gXG4gICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigzIG9mIDEyIGxhc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgJjpudGgtY2hpbGQoNG4pIHsgIFxuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDMgb2YgMTIgbGFzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gIFxuICAgIH1cbn1cblxuLm8tY29sLS00IHtcbiAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig0IG9mIDEyKTtcbiAgICAgICAgfVxuICAgIH1cbiBcbiAgICBAaW5jbHVkZSBzcGFuKDEyIG9mIDEyKTtcbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDQgb2YgMTIgbGFzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi5vLWNvbC0tNSB7XG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oNSBvZiAxMik7XG4gICAgICAgIH1cbiAgICB9XG4gXG4gICAgQGluY2x1ZGUgc3BhbigxMiBvZiAxMik7XG4gXG4gICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig1IG9mIDEyIGxhc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTYge1xuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDYgb2YgMTIpO1xuICAgICAgICB9XG4gICAgfVxuIFxuICAgIEBpbmNsdWRlIHNwYW4oMTIgb2YgMTIpO1xuIFxuICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oNiBvZiAxMiBsYXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLm8tY29sLS03IHtcbiAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig3IG9mIDEyKTtcbiAgICAgICAgfVxuICAgIH1cbiBcbiAgICBAaW5jbHVkZSBzcGFuKDEyIG9mIDEyKTtcbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDcgb2YgMTIgbGFzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi5vLWNvbC0tOCB7XG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oOCBvZiAxMik7XG4gICAgICAgIH1cbiAgICB9XG4gXG4gICAgQGluY2x1ZGUgc3BhbigxMiBvZiAxMik7XG4gXG4gICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig4IG9mIDEyIGxhc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTkge1xuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDkgb2YgMTIpO1xuICAgICAgICB9XG4gICAgfVxuIFxuICAgIEBpbmNsdWRlIHNwYW4oMTIgb2YgMTIpO1xuIFxuICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oOSBvZiAxMiBsYXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLm8tY29sLS0xMCB7XG4gICAgQGluY2x1ZGUgbWFwcHktYnAobGFyZ2UpIHtcbiAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oMTAgb2YgMTIpO1xuICAgICAgICB9XG4gICAgfVxuIFxuICAgIEBpbmNsdWRlIHNwYW4oMTIgb2YgMTIpO1xuIFxuICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgICAgIEBpbmNsdWRlIHNwYW4oMTAgb2YgMTIgbGFzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi5vLWNvbC0tMTEge1xuICAgIEBpbmNsdWRlIG1hcHB5LWJwKGxhcmdlKSB7XG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDExIG9mIDEyKTtcbiAgICAgICAgfVxuICAgIH1cbiBcbiAgICBAaW5jbHVkZSBzcGFuKDEyIG9mIDEyKTtcbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSBtYXBweS1icChsYXJnZSkge1xuICAgICAgICAgICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDExIG9mIDEyIGxhc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTFfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDEgb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigxIG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTJfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDIgb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigyIG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTNfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDMgb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3BhbigzIG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTRfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDQgb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig0IG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTVfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDUgb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig1IG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTZfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDYgb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig2IG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTdfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDcgb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig3IG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLThfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDggb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig4IG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTlfX3NtIHtcbiAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICBAaW5jbHVkZSBzcGFuKDkgb2YgMTIpO1xuICAgIH1cbiBcbiAgICAmOmxhc3QtY2hpbGQge1xuICAgICAgICBAaW5jbHVkZSB3aXRoLWxheW91dCgkZ3JpZC0xMikge1xuICAgICAgICAgICAgQGluY2x1ZGUgc3Bhbig5IG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTEwX19zbSB7XG4gICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgQGluY2x1ZGUgc3BhbigxMCBvZiAxMik7XG4gICAgfVxuIFxuICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDEwIG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTExX19zbSB7XG4gICAgQGluY2x1ZGUgd2l0aC1sYXlvdXQoJGdyaWQtMTIpIHtcbiAgICAgICAgQGluY2x1ZGUgc3BhbigxMSBvZiAxMik7XG4gICAgfVxuIFxuICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgIEBpbmNsdWRlIHdpdGgtbGF5b3V0KCRncmlkLTEyKSB7XG4gICAgICAgICAgICBAaW5jbHVkZSBzcGFuKDExIG9mIDEyIGxhc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4uby1jb2wtLTEyIHsgXG4gICAgQGluY2x1ZGUgc3BhbigxMiBvZiAxMik7XG59XG5cbi5vLWZsZXgge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xufSIsIi8vID09PT09PT09PT1cbi8vIFV0aWxpdGllc1xuLy8gPT09PT09PT09PVxuXG4udS1jbGVhcmZpeCB7XG4gICAgQGluY2x1ZGUgY2Y7XG59XG5cbi51LXRleHQtLWxlZnQge1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG59XG5cbi51LXRleHQtLXJpZ2h0IHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLnUtZmxvYXQtLWxlZnQge1xuICAgIGZsb2F0OiBsZWZ0O1xufVxuXG4udS1mbG9hdC0tcmlnaHQge1xuICAgIGZsb2F0OiByaWdodDtcbn1cblxuLnUtdGV4dC0td2hpdGUge1xuXHRjb2xvcjogd2hpdGU7XG59IiwiLy8gPT09PT09PT09PT09PT09PT09PT09XG4vLyBDb21wb25lbnQgLSBIZWFkZXIgXG4vLyA9PT09PT09PT09PT09PT09PT09PT1cbmhlYWRlciB7XG5cdEBpbmNsdWRlIGNmO1xufVxuXG4uYy1sb2dvIHtcblx0bWF4LXdpZHRoOiAxNjVweDtcbn1cblxuLmMtbG9nby0taW1nIHtcblx0YmFja2dyb3VuZDogdXJsKFwiLy92aWEucGxhY2Vob2xkZXIuY29tLzE2NXg0MD90ZXh0PUxvZ28rQk9PU1RFRFwiKSAwIDAgbm8tcmVwZWF0O1xuXHR0ZXh0LWluZGVudDogLTk5OTlweDtcblxuXHQvLyBzdWJzdGl0dXRlIGZvciB5b3VyIGltYWdlIGRpbWVuc2lvbnNcbiAgICBAaW5jbHVkZSByZXNwb25zaXZlLWJnLWltYWdlKDE2NSwgNDApO1xufVxuXG4uYy1icmVhZGNydW1iLS1saXN0IHtcblx0QGluY2x1ZGUgY2Y7XG5cblx0bGlzdC1zdHlsZTogbm9uZTtcblx0cGFkZGluZy1sZWZ0OiAwO1xuXG5cdGxpIHtcblx0XHRAaW5jbHVkZSB0eXBpKCdicmVhZGNydW1iLW1hcCcpO1xuXG5cdFx0ZmxvYXQ6IGxlZnQ7XG5cblx0XHQmOmJlZm9yZSB7XG5cdFx0XHRjb250ZW50OiBcIj5cIjtcblx0XHRcdG1hcmdpbjogMCAwLjYyNXJlbTtcblx0XHR9XG5cblx0XHQmOmZpcnN0LWNoaWxkIHtcblx0XHRcdCY6YmVmb3JlIHtcblx0XHRcdFx0Y29udGVudDogXCJcIjtcblx0XHRcdFx0bWFyZ2luOiAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSIsIi8vID09PT09PT09PT09PT09PT09PT09PVxuLy8gQ29tcG9uZW50IC0gUHJvZHVjdHMgXG4vLyA9PT09PT09PT09PT09PT09PT09PT1cblxuLmMtcHJvZHVjdHMge1xuXHRib3JkZXItdG9wOiAxcHggc29saWQgJGdyZXk7XG5cdHBhZGRpbmctdG9wOiAxcmVtO1xuXG5cdFtjbGFzc149XCJvLWNvbC0tXCJdIHtcblx0XHRtYXJnaW4tYm90dG9tOiAwLjYyNXJlbTtcblx0fVxufVxuXG4uYy1wcm9kdWN0cy0tY2FyZCB7XG5cdGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuXHRoZWlnaHQ6IDEwMCU7XG59XG5cbi5jLXByb2R1Y3RzLS10aHVtYiB7XG5cdG1hcmdpbjogMCBhdXRvO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdHRleHQtYWxpZ246IGNlbnRlcjtcblx0d2lkdGg6IDcwJTtcblx0cGFkZGluZy10b3A6IDAuNjI1cmVtO1xuXG5cdD4gaW1nIHtcblx0XHRvYmplY3QtZml0OiBjb3Zlcjtcblx0XHRtYXgtaGVpZ2h0OiAyMDBweDtcblx0XHRtaW4taGVpZ2h0OiAxMDBweDtcblx0fVxufVxuXG4uYy1wcm9kdWN0cy0tZGV0YWlscyB7XG5cdHBhZGRpbmc6IDAuNjI1cmVtO1xufVxuXG4uYy1wcm9kdWN0cy0tZGV0YWlsc19fdGl0bGUge1xuXHRjb2xvcjogZGFya2VuKCRncmV5LCAzMCUpO1xuXHRmb250LXNpemU6IDEuMTI1cmVtO1xuXHRmb250LXdlaWdodDogYm9sZDtcblx0bWFyZ2luLWJvdHRvbTogMC4zMTI1cmVtO1xufVxuXG4uYy1wcm9kdWN0cy0tZGV0YWlsc19fZGVzYyB7XG5cdGNvbG9yOiBkYXJrZW4oJGdyZXksIDE1JSk7XG5cdG1hcmdpbi1ib3R0b206IDAuMzEyNXJlbTtcbn1cblxuLmMtcHJvZHVjdHMtLWRldGFpbHNfX3ByaWNlIHtcblx0Zm9udC13ZWlnaHQ6IGJvbGQ7XG5cdGZvbnQtc2l6ZTogMS4xMjVyZW07XG59IiwiLy8gPT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ29tcG9uZW50IC0gUGFnaW5hdGlvbiBcbi8vID09PT09PT09PT09PT09PT09PT09PT1cblxuLnBhZ2luYXRpb24ge1xuXHRsaXN0LXN0eWxlOiBub25lO1xuXHRwYWRkaW5nLWxlZnQ6IDA7XG5cdGZsb2F0OiByaWdodDtcblxuXHRsaSB7XG5cdFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRcdG1hcmdpbi1sZWZ0OiAwLjYyNXJlbTtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcblx0XHRwYWRkaW5nOiAwLjYyNXJlbTtcblxuXHRcdCY6Zmlyc3QtY2hpbGQge1xuXHRcdFx0bWFyZ2luLWxlZnQ6IDA7XG5cdFx0fVxuXG5cdFx0Ji5hY3RpdmUge1xuXHRcdFx0Y29sb3I6ICRncmV5O1xuXHRcdH1cblxuXHRcdGEge1xuXHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdH1cblx0fVxuXG5cdC5wcmV2aW91cyB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cblx0XHQmLmRpc2FibGVkIHtcblx0XHRcdGNvbG9yOiAkZ3JleTtcblx0XHR9XG5cdH1cblxuXHQubmV4dCB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cblx0XHQmLmRpc2FibGVkIHtcblx0XHRcdGNvbG9yOiAkZ3JleTtcblx0XHR9XG5cdH1cblxuXHQuYnJlYWstbWUge1xuXHRcdGNvbG9yOiAkZGFyay1ncmV5O1xuXHRcdHRleHQtZGVjb3JhdGlvbjogbm9uZTsgXG5cdH1cbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFDSUEsNEVBQTRFO0FBRTVFO2dGQUNnRjtBQUVoRjs7OztHQUlHO0FBRUgsQUFBQSxJQUFJLENBQUM7RUFDSCxXQUFXLEVBQUUsSUFBSTtFQUNqQixPQUFPO0VBQ1Asb0JBQW9CLEVBQUUsSUFBSTtFQUMxQixPQUFPO0VBQ1Asd0JBQXdCLEVBQUUsSUFBSTtFQUM5QixPQUFPLEVBQ1I7O0FBRUQ7Z0ZBQ2dGO0FBRWhGOztHQUVHO0FBRUgsQUFBQSxJQUFJLENBQUM7RUFDSCxNQUFNLEVBQUUsQ0FBQyxHQUNWOztBQUVEOztHQUVHO0FBRUgsQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQztFQUMzQyxPQUFPLEVBQUUsS0FBSyxHQUNmOztBQUVEOzs7R0FHRztBQUVILEFBQUEsRUFBRSxDQUFDO0VBQ0QsU0FBUyxFQUFFLEdBQUc7RUFDZCxNQUFNLEVBQUUsUUFBUSxHQUNqQjs7QUFFRDtnRkFDZ0Y7QUFFaEY7OztHQUdHO0FBRUgsQUFBQSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQztFQUN2QixPQUFPO0VBQ1AsT0FBTyxFQUFFLEtBQUssR0FDZjs7QUFFRDs7R0FFRztBQUVILEFBQUEsTUFBTSxDQUFDO0VBQ0wsTUFBTSxFQUFFLFFBQVEsR0FDakI7O0FBRUQ7OztHQUdHO0FBRUgsQUFBQSxFQUFFLENBQUM7RUFDRCxVQUFVLEVBQUUsV0FBVztFQUN2QixPQUFPO0VBQ1AsTUFBTSxFQUFFLENBQUM7RUFDVCxPQUFPO0VBQ1AsUUFBUSxFQUFFLE9BQU87RUFDakIsT0FBTyxFQUNSOztBQUVEOzs7R0FHRztBQUVILEFBQUEsR0FBRyxDQUFDO0VBQ0YsV0FBVyxFQUFFLG9CQUFvQjtFQUNqQyxPQUFPO0VBQ1AsU0FBUyxFQUFFLEdBQUc7RUFDZCxPQUFPLEVBQ1I7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 */
